
CourseProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dd4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004f64  08004f64  00005f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ffc  08004ffc  0000709c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ffc  08004ffc  00005ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005004  08005004  0000709c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005004  08005004  00006004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005008  08005008  00006008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  0800500c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  2000009c  080050a8  0000709c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  080050a8  00007350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eda8  00000000  00000000  000070cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000230e  00000000  00000000  00015e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  00018188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a39  00000000  00000000  00018ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198b7  00000000  00000000  00019901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d1b  00000000  00000000  000331b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0363  00000000  00000000  00043ed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e4236  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b04  00000000  00000000  000e427c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000e7d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f4c 	.word	0x08004f4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	08004f4c 	.word	0x08004f4c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <SetPTimer>:
 * 			 number of timer that you want to update.
 * 			 NewTime - the new time delay in case of existing timer or time delay for the new timer in
 * 			 case if timer dosen't exist yet.
 */
void SetPTimer(uint8_t NewNumber, uint32_t NewTime)
  {
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	6039      	str	r1, [r7, #0]
 800056a:	71fb      	strb	r3, [r7, #7]
		// The number of a free timer in array (255 - means that no free timers available)
    uint8_t free_timer        = 255;
 800056c:	23ff      	movs	r3, #255	@ 0xff
 800056e:	73fb      	strb	r3, [r7, #15]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000570:	f3ef 8310 	mrs	r3, PRIMASK
 8000574:	60bb      	str	r3, [r7, #8]
  return(result);
 8000576:	68bb      	ldr	r3, [r7, #8]
    uint8_t interrupts_enable = ~__get_PRIMASK(); 			// Get the current state of interrupts
 8000578:	b2db      	uxtb	r3, r3
 800057a:	43db      	mvns	r3, r3
 800057c:	737b      	strb	r3, [r7, #13]

    if (interrupts_enable) __disable_irq();       			// Disable interrupts if they were enabled (atomic access)
 800057e:	7b7b      	ldrb	r3, [r7, #13]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SetPTimer+0x28>
  __ASM volatile ("cpsid i" : : : "memory");
 8000584:	b672      	cpsid	i
}
 8000586:	bf00      	nop
    // Go thru timers queue. Looking for existing or empty timer
    for (uint8_t i = 0; i != MAX_NUMBER_OF_TIMERS; i++)
 8000588:	2300      	movs	r3, #0
 800058a:	73bb      	strb	r3, [r7, #14]
 800058c:	e01c      	b.n	80005c8 <SetPTimer+0x68>
      {
        if (Ptimer[i].Number == NewNumber)              // If there is the timer with the same "Number"
 800058e:	7bbb      	ldrb	r3, [r7, #14]
 8000590:	4a1b      	ldr	r2, [pc, #108]	@ (8000600 <SetPTimer+0xa0>)
 8000592:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000596:	b2db      	uxtb	r3, r3
 8000598:	79fa      	ldrb	r2, [r7, #7]
 800059a:	429a      	cmp	r2, r3
 800059c:	d108      	bne.n	80005b0 <SetPTimer+0x50>
          {
            Ptimer[i].Time = NewTime;                   // Give it a new "Time"
 800059e:	7bbb      	ldrb	r3, [r7, #14]
 80005a0:	4a17      	ldr	r2, [pc, #92]	@ (8000600 <SetPTimer+0xa0>)
 80005a2:	00db      	lsls	r3, r3, #3
 80005a4:	4413      	add	r3, r2
 80005a6:	683a      	ldr	r2, [r7, #0]
 80005a8:	605a      	str	r2, [r3, #4]
            free_timer = 255;                           // Mark that no free timers available and break the cycle
 80005aa:	23ff      	movs	r3, #255	@ 0xff
 80005ac:	73fb      	strb	r3, [r7, #15]
            break;
 80005ae:	e00e      	b.n	80005ce <SetPTimer+0x6e>
          }
        if (Ptimer[i].Number == 255)                    // If there is a free timer, save it number
 80005b0:	7bbb      	ldrb	r3, [r7, #14]
 80005b2:	4a13      	ldr	r2, [pc, #76]	@ (8000600 <SetPTimer+0xa0>)
 80005b4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	2bff      	cmp	r3, #255	@ 0xff
 80005bc:	d101      	bne.n	80005c2 <SetPTimer+0x62>
          {
            free_timer = i;
 80005be:	7bbb      	ldrb	r3, [r7, #14]
 80005c0:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i != MAX_NUMBER_OF_TIMERS; i++)
 80005c2:	7bbb      	ldrb	r3, [r7, #14]
 80005c4:	3301      	adds	r3, #1
 80005c6:	73bb      	strb	r3, [r7, #14]
 80005c8:	7bbb      	ldrb	r3, [r7, #14]
 80005ca:	2b08      	cmp	r3, #8
 80005cc:	d1df      	bne.n	800058e <SetPTimer+0x2e>
          }
      }
    if(free_timer < MAX_NUMBER_OF_TIMERS)               // If there is a free timer in array
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
 80005d0:	2b07      	cmp	r3, #7
 80005d2:	d80a      	bhi.n	80005ea <SetPTimer+0x8a>
      {
        Ptimer[free_timer].Number = NewNumber;          // Give it a "Number"
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	490a      	ldr	r1, [pc, #40]	@ (8000600 <SetPTimer+0xa0>)
 80005d8:	79fa      	ldrb	r2, [r7, #7]
 80005da:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
        Ptimer[free_timer].Time = NewTime;              // And a "Time"
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	4a07      	ldr	r2, [pc, #28]	@ (8000600 <SetPTimer+0xa0>)
 80005e2:	00db      	lsls	r3, r3, #3
 80005e4:	4413      	add	r3, r2
 80005e6:	683a      	ldr	r2, [r7, #0]
 80005e8:	605a      	str	r2, [r3, #4]
      }

    if (interrupts_enable) __enable_irq(); // Enable interrupts if they were disabled (the end of atomic access)
 80005ea:	7b7b      	ldrb	r3, [r7, #13]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SetPTimer+0x94>
  __ASM volatile ("cpsie i" : : : "memory");
 80005f0:	b662      	cpsie	i
}
 80005f2:	bf00      	nop
  }
 80005f4:	bf00      	nop
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	20000000 	.word	0x20000000

08000604 <PTimer>:
/************************************************************************************************
 * This function realizes the program timer functionality, it should be called from the interrupt
 * service routing of the hardware timer that provides time base for the program timer
 */
void PTimer(void)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i != MAX_NUMBER_OF_TIMERS; i++) 		// Go thru timers queue.
 800060a:	2300      	movs	r3, #0
 800060c:	71fb      	strb	r3, [r7, #7]
 800060e:	e036      	b.n	800067e <PTimer+0x7a>
	    {
	      if (Ptimer[i].Number != 255)                  		// If timer exists and its time delay dosen't
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	4a20      	ldr	r2, [pc, #128]	@ (8000694 <PTimer+0x90>)
 8000614:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2bff      	cmp	r3, #255	@ 0xff
 800061c:	d02c      	beq.n	8000678 <PTimer+0x74>
	        {
	          if (Ptimer[i].Time != 0)                    	// equal to 0,
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	4a1c      	ldr	r2, [pc, #112]	@ (8000694 <PTimer+0x90>)
 8000622:	00db      	lsls	r3, r3, #3
 8000624:	4413      	add	r3, r2
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d00a      	beq.n	8000642 <PTimer+0x3e>
	            {
	              Ptimer[i].Time--;                       	// decrement the time delay
 800062c:	79fa      	ldrb	r2, [r7, #7]
 800062e:	4919      	ldr	r1, [pc, #100]	@ (8000694 <PTimer+0x90>)
 8000630:	00d3      	lsls	r3, r2, #3
 8000632:	440b      	add	r3, r1
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	1e59      	subs	r1, r3, #1
 8000638:	4816      	ldr	r0, [pc, #88]	@ (8000694 <PTimer+0x90>)
 800063a:	00d3      	lsls	r3, r2, #3
 800063c:	4403      	add	r3, r0
 800063e:	6059      	str	r1, [r3, #4]
 8000640:	e01a      	b.n	8000678 <PTimer+0x74>
	            }
	          else
	            {
	          		ptimerFlag.timer |= 1 << Ptimer[i].Number;// If time dalay equal 0 then set the flag
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	4a13      	ldr	r2, [pc, #76]	@ (8000694 <PTimer+0x90>)
 8000646:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800064a:	b2db      	uxtb	r3, r3
 800064c:	461a      	mov	r2, r3
 800064e:	2301      	movs	r3, #1
 8000650:	fa03 f102 	lsl.w	r1, r3, r2
 8000654:	4b10      	ldr	r3, [pc, #64]	@ (8000698 <PTimer+0x94>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	b2db      	uxtb	r3, r3
 800065a:	b25a      	sxtb	r2, r3
 800065c:	b24b      	sxtb	r3, r1
 800065e:	4313      	orrs	r3, r2
 8000660:	b25b      	sxtb	r3, r3
 8000662:	b2d9      	uxtb	r1, r3
 8000664:	4a0c      	ldr	r2, [pc, #48]	@ (8000698 <PTimer+0x94>)
 8000666:	7813      	ldrb	r3, [r2, #0]
 8000668:	f361 0307 	bfi	r3, r1, #0, #8
 800066c:	7013      	strb	r3, [r2, #0]
	              Ptimer[i].Number = 255;                   // and remove timer from queue
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	4a08      	ldr	r2, [pc, #32]	@ (8000694 <PTimer+0x90>)
 8000672:	21ff      	movs	r1, #255	@ 0xff
 8000674:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (uint8_t i = 0; i != MAX_NUMBER_OF_TIMERS; i++) 		// Go thru timers queue.
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	3301      	adds	r3, #1
 800067c:	71fb      	strb	r3, [r7, #7]
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	2b08      	cmp	r3, #8
 8000682:	d1c5      	bne.n	8000610 <PTimer+0xc>
	            }
	        }
	    }
}
 8000684:	bf00      	nop
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000000 	.word	0x20000000
 8000698:	200000b8 	.word	0x200000b8

0800069c <InitPTimer>:
/**************************************************************************************
 * This function initialize program timer queue. It mast be called before program timer
 * can be used.
 */
void InitPTimer(void)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i != MAX_NUMBER_OF_TIMERS; i++) // Go thru timers queue.
 80006a2:	2300      	movs	r3, #0
 80006a4:	71fb      	strb	r3, [r7, #7]
 80006a6:	e00d      	b.n	80006c4 <InitPTimer+0x28>
		{
			Ptimer[i].Number = 255;													// Set timer number to "not used" (the number 255)
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	4a0b      	ldr	r2, [pc, #44]	@ (80006d8 <InitPTimer+0x3c>)
 80006ac:	21ff      	movs	r1, #255	@ 0xff
 80006ae:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
			Ptimer[i].Time = 0;															// Set time delay to 0
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	4a08      	ldr	r2, [pc, #32]	@ (80006d8 <InitPTimer+0x3c>)
 80006b6:	00db      	lsls	r3, r3, #3
 80006b8:	4413      	add	r3, r2
 80006ba:	2200      	movs	r2, #0
 80006bc:	605a      	str	r2, [r3, #4]
	for (uint8_t i = 0; i != MAX_NUMBER_OF_TIMERS; i++) // Go thru timers queue.
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	3301      	adds	r3, #1
 80006c2:	71fb      	strb	r3, [r7, #7]
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	2b08      	cmp	r3, #8
 80006c8:	d1ee      	bne.n	80006a8 <InitPTimer+0xc>
		}
}
 80006ca:	bf00      	nop
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	20000000 	.word	0x20000000

080006dc <KillPTimer>:
 * This function kills the timer with given number if it exists in timer queue
 * Input parameters:
 * 			 timerNumber - the number of a timer to kill.
 */
void KillPTimer(uint8_t timerNumber)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80006e6:	f3ef 8310 	mrs	r3, PRIMASK
 80006ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80006ec:	68bb      	ldr	r3, [r7, #8]
	uint8_t interrupts_enable = ~__get_PRIMASK (); // Get the current state of interrupts
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	43db      	mvns	r3, r3
 80006f2:	73bb      	strb	r3, [r7, #14]
	if (interrupts_enable) __disable_irq ();       // Disable interrupts if they were enabled (atomic access)
 80006f4:	7bbb      	ldrb	r3, [r7, #14]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <KillPTimer+0x22>
  __ASM volatile ("cpsid i" : : : "memory");
 80006fa:	b672      	cpsid	i
}
 80006fc:	bf00      	nop
	// Go thru timers queue. Looking for the timer with timerNumber
	for (uint8_t i = 0; i != MAX_NUMBER_OF_TIMERS; i++)
 80006fe:	2300      	movs	r3, #0
 8000700:	73fb      	strb	r3, [r7, #15]
 8000702:	e016      	b.n	8000732 <KillPTimer+0x56>
		{
			if (Ptimer[i].Number == timerNumber)       // If there is the timer with the same "Number"
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	4a12      	ldr	r2, [pc, #72]	@ (8000750 <KillPTimer+0x74>)
 8000708:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800070c:	b2db      	uxtb	r3, r3
 800070e:	79fa      	ldrb	r2, [r7, #7]
 8000710:	429a      	cmp	r2, r3
 8000712:	d10b      	bne.n	800072c <KillPTimer+0x50>
				{
					Ptimer[i].Time = 0;                    // Clear "Time"
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	4a0e      	ldr	r2, [pc, #56]	@ (8000750 <KillPTimer+0x74>)
 8000718:	00db      	lsls	r3, r3, #3
 800071a:	4413      	add	r3, r2
 800071c:	2200      	movs	r2, #0
 800071e:	605a      	str	r2, [r3, #4]
					Ptimer[i].Number = 255;          			 // Mark timer queue entry as free and break the cycle
 8000720:	7bfb      	ldrb	r3, [r7, #15]
 8000722:	4a0b      	ldr	r2, [pc, #44]	@ (8000750 <KillPTimer+0x74>)
 8000724:	21ff      	movs	r1, #255	@ 0xff
 8000726:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
					break;
 800072a:	e005      	b.n	8000738 <KillPTimer+0x5c>
	for (uint8_t i = 0; i != MAX_NUMBER_OF_TIMERS; i++)
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	3301      	adds	r3, #1
 8000730:	73fb      	strb	r3, [r7, #15]
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	2b08      	cmp	r3, #8
 8000736:	d1e5      	bne.n	8000704 <KillPTimer+0x28>
				}
		}
	if (interrupts_enable) __enable_irq();  // Enable interrupts if they were disabled (the end of atomic access)
 8000738:	7bbb      	ldrb	r3, [r7, #14]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <KillPTimer+0x66>
  __ASM volatile ("cpsie i" : : : "memory");
 800073e:	b662      	cpsie	i
}
 8000740:	bf00      	nop
}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	20000000 	.word	0x20000000

08000754 <lcd1602_Init>:
uint8_t CtrlPinsRetrieve(lcd1602_HandleTypeDef *lcd1602_Handle);
void Instruction_Write(lcd1602_HandleTypeDef *lcd1602_Handle, const uint8_t *instruction);
void Data_Write(lcd1602_HandleTypeDef *lcd1602_Handle, const uint8_t *data);

void lcd1602_Init(lcd1602_HandleTypeDef *lcd1602_Handle, I2C_HandleTypeDef *hi2c, uint8_t address)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	4613      	mov	r3, r2
 8000760:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
 8000762:	2064      	movs	r0, #100	@ 0x64
 8000764:	f001 f920 	bl	80019a8 <HAL_Delay>
	/* Device specific info retrieve */
	lcd1602_Handle->hi2c = hi2c;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	601a      	str	r2, [r3, #0]
	lcd1602_Handle->address = address;
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	79fa      	ldrb	r2, [r7, #7]
 8000772:	711a      	strb	r2, [r3, #4]
	lcd1602_Handle->instruction = NULL;
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	2200      	movs	r2, #0
 8000778:	715a      	strb	r2, [r3, #5]
	lcd1602_Handle->data = NULL;
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	2200      	movs	r2, #0
 800077e:	719a      	strb	r2, [r3, #6]
	lcd1602_Handle->ctrlPins.RS_Pin = SET;
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	2201      	movs	r2, #1
 8000784:	71da      	strb	r2, [r3, #7]
	lcd1602_Handle->ctrlPins.RW_Pin = SET;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	2201      	movs	r2, #1
 800078a:	721a      	strb	r2, [r3, #8]
	lcd1602_Handle->ctrlPins.E_Pin = SET;
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	2201      	movs	r2, #1
 8000790:	725a      	strb	r2, [r3, #9]
	lcd1602_Handle->ctrlPins.LED = ENABLE;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	2201      	movs	r2, #1
 8000796:	729a      	strb	r2, [r3, #10]
	lcd1602_Handle->dispBits.displayState = DISABLE;
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	2200      	movs	r2, #0
 800079c:	72da      	strb	r2, [r3, #11]
	lcd1602_Handle->dispBits.cursorState = DISABLE;
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	2200      	movs	r2, #0
 80007a2:	731a      	strb	r2, [r3, #12]
	lcd1602_Handle->dispBits.blinkState = DISABLE;
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	2200      	movs	r2, #0
 80007a8:	735a      	strb	r2, [r3, #13]
	/* At power on, all the ports are HIGH [PCF8574 datasheet] */
	RS_Pin(lcd1602_Handle, RESET);
 80007aa:	2100      	movs	r1, #0
 80007ac:	68f8      	ldr	r0, [r7, #12]
 80007ae:	f000 f944 	bl	8000a3a <RS_Pin>
	RW_Pin(lcd1602_Handle, RESET);
 80007b2:	2100      	movs	r1, #0
 80007b4:	68f8      	ldr	r0, [r7, #12]
 80007b6:	f000 f964 	bl	8000a82 <RW_Pin>
	E_Pin(lcd1602_Handle, RESET);
 80007ba:	2100      	movs	r1, #0
 80007bc:	68f8      	ldr	r0, [r7, #12]
 80007be:	f000 f984 	bl	8000aca <E_Pin>
	lcd1602_LED(lcd1602_Handle, DISABLE);
 80007c2:	2100      	movs	r1, #0
 80007c4:	68f8      	ldr	r0, [r7, #12]
 80007c6:	f000 f919 	bl	80009fc <lcd1602_LED>
	/* Set 4-Bit Interface */
	HAL_Delay(50);
 80007ca:	2032      	movs	r0, #50	@ 0x32
 80007cc:	f001 f8ec 	bl	80019a8 <HAL_Delay>
	lcd1602_Handle->instruction = 0b00110000;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	2230      	movs	r2, #48	@ 0x30
 80007d4:	715a      	strb	r2, [r3, #5]
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	3305      	adds	r3, #5
 80007da:	4619      	mov	r1, r3
 80007dc:	68f8      	ldr	r0, [r7, #12]
 80007de:	f000 f9b8 	bl	8000b52 <Instruction_Write>
	HAL_Delay(5);
 80007e2:	2005      	movs	r0, #5
 80007e4:	f001 f8e0 	bl	80019a8 <HAL_Delay>
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	3305      	adds	r3, #5
 80007ec:	4619      	mov	r1, r3
 80007ee:	68f8      	ldr	r0, [r7, #12]
 80007f0:	f000 f9af 	bl	8000b52 <Instruction_Write>
	HAL_Delay(1);
 80007f4:	2001      	movs	r0, #1
 80007f6:	f001 f8d7 	bl	80019a8 <HAL_Delay>
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	3305      	adds	r3, #5
 80007fe:	4619      	mov	r1, r3
 8000800:	68f8      	ldr	r0, [r7, #12]
 8000802:	f000 f9a6 	bl	8000b52 <Instruction_Write>
	lcd1602_Handle->instruction = 0b00100000;
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	2220      	movs	r2, #32
 800080a:	715a      	strb	r2, [r3, #5]
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	3305      	adds	r3, #5
 8000810:	4619      	mov	r1, r3
 8000812:	68f8      	ldr	r0, [r7, #12]
 8000814:	f000 f99d 	bl	8000b52 <Instruction_Write>
	/* Specify the number of display lines and character font */
	lcd1602_Handle->instruction = 0b00100000;
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	2220      	movs	r2, #32
 800081c:	715a      	strb	r2, [r3, #5]
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	3305      	adds	r3, #5
 8000822:	4619      	mov	r1, r3
 8000824:	68f8      	ldr	r0, [r7, #12]
 8000826:	f000 f994 	bl	8000b52 <Instruction_Write>
	lcd1602_Handle->instruction = 0b10000000;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	2280      	movs	r2, #128	@ 0x80
 800082e:	715a      	strb	r2, [r3, #5]
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	3305      	adds	r3, #5
 8000834:	4619      	mov	r1, r3
 8000836:	68f8      	ldr	r0, [r7, #12]
 8000838:	f000 f98b 	bl	8000b52 <Instruction_Write>
	/* Display off */
	lcd1602_Display(lcd1602_Handle, DISABLE);
 800083c:	2100      	movs	r1, #0
 800083e:	68f8      	ldr	r0, [r7, #12]
 8000840:	f000 f899 	bl	8000976 <lcd1602_Display>
	/* Display clear */
	lcd1602_Clear(lcd1602_Handle);
 8000844:	68f8      	ldr	r0, [r7, #12]
 8000846:	f000 f876 	bl	8000936 <lcd1602_Clear>
	/* Entry mode set */
	lcd1602_Handle->instruction = 0b00000000;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	2200      	movs	r2, #0
 800084e:	715a      	strb	r2, [r3, #5]
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	3305      	adds	r3, #5
 8000854:	4619      	mov	r1, r3
 8000856:	68f8      	ldr	r0, [r7, #12]
 8000858:	f000 f97b 	bl	8000b52 <Instruction_Write>
	lcd1602_Handle->instruction = 0b01100000;
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	2260      	movs	r2, #96	@ 0x60
 8000860:	715a      	strb	r2, [r3, #5]
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	3305      	adds	r3, #5
 8000866:	4619      	mov	r1, r3
 8000868:	68f8      	ldr	r0, [r7, #12]
 800086a:	f000 f972 	bl	8000b52 <Instruction_Write>
	/* Display on */
	lcd1602_Display(lcd1602_Handle, ENABLE);
 800086e:	2101      	movs	r1, #1
 8000870:	68f8      	ldr	r0, [r7, #12]
 8000872:	f000 f880 	bl	8000976 <lcd1602_Display>
	/* LED backlight on */
	HAL_Delay(500);
 8000876:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800087a:	f001 f895 	bl	80019a8 <HAL_Delay>
	lcd1602_LED(lcd1602_Handle, ENABLE);
 800087e:	2101      	movs	r1, #1
 8000880:	68f8      	ldr	r0, [r7, #12]
 8000882:	f000 f8bb 	bl	80009fc <lcd1602_LED>
	HAL_Delay(500);
 8000886:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800088a:	f001 f88d 	bl	80019a8 <HAL_Delay>
}
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <lcd1602_Print>:

void lcd1602_Print(lcd1602_HandleTypeDef *lcd1602_Handle, uint8_t *pString)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b082      	sub	sp, #8
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
 800089e:	6039      	str	r1, [r7, #0]
	do
	{
		lcd1602_Handle->data = *pString++;
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	1c5a      	adds	r2, r3, #1
 80008a4:	603a      	str	r2, [r7, #0]
 80008a6:	781a      	ldrb	r2, [r3, #0]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	719a      	strb	r2, [r3, #6]
		Data_Write(lcd1602_Handle, &lcd1602_Handle->data);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3306      	adds	r3, #6
 80008b0:	4619      	mov	r1, r3
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f000 f990 	bl	8000bd8 <Data_Write>
		lcd1602_Handle->data = lcd1602_Handle->data << 4;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	799b      	ldrb	r3, [r3, #6]
 80008bc:	011b      	lsls	r3, r3, #4
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	719a      	strb	r2, [r3, #6]
		Data_Write(lcd1602_Handle, &lcd1602_Handle->data);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3306      	adds	r3, #6
 80008c8:	4619      	mov	r1, r3
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f000 f984 	bl	8000bd8 <Data_Write>
	} while (*pString != '\0');
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d1e3      	bne.n	80008a0 <lcd1602_Print+0xa>
}
 80008d8:	bf00      	nop
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <lcd1602_SetCursor>:

void lcd1602_SetCursor(lcd1602_HandleTypeDef *lcd1602_Handle, uint8_t col, uint8_t row)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b084      	sub	sp, #16
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
 80008ea:	460b      	mov	r3, r1
 80008ec:	70fb      	strb	r3, [r7, #3]
 80008ee:	4613      	mov	r3, r2
 80008f0:	70bb      	strb	r3, [r7, #2]
	uint8_t DDRAM_address = col + (0x40 * row);
 80008f2:	78bb      	ldrb	r3, [r7, #2]
 80008f4:	019b      	lsls	r3, r3, #6
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	78fb      	ldrb	r3, [r7, #3]
 80008fa:	4413      	add	r3, r2
 80008fc:	73fb      	strb	r3, [r7, #15]
	lcd1602_Handle->instruction = 0b10000000 | DDRAM_address;
 80008fe:	7bfb      	ldrb	r3, [r7, #15]
 8000900:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000904:	b2da      	uxtb	r2, r3
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	715a      	strb	r2, [r3, #5]
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	3305      	adds	r3, #5
 800090e:	4619      	mov	r1, r3
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f000 f91e 	bl	8000b52 <Instruction_Write>
	lcd1602_Handle->instruction = lcd1602_Handle->instruction << 4;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	795b      	ldrb	r3, [r3, #5]
 800091a:	011b      	lsls	r3, r3, #4
 800091c:	b2da      	uxtb	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	715a      	strb	r2, [r3, #5]
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	3305      	adds	r3, #5
 8000926:	4619      	mov	r1, r3
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f000 f912 	bl	8000b52 <Instruction_Write>
}
 800092e:	bf00      	nop
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <lcd1602_Clear>:

void lcd1602_Clear(lcd1602_HandleTypeDef *lcd1602_Handle)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b082      	sub	sp, #8
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
	lcd1602_Handle->instruction = 0b00000001;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2201      	movs	r2, #1
 8000942:	715a      	strb	r2, [r3, #5]
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3305      	adds	r3, #5
 8000948:	4619      	mov	r1, r3
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f000 f901 	bl	8000b52 <Instruction_Write>
	lcd1602_Handle->instruction = lcd1602_Handle->instruction << 4;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	795b      	ldrb	r3, [r3, #5]
 8000954:	011b      	lsls	r3, r3, #4
 8000956:	b2da      	uxtb	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	715a      	strb	r2, [r3, #5]
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3305      	adds	r3, #5
 8000960:	4619      	mov	r1, r3
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f000 f8f5 	bl	8000b52 <Instruction_Write>
	HAL_Delay(2);
 8000968:	2002      	movs	r0, #2
 800096a:	f001 f81d 	bl	80019a8 <HAL_Delay>
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <lcd1602_Display>:
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
	HAL_Delay(2);
}

void lcd1602_Display(lcd1602_HandleTypeDef *lcd1602_Handle, FunctionalState state)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
 800097e:	460b      	mov	r3, r1
 8000980:	70fb      	strb	r3, [r7, #3]
	lcd1602_Handle->instruction = 0b00001000;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2208      	movs	r2, #8
 8000986:	715a      	strb	r2, [r3, #5]
	lcd1602_Handle->dispBits.displayState = state;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	78fa      	ldrb	r2, [r7, #3]
 800098c:	72da      	strb	r2, [r3, #11]
	if (lcd1602_Handle->dispBits.displayState == ENABLE)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	7adb      	ldrb	r3, [r3, #11]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d106      	bne.n	80009a4 <lcd1602_Display+0x2e>
		SET_BIT(lcd1602_Handle->instruction, 1 << 2);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	795b      	ldrb	r3, [r3, #5]
 800099a:	f043 0304 	orr.w	r3, r3, #4
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	715a      	strb	r2, [r3, #5]
	if (lcd1602_Handle->dispBits.cursorState == ENABLE)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	7b1b      	ldrb	r3, [r3, #12]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d106      	bne.n	80009ba <lcd1602_Display+0x44>
		SET_BIT(lcd1602_Handle->instruction, 1 << 1);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	795b      	ldrb	r3, [r3, #5]
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	715a      	strb	r2, [r3, #5]
	if (lcd1602_Handle->dispBits.blinkState == ENABLE)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	7b5b      	ldrb	r3, [r3, #13]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d106      	bne.n	80009d0 <lcd1602_Display+0x5a>
		SET_BIT(lcd1602_Handle->instruction, 1 << 0);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	795b      	ldrb	r3, [r3, #5]
 80009c6:	f043 0301 	orr.w	r3, r3, #1
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	715a      	strb	r2, [r3, #5]
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3305      	adds	r3, #5
 80009d4:	4619      	mov	r1, r3
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f000 f8bb 	bl	8000b52 <Instruction_Write>
	lcd1602_Handle->instruction = lcd1602_Handle->instruction << 4;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	795b      	ldrb	r3, [r3, #5]
 80009e0:	011b      	lsls	r3, r3, #4
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	715a      	strb	r2, [r3, #5]
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3305      	adds	r3, #5
 80009ec:	4619      	mov	r1, r3
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f000 f8af 	bl	8000b52 <Instruction_Write>
}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <lcd1602_LED>:
	lcd1602_Handle->instruction = lcd1602_Handle->instruction << 4;
	Instruction_Write(lcd1602_Handle, &lcd1602_Handle->instruction);
}

void lcd1602_LED(lcd1602_HandleTypeDef *lcd1602_Handle, FunctionalState state)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af02      	add	r7, sp, #8
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	460b      	mov	r3, r1
 8000a06:	70fb      	strb	r3, [r7, #3]
	lcd1602_Handle->ctrlPins.LED = state;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	78fa      	ldrb	r2, [r7, #3]
 8000a0c:	729a      	strb	r2, [r3, #10]
	uint8_t ctrlPins = CtrlPinsRetrieve(lcd1602_Handle);
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f000 f87f 	bl	8000b12 <CtrlPinsRetrieve>
 8000a14:	4603      	mov	r3, r0
 8000a16:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6818      	ldr	r0, [r3, #0]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	791b      	ldrb	r3, [r3, #4]
 8000a20:	4619      	mov	r1, r3
 8000a22:	f107 020f 	add.w	r2, r7, #15
 8000a26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	f001 fb4d 	bl	80020cc <HAL_I2C_Master_Transmit>
}
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <RS_Pin>:

/**
 *@section Private functions
 */
void RS_Pin(lcd1602_HandleTypeDef *lcd1602_Handle, FlagStatus status)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b086      	sub	sp, #24
 8000a3e:	af02      	add	r7, sp, #8
 8000a40:	6078      	str	r0, [r7, #4]
 8000a42:	460b      	mov	r3, r1
 8000a44:	70fb      	strb	r3, [r7, #3]
	if (lcd1602_Handle->ctrlPins.RS_Pin != status)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	79db      	ldrb	r3, [r3, #7]
 8000a4a:	78fa      	ldrb	r2, [r7, #3]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d014      	beq.n	8000a7a <RS_Pin+0x40>
	{
		lcd1602_Handle->ctrlPins.RS_Pin = status;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	78fa      	ldrb	r2, [r7, #3]
 8000a54:	71da      	strb	r2, [r3, #7]
		uint8_t ctrlPins = CtrlPinsRetrieve(lcd1602_Handle);
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f000 f85b 	bl	8000b12 <CtrlPinsRetrieve>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6818      	ldr	r0, [r3, #0]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	791b      	ldrb	r3, [r3, #4]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f107 020f 	add.w	r2, r7, #15
 8000a6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a72:	9300      	str	r3, [sp, #0]
 8000a74:	2301      	movs	r3, #1
 8000a76:	f001 fb29 	bl	80020cc <HAL_I2C_Master_Transmit>
	}
}
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <RW_Pin>:

void RW_Pin(lcd1602_HandleTypeDef *lcd1602_Handle, FlagStatus status)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b086      	sub	sp, #24
 8000a86:	af02      	add	r7, sp, #8
 8000a88:	6078      	str	r0, [r7, #4]
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	70fb      	strb	r3, [r7, #3]
	if (lcd1602_Handle->ctrlPins.RW_Pin != status)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	7a1b      	ldrb	r3, [r3, #8]
 8000a92:	78fa      	ldrb	r2, [r7, #3]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d014      	beq.n	8000ac2 <RW_Pin+0x40>
	{
		lcd1602_Handle->ctrlPins.RW_Pin = status;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	78fa      	ldrb	r2, [r7, #3]
 8000a9c:	721a      	strb	r2, [r3, #8]
		uint8_t ctrlPins = CtrlPinsRetrieve(lcd1602_Handle);
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f000 f837 	bl	8000b12 <CtrlPinsRetrieve>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6818      	ldr	r0, [r3, #0]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	791b      	ldrb	r3, [r3, #4]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f107 020f 	add.w	r2, r7, #15
 8000ab6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	2301      	movs	r3, #1
 8000abe:	f001 fb05 	bl	80020cc <HAL_I2C_Master_Transmit>
	}
}
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <E_Pin>:

void E_Pin(lcd1602_HandleTypeDef *lcd1602_Handle, FlagStatus status)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b086      	sub	sp, #24
 8000ace:	af02      	add	r7, sp, #8
 8000ad0:	6078      	str	r0, [r7, #4]
 8000ad2:	460b      	mov	r3, r1
 8000ad4:	70fb      	strb	r3, [r7, #3]
	if (lcd1602_Handle->ctrlPins.E_Pin != status)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	7a5b      	ldrb	r3, [r3, #9]
 8000ada:	78fa      	ldrb	r2, [r7, #3]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d014      	beq.n	8000b0a <E_Pin+0x40>
	{
		lcd1602_Handle->ctrlPins.E_Pin = status;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	78fa      	ldrb	r2, [r7, #3]
 8000ae4:	725a      	strb	r2, [r3, #9]
		uint8_t ctrlPins = CtrlPinsRetrieve(lcd1602_Handle);
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f000 f813 	bl	8000b12 <CtrlPinsRetrieve>
 8000aec:	4603      	mov	r3, r0
 8000aee:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPins, sizeof(ctrlPins), I2C_TIMEOUT);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6818      	ldr	r0, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	791b      	ldrb	r3, [r3, #4]
 8000af8:	4619      	mov	r1, r3
 8000afa:	f107 020f 	add.w	r2, r7, #15
 8000afe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b02:	9300      	str	r3, [sp, #0]
 8000b04:	2301      	movs	r3, #1
 8000b06:	f001 fae1 	bl	80020cc <HAL_I2C_Master_Transmit>
	}
}
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <CtrlPinsRetrieve>:

uint8_t CtrlPinsRetrieve(lcd1602_HandleTypeDef *lcd1602_Handle)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
	return (uint8_t)(lcd1602_Handle->ctrlPins.RS_Pin << 0 | lcd1602_Handle->ctrlPins.RW_Pin << 1 | lcd1602_Handle->ctrlPins.E_Pin << 2 | lcd1602_Handle->ctrlPins.LED << 3);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	79db      	ldrb	r3, [r3, #7]
 8000b1e:	b25a      	sxtb	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	7a1b      	ldrb	r3, [r3, #8]
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	b25b      	sxtb	r3, r3
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	b25a      	sxtb	r2, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	7a5b      	ldrb	r3, [r3, #9]
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	b25b      	sxtb	r3, r3
 8000b34:	4313      	orrs	r3, r2
 8000b36:	b25a      	sxtb	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	7a9b      	ldrb	r3, [r3, #10]
 8000b3c:	00db      	lsls	r3, r3, #3
 8000b3e:	b25b      	sxtb	r3, r3
 8000b40:	4313      	orrs	r3, r2
 8000b42:	b25b      	sxtb	r3, r3
 8000b44:	b2db      	uxtb	r3, r3
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <Instruction_Write>:

void Instruction_Write(lcd1602_HandleTypeDef *lcd1602_Handle, const uint8_t *instruction)
{
 8000b52:	b590      	push	{r4, r7, lr}
 8000b54:	b087      	sub	sp, #28
 8000b56:	af02      	add	r7, sp, #8
 8000b58:	6078      	str	r0, [r7, #4]
 8000b5a:	6039      	str	r1, [r7, #0]
	uint8_t ctrlPinsAndInstruction;
	RS_Pin(lcd1602_Handle, RESET);
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff ff6b 	bl	8000a3a <RS_Pin>
	RW_Pin(lcd1602_Handle, RESET);
 8000b64:	2100      	movs	r1, #0
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f7ff ff8b 	bl	8000a82 <RW_Pin>
	E_Pin(lcd1602_Handle, SET);
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f7ff ffab 	bl	8000aca <E_Pin>
	MODIFY_REG(ctrlPinsAndInstruction, 0xF, CtrlPinsRetrieve(lcd1602_Handle));
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	b25b      	sxtb	r3, r3
 8000b78:	f023 030f 	bic.w	r3, r3, #15
 8000b7c:	b25c      	sxtb	r4, r3
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff ffc7 	bl	8000b12 <CtrlPinsRetrieve>
 8000b84:	4603      	mov	r3, r0
 8000b86:	b25b      	sxtb	r3, r3
 8000b88:	4323      	orrs	r3, r4
 8000b8a:	b25b      	sxtb	r3, r3
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	73fb      	strb	r3, [r7, #15]
	MODIFY_REG(ctrlPinsAndInstruction, 0xF0, (*instruction) & 0xF0);
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	b25b      	sxtb	r3, r3
 8000b94:	f003 030f 	and.w	r3, r3, #15
 8000b98:	b25a      	sxtb	r2, r3
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	b25b      	sxtb	r3, r3
 8000ba0:	f023 030f 	bic.w	r3, r3, #15
 8000ba4:	b25b      	sxtb	r3, r3
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	b25b      	sxtb	r3, r3
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPinsAndInstruction, sizeof(ctrlPinsAndInstruction), I2C_TIMEOUT);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6818      	ldr	r0, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	791b      	ldrb	r3, [r3, #4]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f107 020f 	add.w	r2, r7, #15
 8000bbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	f001 fa82 	bl	80020cc <HAL_I2C_Master_Transmit>
	E_Pin(lcd1602_Handle, RESET);
 8000bc8:	2100      	movs	r1, #0
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff ff7d 	bl	8000aca <E_Pin>
}
 8000bd0:	bf00      	nop
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd90      	pop	{r4, r7, pc}

08000bd8 <Data_Write>:

void Data_Write(lcd1602_HandleTypeDef *lcd1602_Handle, const uint8_t *data)
{
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b087      	sub	sp, #28
 8000bdc:	af02      	add	r7, sp, #8
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
	uint8_t ctrlPinsAndData;
	RS_Pin(lcd1602_Handle, SET);
 8000be2:	2101      	movs	r1, #1
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff ff28 	bl	8000a3a <RS_Pin>
	RW_Pin(lcd1602_Handle, RESET);
 8000bea:	2100      	movs	r1, #0
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ff48 	bl	8000a82 <RW_Pin>
	E_Pin(lcd1602_Handle, SET);
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f7ff ff68 	bl	8000aca <E_Pin>
	MODIFY_REG(ctrlPinsAndData, 0xF, CtrlPinsRetrieve(lcd1602_Handle));
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
 8000bfc:	b25b      	sxtb	r3, r3
 8000bfe:	f023 030f 	bic.w	r3, r3, #15
 8000c02:	b25c      	sxtb	r4, r3
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff ff84 	bl	8000b12 <CtrlPinsRetrieve>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	b25b      	sxtb	r3, r3
 8000c0e:	4323      	orrs	r3, r4
 8000c10:	b25b      	sxtb	r3, r3
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	73fb      	strb	r3, [r7, #15]
	MODIFY_REG(ctrlPinsAndData, 0xF0, (*data) & 0xF0);
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
 8000c18:	b25b      	sxtb	r3, r3
 8000c1a:	f003 030f 	and.w	r3, r3, #15
 8000c1e:	b25a      	sxtb	r2, r3
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	b25b      	sxtb	r3, r3
 8000c26:	f023 030f 	bic.w	r3, r3, #15
 8000c2a:	b25b      	sxtb	r3, r3
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	b25b      	sxtb	r3, r3
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(lcd1602_Handle->hi2c, lcd1602_Handle->address, &ctrlPinsAndData, sizeof(ctrlPinsAndData), I2C_TIMEOUT);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6818      	ldr	r0, [r3, #0]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	791b      	ldrb	r3, [r3, #4]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f107 020f 	add.w	r2, r7, #15
 8000c42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	2301      	movs	r3, #1
 8000c4a:	f001 fa3f 	bl	80020cc <HAL_I2C_Master_Transmit>
	E_Pin(lcd1602_Handle, RESET);
 8000c4e:	2100      	movs	r1, #0
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff ff3a 	bl	8000aca <E_Pin>
 8000c56:	bf00      	nop
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd90      	pop	{r4, r7, pc}
	...

08000c60 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	f5ad 6d37 	sub.w	sp, sp, #2928	@ 0xb70
 8000c66:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */
	buttonStates_t button_state = notpressed;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f887 3b6f 	strb.w	r3, [r7, #2927]	@ 0xb6f
	buttonAntibounceStates_t button_antibounce_state = wait;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f887 3b6e 	strb.w	r3, [r7, #2926]	@ 0xb6e
	buttonPinState_t button_pin = {GPIO_PIN_RESET, GPIO_PIN_RESET};
 8000c74:	f897 3b48 	ldrb.w	r3, [r7, #2888]	@ 0xb48
 8000c78:	f36f 0300 	bfc	r3, #0, #1
 8000c7c:	f887 3b48 	strb.w	r3, [r7, #2888]	@ 0xb48
 8000c80:	f897 3b48 	ldrb.w	r3, [r7, #2888]	@ 0xb48
 8000c84:	f36f 0341 	bfc	r3, #1, #1
 8000c88:	f887 3b48 	strb.w	r3, [r7, #2888]	@ 0xb48
	buttonFlags_t button_flag = {0, 0};
 8000c8c:	f897 3b44 	ldrb.w	r3, [r7, #2884]	@ 0xb44
 8000c90:	f36f 0300 	bfc	r3, #0, #1
 8000c94:	f887 3b44 	strb.w	r3, [r7, #2884]	@ 0xb44
 8000c98:	f897 3b44 	ldrb.w	r3, [r7, #2884]	@ 0xb44
 8000c9c:	f36f 0341 	bfc	r3, #1, #1
 8000ca0:	f887 3b44 	strb.w	r3, [r7, #2884]	@ 0xb44
	buttonAntibounceFlags_t  button_antibounce_flag = {0, 0};
 8000ca4:	f897 3b40 	ldrb.w	r3, [r7, #2880]	@ 0xb40
 8000ca8:	f36f 0300 	bfc	r3, #0, #1
 8000cac:	f887 3b40 	strb.w	r3, [r7, #2880]	@ 0xb40
 8000cb0:	f897 3b40 	ldrb.w	r3, [r7, #2880]	@ 0xb40
 8000cb4:	f36f 0341 	bfc	r3, #1, #1
 8000cb8:	f887 3b40 	strb.w	r3, [r7, #2880]	@ 0xb40
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000cbc:	f000 fdff 	bl	80018be <HAL_Init>

	/* USER CODE BEGIN Init */
	int temperatureHistory[TEMPERATURE_HISTORY_SIZE];
	int historyIndex = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f8c7 3b68 	str.w	r3, [r7, #2920]	@ 0xb68
	int mode = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f8c7 3b64 	str.w	r3, [r7, #2916]	@ 0xb64
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ccc:	f000 fa36 	bl	800113c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000cd0:	f000 fb3a 	bl	8001348 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000cd4:	f000 fb08 	bl	80012e8 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8000cd8:	f000 fa86 	bl	80011e8 <MX_I2C1_Init>
	MX_I2C3_Init();
 8000cdc:	f000 fac4 	bl	8001268 <MX_I2C3_Init>
	/* USER CODE BEGIN 2 */
	DS1621_Init();
 8000ce0:	f000 fb92 	bl	8001408 <DS1621_Init>
	lcd1602_Init(&lcd1602_Handle, &hi2c1, PCF8574_ADDRESS);
 8000ce4:	224e      	movs	r2, #78	@ 0x4e
 8000ce6:	49cc      	ldr	r1, [pc, #816]	@ (8001018 <main+0x3b8>)
 8000ce8:	48cc      	ldr	r0, [pc, #816]	@ (800101c <main+0x3bc>)
 8000cea:	f7ff fd33 	bl	8000754 <lcd1602_Init>
	int temperature = DS1621_ReadTemp();
 8000cee:	f000 fb9f 	bl	8001430 <DS1621_ReadTemp>
 8000cf2:	f8c7 0b60 	str.w	r0, [r7, #2912]	@ 0xb60
	int currentTemp;
	int maxTemp = temperature;
 8000cf6:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	@ 0xb60
 8000cfa:	f8c7 3b5c 	str.w	r3, [r7, #2908]	@ 0xb5c
	int minTemp = temperature;
 8000cfe:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	@ 0xb60
 8000d02:	f8c7 3b58 	str.w	r3, [r7, #2904]	@ 0xb58
	for (int i = 0; i < TEMPERATURE_HISTORY_SIZE; i++) {
 8000d06:	2300      	movs	r3, #0
 8000d08:	f8c7 3b54 	str.w	r3, [r7, #2900]	@ 0xb54
 8000d0c:	e00e      	b.n	8000d2c <main+0xcc>
		temperatureHistory[i] = temperature;
 8000d0e:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8000d12:	f5a3 6337 	sub.w	r3, r3, #2928	@ 0xb70
 8000d16:	f8d7 2b54 	ldr.w	r2, [r7, #2900]	@ 0xb54
 8000d1a:	f8d7 1b60 	ldr.w	r1, [r7, #2912]	@ 0xb60
 8000d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < TEMPERATURE_HISTORY_SIZE; i++) {
 8000d22:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	@ 0xb54
 8000d26:	3301      	adds	r3, #1
 8000d28:	f8c7 3b54 	str.w	r3, [r7, #2900]	@ 0xb54
 8000d2c:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	@ 0xb54
 8000d30:	f5b3 7f34 	cmp.w	r3, #720	@ 0x2d0
 8000d34:	dbeb      	blt.n	8000d0e <main+0xae>
	}
	InitPTimer();
 8000d36:	f7ff fcb1 	bl	800069c <InitPTimer>
	SetPTimer(TEMP_TIMER, TEMP_TIMEOUT);
 8000d3a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000d3e:	2005      	movs	r0, #5
 8000d40:	f7ff fc0e 	bl	8000560 <SetPTimer>
	SetPTimer(LCD_TIMER, LCD_TIMEOUT);
 8000d44:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000d48:	2004      	movs	r0, #4
 8000d4a:	f7ff fc09 	bl	8000560 <SetPTimer>
	SetPTimer(WAITER_TIMER, WAITER_TIMEOUT);
 8000d4e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000d52:	2006      	movs	r0, #6
 8000d54:	f7ff fc04 	bl	8000560 <SetPTimer>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if ((ptimerFlag.timer) & (1 << TEMP_TIMER)){
 8000d58:	4bb1      	ldr	r3, [pc, #708]	@ (8001020 <main+0x3c0>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	f003 0320 	and.w	r3, r3, #32
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d016      	beq.n	8000d94 <main+0x134>
			ptimerFlag.timer &= ~(1 << TEMP_TIMER);
 8000d66:	4bae      	ldr	r3, [pc, #696]	@ (8001020 <main+0x3c0>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	f023 0320 	bic.w	r3, r3, #32
 8000d70:	b2d9      	uxtb	r1, r3
 8000d72:	4aab      	ldr	r2, [pc, #684]	@ (8001020 <main+0x3c0>)
 8000d74:	7813      	ldrb	r3, [r2, #0]
 8000d76:	f361 0307 	bfi	r3, r1, #0, #8
 8000d7a:	7013      	strb	r3, [r2, #0]
			KillPTimer (TEMP_TIMER);
 8000d7c:	2005      	movs	r0, #5
 8000d7e:	f7ff fcad 	bl	80006dc <KillPTimer>

			temperature = DS1621_ReadTemp();
 8000d82:	f000 fb55 	bl	8001430 <DS1621_ReadTemp>
 8000d86:	f8c7 0b60 	str.w	r0, [r7, #2912]	@ 0xb60

			SetPTimer(TEMP_TIMER, TEMP_TIMEOUT);
 8000d8a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000d8e:	2005      	movs	r0, #5
 8000d90:	f7ff fbe6 	bl	8000560 <SetPTimer>
		}

		if ((ptimerFlag.timer) & (1 << WAITER_TIMER)){
 8000d94:	4ba2      	ldr	r3, [pc, #648]	@ (8001020 <main+0x3c0>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d06f      	beq.n	8000e82 <main+0x222>
			ptimerFlag.timer &= ~(1 << WAITER_TIMER);
 8000da2:	4b9f      	ldr	r3, [pc, #636]	@ (8001020 <main+0x3c0>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000dac:	b2d9      	uxtb	r1, r3
 8000dae:	4a9c      	ldr	r2, [pc, #624]	@ (8001020 <main+0x3c0>)
 8000db0:	7813      	ldrb	r3, [r2, #0]
 8000db2:	f361 0307 	bfi	r3, r1, #0, #8
 8000db6:	7013      	strb	r3, [r2, #0]
			KillPTimer (WAITER_TIMER);
 8000db8:	2006      	movs	r0, #6
 8000dba:	f7ff fc8f 	bl	80006dc <KillPTimer>

			temperatureHistory[historyIndex] = temperature;
 8000dbe:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8000dc2:	f5a3 6337 	sub.w	r3, r3, #2928	@ 0xb70
 8000dc6:	f8d7 2b68 	ldr.w	r2, [r7, #2920]	@ 0xb68
 8000dca:	f8d7 1b60 	ldr.w	r1, [r7, #2912]	@ 0xb60
 8000dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			historyIndex = (historyIndex + 1) % TEMPERATURE_HISTORY_SIZE;
 8000dd2:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	@ 0xb68
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	4a92      	ldr	r2, [pc, #584]	@ (8001024 <main+0x3c4>)
 8000dda:	fb82 1203 	smull	r1, r2, r2, r3
 8000dde:	441a      	add	r2, r3
 8000de0:	1251      	asrs	r1, r2, #9
 8000de2:	17da      	asrs	r2, r3, #31
 8000de4:	1a8a      	subs	r2, r1, r2
 8000de6:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 8000dea:	fb01 f202 	mul.w	r2, r1, r2
 8000dee:	1a9b      	subs	r3, r3, r2
 8000df0:	f8c7 3b68 	str.w	r3, [r7, #2920]	@ 0xb68

			maxTemp = temperature;
 8000df4:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	@ 0xb60
 8000df8:	f8c7 3b5c 	str.w	r3, [r7, #2908]	@ 0xb5c
			minTemp = temperature;
 8000dfc:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	@ 0xb60
 8000e00:	f8c7 3b58 	str.w	r3, [r7, #2904]	@ 0xb58

			for (int i = 0; i < TEMPERATURE_HISTORY_SIZE; i++) {
 8000e04:	2300      	movs	r3, #0
 8000e06:	f8c7 3b50 	str.w	r3, [r7, #2896]	@ 0xb50
 8000e0a:	e030      	b.n	8000e6e <main+0x20e>
				if (temperatureHistory[i] > maxTemp) {
 8000e0c:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8000e10:	f5a3 6337 	sub.w	r3, r3, #2928	@ 0xb70
 8000e14:	f8d7 2b50 	ldr.w	r2, [r7, #2896]	@ 0xb50
 8000e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e1c:	f8d7 2b5c 	ldr.w	r2, [r7, #2908]	@ 0xb5c
 8000e20:	429a      	cmp	r2, r3
 8000e22:	da09      	bge.n	8000e38 <main+0x1d8>
					maxTemp = temperatureHistory[i];
 8000e24:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8000e28:	f5a3 6337 	sub.w	r3, r3, #2928	@ 0xb70
 8000e2c:	f8d7 2b50 	ldr.w	r2, [r7, #2896]	@ 0xb50
 8000e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e34:	f8c7 3b5c 	str.w	r3, [r7, #2908]	@ 0xb5c
				}
				if (temperatureHistory[i] < minTemp) {
 8000e38:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8000e3c:	f5a3 6337 	sub.w	r3, r3, #2928	@ 0xb70
 8000e40:	f8d7 2b50 	ldr.w	r2, [r7, #2896]	@ 0xb50
 8000e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e48:	f8d7 2b58 	ldr.w	r2, [r7, #2904]	@ 0xb58
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	dd09      	ble.n	8000e64 <main+0x204>
					minTemp = temperatureHistory[i];
 8000e50:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8000e54:	f5a3 6337 	sub.w	r3, r3, #2928	@ 0xb70
 8000e58:	f8d7 2b50 	ldr.w	r2, [r7, #2896]	@ 0xb50
 8000e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e60:	f8c7 3b58 	str.w	r3, [r7, #2904]	@ 0xb58
			for (int i = 0; i < TEMPERATURE_HISTORY_SIZE; i++) {
 8000e64:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	@ 0xb50
 8000e68:	3301      	adds	r3, #1
 8000e6a:	f8c7 3b50 	str.w	r3, [r7, #2896]	@ 0xb50
 8000e6e:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	@ 0xb50
 8000e72:	f5b3 7f34 	cmp.w	r3, #720	@ 0x2d0
 8000e76:	dbc9      	blt.n	8000e0c <main+0x1ac>
				}
			}
			SetPTimer(WAITER_TIMER, WAITER_TIMEOUT);
 8000e78:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000e7c:	2006      	movs	r0, #6
 8000e7e:	f7ff fb6f 	bl	8000560 <SetPTimer>
		}

		/* Button state machine*/
		switch (button_antibounce_state)
 8000e82:	f897 3b6e 	ldrb.w	r3, [r7, #2926]	@ 0xb6e
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d002      	beq.n	8000e90 <main+0x230>
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d023      	beq.n	8000ed6 <main+0x276>
				}
			}
			break;
		}
		default:
			break;
 8000e8e:	e07f      	b.n	8000f90 <main+0x330>
			if (gflag.button_action)
 8000e90:	4b65      	ldr	r3, [pc, #404]	@ (8001028 <main+0x3c8>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d075      	beq.n	8000f8a <main+0x32a>
				button_antibounce_state = antibounce;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	f887 3b6e 	strb.w	r3, [r7, #2926]	@ 0xb6e
				button_pin.previous_state = HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3);
 8000ea4:	2108      	movs	r1, #8
 8000ea6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eaa:	f001 f82b 	bl	8001f04 <HAL_GPIO_ReadPin>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	f897 3b48 	ldrb.w	r3, [r7, #2888]	@ 0xb48
 8000eba:	f362 0300 	bfi	r3, r2, #0, #1
 8000ebe:	f887 3b48 	strb.w	r3, [r7, #2888]	@ 0xb48
				SetPTimer (ANTIBOUNCE_TIMER, BOUNCE_TIME);
 8000ec2:	211e      	movs	r1, #30
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	f7ff fb4b 	bl	8000560 <SetPTimer>
				gflag.button_action = 0;
 8000eca:	4a57      	ldr	r2, [pc, #348]	@ (8001028 <main+0x3c8>)
 8000ecc:	7813      	ldrb	r3, [r2, #0]
 8000ece:	f36f 0300 	bfc	r3, #0, #1
 8000ed2:	7013      	strb	r3, [r2, #0]
			break;
 8000ed4:	e059      	b.n	8000f8a <main+0x32a>
			if ((ptimerFlag.timer) & (1 << ANTIBOUNCE_TIMER))
 8000ed6:	4b52      	ldr	r3, [pc, #328]	@ (8001020 <main+0x3c0>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	f003 0308 	and.w	r3, r3, #8
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d054      	beq.n	8000f8e <main+0x32e>
				button_pin.current_state = HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3);
 8000ee4:	2108      	movs	r1, #8
 8000ee6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eea:	f001 f80b 	bl	8001f04 <HAL_GPIO_ReadPin>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	f897 3b48 	ldrb.w	r3, [r7, #2888]	@ 0xb48
 8000efa:	f362 0341 	bfi	r3, r2, #1, #1
 8000efe:	f887 3b48 	strb.w	r3, [r7, #2888]	@ 0xb48
				gflag.button_action = 0;
 8000f02:	4a49      	ldr	r2, [pc, #292]	@ (8001028 <main+0x3c8>)
 8000f04:	7813      	ldrb	r3, [r2, #0]
 8000f06:	f36f 0300 	bfc	r3, #0, #1
 8000f0a:	7013      	strb	r3, [r2, #0]
				if (button_pin.current_state == button_pin.previous_state)
 8000f0c:	f897 3b48 	ldrb.w	r3, [r7, #2888]	@ 0xb48
 8000f10:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	f897 3b48 	ldrb.w	r3, [r7, #2888]	@ 0xb48
 8000f1a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d122      	bne.n	8000f6a <main+0x30a>
					if (button_pin.current_state == GPIO_PIN_SET)
 8000f24:	f897 3b48 	ldrb.w	r3, [r7, #2888]	@ 0xb48
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d006      	beq.n	8000f40 <main+0x2e0>
						button_antibounce_flag.falling_edge = 1;
 8000f32:	f897 3b40 	ldrb.w	r3, [r7, #2880]	@ 0xb40
 8000f36:	f043 0302 	orr.w	r3, r3, #2
 8000f3a:	f887 3b40 	strb.w	r3, [r7, #2880]	@ 0xb40
 8000f3e:	e005      	b.n	8000f4c <main+0x2ec>
						button_antibounce_flag.rising_edge = 1;
 8000f40:	f897 3b40 	ldrb.w	r3, [r7, #2880]	@ 0xb40
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	f887 3b40 	strb.w	r3, [r7, #2880]	@ 0xb40
					ptimerFlag.timer &= ~(1 << ANTIBOUNCE_TIMER);
 8000f4c:	4b34      	ldr	r3, [pc, #208]	@ (8001020 <main+0x3c0>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	f023 0308 	bic.w	r3, r3, #8
 8000f56:	b2d9      	uxtb	r1, r3
 8000f58:	4a31      	ldr	r2, [pc, #196]	@ (8001020 <main+0x3c0>)
 8000f5a:	7813      	ldrb	r3, [r2, #0]
 8000f5c:	f361 0307 	bfi	r3, r1, #0, #8
 8000f60:	7013      	strb	r3, [r2, #0]
					button_antibounce_state = wait;
 8000f62:	2300      	movs	r3, #0
 8000f64:	f887 3b6e 	strb.w	r3, [r7, #2926]	@ 0xb6e
			break;
 8000f68:	e011      	b.n	8000f8e <main+0x32e>
					button_pin.previous_state = button_pin.current_state;
 8000f6a:	f897 3b48 	ldrb.w	r3, [r7, #2888]	@ 0xb48
 8000f6e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	f897 3b48 	ldrb.w	r3, [r7, #2888]	@ 0xb48
 8000f78:	f362 0300 	bfi	r3, r2, #0, #1
 8000f7c:	f887 3b48 	strb.w	r3, [r7, #2888]	@ 0xb48
					SetPTimer (ANTIBOUNCE_TIMER, BOUNCE_TIME);
 8000f80:	211e      	movs	r1, #30
 8000f82:	2003      	movs	r0, #3
 8000f84:	f7ff faec 	bl	8000560 <SetPTimer>
			break;
 8000f88:	e001      	b.n	8000f8e <main+0x32e>
			break;
 8000f8a:	bf00      	nop
 8000f8c:	e000      	b.n	8000f90 <main+0x330>
			break;
 8000f8e:	bf00      	nop
		}

		/* Button state machine*/
		switch (button_state)
 8000f90:	f897 3b6f 	ldrb.w	r3, [r7, #2927]	@ 0xb6f
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d002      	beq.n	8000f9e <main+0x33e>
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d025      	beq.n	8000fe8 <main+0x388>
				button_antibounce_flag.rising_edge = 0;
			}
			break;
		}
		default:
			break;
 8000f9c:	e057      	b.n	800104e <main+0x3ee>
			if (button_antibounce_flag.rising_edge)
 8000f9e:	f897 3b40 	ldrb.w	r3, [r7, #2880]	@ 0xb40
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d00f      	beq.n	8000fcc <main+0x36c>
				button_state = pressed;
 8000fac:	2301      	movs	r3, #1
 8000fae:	f887 3b6f 	strb.w	r3, [r7, #2927]	@ 0xb6f
				button_flag.pressed = 1;
 8000fb2:	f897 3b44 	ldrb.w	r3, [r7, #2884]	@ 0xb44
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	f887 3b44 	strb.w	r3, [r7, #2884]	@ 0xb44
				button_antibounce_flag.rising_edge = 0;
 8000fbe:	f897 3b40 	ldrb.w	r3, [r7, #2880]	@ 0xb40
 8000fc2:	f36f 0300 	bfc	r3, #0, #1
 8000fc6:	f887 3b40 	strb.w	r3, [r7, #2880]	@ 0xb40
			break;
 8000fca:	e03d      	b.n	8001048 <main+0x3e8>
			else if (button_antibounce_flag.falling_edge)
 8000fcc:	f897 3b40 	ldrb.w	r3, [r7, #2880]	@ 0xb40
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d036      	beq.n	8001048 <main+0x3e8>
				button_antibounce_flag.falling_edge = 0;
 8000fda:	f897 3b40 	ldrb.w	r3, [r7, #2880]	@ 0xb40
 8000fde:	f36f 0341 	bfc	r3, #1, #1
 8000fe2:	f887 3b40 	strb.w	r3, [r7, #2880]	@ 0xb40
			break;
 8000fe6:	e02f      	b.n	8001048 <main+0x3e8>
			if (button_antibounce_flag.falling_edge)
 8000fe8:	f897 3b40 	ldrb.w	r3, [r7, #2880]	@ 0xb40
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d01a      	beq.n	800102c <main+0x3cc>
				button_state = notpressed;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f887 3b6f 	strb.w	r3, [r7, #2927]	@ 0xb6f
				button_flag.released = 1;
 8000ffc:	f897 3b44 	ldrb.w	r3, [r7, #2884]	@ 0xb44
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	f887 3b44 	strb.w	r3, [r7, #2884]	@ 0xb44
				button_antibounce_flag.falling_edge = 0;
 8001008:	f897 3b40 	ldrb.w	r3, [r7, #2880]	@ 0xb40
 800100c:	f36f 0341 	bfc	r3, #1, #1
 8001010:	f887 3b40 	strb.w	r3, [r7, #2880]	@ 0xb40
			break;
 8001014:	e01a      	b.n	800104c <main+0x3ec>
 8001016:	bf00      	nop
 8001018:	200000bc 	.word	0x200000bc
 800101c:	200001ec 	.word	0x200001ec
 8001020:	200000b8 	.word	0x200000b8
 8001024:	b60b60b7 	.word	0xb60b60b7
 8001028:	200001fc 	.word	0x200001fc
			else if (button_antibounce_flag.rising_edge)
 800102c:	f897 3b40 	ldrb.w	r3, [r7, #2880]	@ 0xb40
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d008      	beq.n	800104c <main+0x3ec>
				button_antibounce_flag.rising_edge = 0;
 800103a:	f897 3b40 	ldrb.w	r3, [r7, #2880]	@ 0xb40
 800103e:	f36f 0300 	bfc	r3, #0, #1
 8001042:	f887 3b40 	strb.w	r3, [r7, #2880]	@ 0xb40
			break;
 8001046:	e001      	b.n	800104c <main+0x3ec>
			break;
 8001048:	bf00      	nop
 800104a:	e000      	b.n	800104e <main+0x3ee>
			break;
 800104c:	bf00      	nop
		}

		if (button_flag.pressed)
 800104e:	f897 3b44 	ldrb.w	r3, [r7, #2884]	@ 0xb44
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	d013      	beq.n	8001084 <main+0x424>
		{
			mode = (mode + 1) % 3;
 800105c:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 8001060:	1c5a      	adds	r2, r3, #1
 8001062:	4b30      	ldr	r3, [pc, #192]	@ (8001124 <main+0x4c4>)
 8001064:	fb83 3102 	smull	r3, r1, r3, r2
 8001068:	17d3      	asrs	r3, r2, #31
 800106a:	1ac9      	subs	r1, r1, r3
 800106c:	460b      	mov	r3, r1
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	440b      	add	r3, r1
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	f8c7 3b64 	str.w	r3, [r7, #2916]	@ 0xb64
			button_flag.pressed = 0;
 8001078:	f897 3b44 	ldrb.w	r3, [r7, #2884]	@ 0xb44
 800107c:	f36f 0300 	bfc	r3, #0, #1
 8001080:	f887 3b44 	strb.w	r3, [r7, #2884]	@ 0xb44
		}

		if ((ptimerFlag.timer) & (1 << LCD_TIMER)){
 8001084:	4b28      	ldr	r3, [pc, #160]	@ (8001128 <main+0x4c8>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	b2db      	uxtb	r3, r3
 800108a:	f003 0310 	and.w	r3, r3, #16
 800108e:	2b00      	cmp	r3, #0
 8001090:	f43f ae62 	beq.w	8000d58 <main+0xf8>
			ptimerFlag.timer &= ~(1 << LCD_TIMER);
 8001094:	4b24      	ldr	r3, [pc, #144]	@ (8001128 <main+0x4c8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	b2db      	uxtb	r3, r3
 800109a:	f023 0310 	bic.w	r3, r3, #16
 800109e:	b2d9      	uxtb	r1, r3
 80010a0:	4a21      	ldr	r2, [pc, #132]	@ (8001128 <main+0x4c8>)
 80010a2:	7813      	ldrb	r3, [r2, #0]
 80010a4:	f361 0307 	bfi	r3, r1, #0, #8
 80010a8:	7013      	strb	r3, [r2, #0]
			KillPTimer (LCD_TIMER);
 80010aa:	2004      	movs	r0, #4
 80010ac:	f7ff fb16 	bl	80006dc <KillPTimer>
			lcd1602_Clear(&lcd1602_Handle);
 80010b0:	481e      	ldr	r0, [pc, #120]	@ (800112c <main+0x4cc>)
 80010b2:	f7ff fc40 	bl	8000936 <lcd1602_Clear>
			switch (mode)
 80010b6:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d022      	beq.n	8001104 <main+0x4a4>
 80010be:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	dc27      	bgt.n	8001116 <main+0x4b6>
 80010c6:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d004      	beq.n	80010d8 <main+0x478>
 80010ce:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d00d      	beq.n	80010f2 <main+0x492>
				lcd1602_Print(&lcd1602_Handle, "Min");
				SendTemperature(minTemp);
				break;
			}
			default:
				break;
 80010d6:	e01e      	b.n	8001116 <main+0x4b6>
				currentTemp = temperature;
 80010d8:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	@ 0xb60
 80010dc:	f8c7 3b4c 	str.w	r3, [r7, #2892]	@ 0xb4c
				lcd1602_Print(&lcd1602_Handle, "Current");
 80010e0:	4913      	ldr	r1, [pc, #76]	@ (8001130 <main+0x4d0>)
 80010e2:	4812      	ldr	r0, [pc, #72]	@ (800112c <main+0x4cc>)
 80010e4:	f7ff fbd7 	bl	8000896 <lcd1602_Print>
				SendTemperature(currentTemp);
 80010e8:	f8d7 0b4c 	ldr.w	r0, [r7, #2892]	@ 0xb4c
 80010ec:	f000 f9be 	bl	800146c <SendTemperature>
				break;
 80010f0:	e012      	b.n	8001118 <main+0x4b8>
				lcd1602_Print(&lcd1602_Handle, "Max");
 80010f2:	4910      	ldr	r1, [pc, #64]	@ (8001134 <main+0x4d4>)
 80010f4:	480d      	ldr	r0, [pc, #52]	@ (800112c <main+0x4cc>)
 80010f6:	f7ff fbce 	bl	8000896 <lcd1602_Print>
				SendTemperature(maxTemp);
 80010fa:	f8d7 0b5c 	ldr.w	r0, [r7, #2908]	@ 0xb5c
 80010fe:	f000 f9b5 	bl	800146c <SendTemperature>
				break;
 8001102:	e009      	b.n	8001118 <main+0x4b8>
				lcd1602_Print(&lcd1602_Handle, "Min");
 8001104:	490c      	ldr	r1, [pc, #48]	@ (8001138 <main+0x4d8>)
 8001106:	4809      	ldr	r0, [pc, #36]	@ (800112c <main+0x4cc>)
 8001108:	f7ff fbc5 	bl	8000896 <lcd1602_Print>
				SendTemperature(minTemp);
 800110c:	f8d7 0b58 	ldr.w	r0, [r7, #2904]	@ 0xb58
 8001110:	f000 f9ac 	bl	800146c <SendTemperature>
				break;
 8001114:	e000      	b.n	8001118 <main+0x4b8>
				break;
 8001116:	bf00      	nop
			}
			SetPTimer(LCD_TIMER, LCD_TIMEOUT);
 8001118:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800111c:	2004      	movs	r0, #4
 800111e:	f7ff fa1f 	bl	8000560 <SetPTimer>
		if ((ptimerFlag.timer) & (1 << TEMP_TIMER)){
 8001122:	e619      	b.n	8000d58 <main+0xf8>
 8001124:	55555556 	.word	0x55555556
 8001128:	200000b8 	.word	0x200000b8
 800112c:	200001ec 	.word	0x200001ec
 8001130:	08004f64 	.word	0x08004f64
 8001134:	08004f6c 	.word	0x08004f6c
 8001138:	08004f70 	.word	0x08004f70

0800113c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b096      	sub	sp, #88	@ 0x58
 8001140:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	2244      	movs	r2, #68	@ 0x44
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f003 fa7e 	bl	800464c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001150:	463b      	mov	r3, r7
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
 800115c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800115e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001162:	f001 fd1d 	bl	8002ba0 <HAL_PWREx_ControlVoltageScaling>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SystemClock_Config+0x34>
	{
		Error_Handler();
 800116c:	f000 f9b4 	bl	80014d8 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001170:	f001 fcf8 	bl	8002b64 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001174:	4b1b      	ldr	r3, [pc, #108]	@ (80011e4 <SystemClock_Config+0xa8>)
 8001176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800117a:	4a1a      	ldr	r2, [pc, #104]	@ (80011e4 <SystemClock_Config+0xa8>)
 800117c:	f023 0318 	bic.w	r3, r3, #24
 8001180:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001184:	2314      	movs	r3, #20
 8001186:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001188:	2301      	movs	r3, #1
 800118a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800118c:	2301      	movs	r3, #1
 800118e:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001194:	23a0      	movs	r3, #160	@ 0xa0
 8001196:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001198:	2300      	movs	r3, #0
 800119a:	643b      	str	r3, [r7, #64]	@ 0x40
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4618      	mov	r0, r3
 80011a2:	f001 fd53 	bl	8002c4c <HAL_RCC_OscConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <SystemClock_Config+0x74>
	{
		Error_Handler();
 80011ac:	f000 f994 	bl	80014d8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b0:	230f      	movs	r3, #15
 80011b2:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80011b4:	2300      	movs	r3, #0
 80011b6:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011c4:	463b      	mov	r3, r7
 80011c6:	2101      	movs	r1, #1
 80011c8:	4618      	mov	r0, r3
 80011ca:	f002 f9a1 	bl	8003510 <HAL_RCC_ClockConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 80011d4:	f000 f980 	bl	80014d8 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 80011d8:	f002 fd44 	bl	8003c64 <HAL_RCCEx_EnableMSIPLLMode>
}
 80011dc:	bf00      	nop
 80011de:	3758      	adds	r7, #88	@ 0x58
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40021000 	.word	0x40021000

080011e8 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80011ec:	4b1b      	ldr	r3, [pc, #108]	@ (800125c <MX_I2C1_Init+0x74>)
 80011ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001260 <MX_I2C1_Init+0x78>)
 80011f0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00B07CB4;
 80011f2:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <MX_I2C1_Init+0x74>)
 80011f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001264 <MX_I2C1_Init+0x7c>)
 80011f6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80011f8:	4b18      	ldr	r3, [pc, #96]	@ (800125c <MX_I2C1_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011fe:	4b17      	ldr	r3, [pc, #92]	@ (800125c <MX_I2C1_Init+0x74>)
 8001200:	2201      	movs	r2, #1
 8001202:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001204:	4b15      	ldr	r3, [pc, #84]	@ (800125c <MX_I2C1_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800120a:	4b14      	ldr	r3, [pc, #80]	@ (800125c <MX_I2C1_Init+0x74>)
 800120c:	2200      	movs	r2, #0
 800120e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001210:	4b12      	ldr	r3, [pc, #72]	@ (800125c <MX_I2C1_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <MX_I2C1_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800121c:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <MX_I2C1_Init+0x74>)
 800121e:	2200      	movs	r2, #0
 8001220:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001222:	480e      	ldr	r0, [pc, #56]	@ (800125c <MX_I2C1_Init+0x74>)
 8001224:	f000 feb6 	bl	8001f94 <HAL_I2C_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 800122e:	f000 f953 	bl	80014d8 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001232:	2100      	movs	r1, #0
 8001234:	4809      	ldr	r0, [pc, #36]	@ (800125c <MX_I2C1_Init+0x74>)
 8001236:	f001 fbfd 	bl	8002a34 <HAL_I2CEx_ConfigAnalogFilter>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8001240:	f000 f94a 	bl	80014d8 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001244:	2100      	movs	r1, #0
 8001246:	4805      	ldr	r0, [pc, #20]	@ (800125c <MX_I2C1_Init+0x74>)
 8001248:	f001 fc3f 	bl	8002aca <HAL_I2CEx_ConfigDigitalFilter>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8001252:	f000 f941 	bl	80014d8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200000bc 	.word	0x200000bc
 8001260:	40005400 	.word	0x40005400
 8001264:	00b07cb4 	.word	0x00b07cb4

08001268 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 800126c:	4b1b      	ldr	r3, [pc, #108]	@ (80012dc <MX_I2C3_Init+0x74>)
 800126e:	4a1c      	ldr	r2, [pc, #112]	@ (80012e0 <MX_I2C3_Init+0x78>)
 8001270:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00B07CB4;
 8001272:	4b1a      	ldr	r3, [pc, #104]	@ (80012dc <MX_I2C3_Init+0x74>)
 8001274:	4a1b      	ldr	r2, [pc, #108]	@ (80012e4 <MX_I2C3_Init+0x7c>)
 8001276:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 8001278:	4b18      	ldr	r3, [pc, #96]	@ (80012dc <MX_I2C3_Init+0x74>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800127e:	4b17      	ldr	r3, [pc, #92]	@ (80012dc <MX_I2C3_Init+0x74>)
 8001280:	2201      	movs	r2, #1
 8001282:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001284:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <MX_I2C3_Init+0x74>)
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 800128a:	4b14      	ldr	r3, [pc, #80]	@ (80012dc <MX_I2C3_Init+0x74>)
 800128c:	2200      	movs	r2, #0
 800128e:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001290:	4b12      	ldr	r3, [pc, #72]	@ (80012dc <MX_I2C3_Init+0x74>)
 8001292:	2200      	movs	r2, #0
 8001294:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001296:	4b11      	ldr	r3, [pc, #68]	@ (80012dc <MX_I2C3_Init+0x74>)
 8001298:	2200      	movs	r2, #0
 800129a:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800129c:	4b0f      	ldr	r3, [pc, #60]	@ (80012dc <MX_I2C3_Init+0x74>)
 800129e:	2200      	movs	r2, #0
 80012a0:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80012a2:	480e      	ldr	r0, [pc, #56]	@ (80012dc <MX_I2C3_Init+0x74>)
 80012a4:	f000 fe76 	bl	8001f94 <HAL_I2C_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_I2C3_Init+0x4a>
	{
		Error_Handler();
 80012ae:	f000 f913 	bl	80014d8 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012b2:	2100      	movs	r1, #0
 80012b4:	4809      	ldr	r0, [pc, #36]	@ (80012dc <MX_I2C3_Init+0x74>)
 80012b6:	f001 fbbd 	bl	8002a34 <HAL_I2CEx_ConfigAnalogFilter>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_I2C3_Init+0x5c>
	{
		Error_Handler();
 80012c0:	f000 f90a 	bl	80014d8 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80012c4:	2100      	movs	r1, #0
 80012c6:	4805      	ldr	r0, [pc, #20]	@ (80012dc <MX_I2C3_Init+0x74>)
 80012c8:	f001 fbff 	bl	8002aca <HAL_I2CEx_ConfigDigitalFilter>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_I2C3_Init+0x6e>
	{
		Error_Handler();
 80012d2:	f000 f901 	bl	80014d8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000110 	.word	0x20000110
 80012e0:	40005c00 	.word	0x40005c00
 80012e4:	00b07cb4 	.word	0x00b07cb4

080012e8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80012ec:	4b14      	ldr	r3, [pc, #80]	@ (8001340 <MX_USART2_UART_Init+0x58>)
 80012ee:	4a15      	ldr	r2, [pc, #84]	@ (8001344 <MX_USART2_UART_Init+0x5c>)
 80012f0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80012f2:	4b13      	ldr	r3, [pc, #76]	@ (8001340 <MX_USART2_UART_Init+0x58>)
 80012f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012f8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012fa:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <MX_USART2_UART_Init+0x58>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001300:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <MX_USART2_UART_Init+0x58>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001306:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <MX_USART2_UART_Init+0x58>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800130c:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <MX_USART2_UART_Init+0x58>)
 800130e:	220c      	movs	r2, #12
 8001310:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001312:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <MX_USART2_UART_Init+0x58>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001318:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <MX_USART2_UART_Init+0x58>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800131e:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <MX_USART2_UART_Init+0x58>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <MX_USART2_UART_Init+0x58>)
 8001326:	2200      	movs	r2, #0
 8001328:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800132a:	4805      	ldr	r0, [pc, #20]	@ (8001340 <MX_USART2_UART_Init+0x58>)
 800132c:	f002 fcaa 	bl	8003c84 <HAL_UART_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8001336:	f000 f8cf 	bl	80014d8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000164 	.word	0x20000164
 8001344:	40004400 	.word	0x40004400

08001348 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800135e:	4b28      	ldr	r3, [pc, #160]	@ (8001400 <MX_GPIO_Init+0xb8>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001362:	4a27      	ldr	r2, [pc, #156]	@ (8001400 <MX_GPIO_Init+0xb8>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800136a:	4b25      	ldr	r3, [pc, #148]	@ (8001400 <MX_GPIO_Init+0xb8>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	4b22      	ldr	r3, [pc, #136]	@ (8001400 <MX_GPIO_Init+0xb8>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137a:	4a21      	ldr	r2, [pc, #132]	@ (8001400 <MX_GPIO_Init+0xb8>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001382:	4b1f      	ldr	r3, [pc, #124]	@ (8001400 <MX_GPIO_Init+0xb8>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	4b1c      	ldr	r3, [pc, #112]	@ (8001400 <MX_GPIO_Init+0xb8>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001392:	4a1b      	ldr	r2, [pc, #108]	@ (8001400 <MX_GPIO_Init+0xb8>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800139a:	4b19      	ldr	r3, [pc, #100]	@ (8001400 <MX_GPIO_Init+0xb8>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2108      	movs	r1, #8
 80013aa:	4816      	ldr	r0, [pc, #88]	@ (8001404 <MX_GPIO_Init+0xbc>)
 80013ac:	f000 fdc2 	bl	8001f34 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013b0:	2308      	movs	r3, #8
 80013b2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80013b4:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80013b8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ba:	2301      	movs	r3, #1
 80013bc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	4619      	mov	r1, r3
 80013c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013c8:	f000 fc2a 	bl	8001c20 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD3_Pin */
	GPIO_InitStruct.Pin = LD3_Pin;
 80013cc:	2308      	movs	r3, #8
 80013ce:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2300      	movs	r3, #0
 80013da:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	4619      	mov	r1, r3
 80013e2:	4808      	ldr	r0, [pc, #32]	@ (8001404 <MX_GPIO_Init+0xbc>)
 80013e4:	f000 fc1c 	bl	8001c20 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2100      	movs	r1, #0
 80013ec:	2009      	movs	r0, #9
 80013ee:	f000 fbda 	bl	8001ba6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80013f2:	2009      	movs	r0, #9
 80013f4:	f000 fbf3 	bl	8001bde <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80013f8:	bf00      	nop
 80013fa:	3720      	adds	r7, #32
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40021000 	.word	0x40021000
 8001404:	48000400 	.word	0x48000400

08001408 <DS1621_Init>:

/* USER CODE BEGIN 4 */
void DS1621_Init() {
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af02      	add	r7, sp, #8
	uint8_t cmd = 0xEE;
 800140e:	23ee      	movs	r3, #238	@ 0xee
 8001410:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Master_Transmit(&hi2c3, DS1621_ADDR, &cmd, 1, 10000);
 8001412:	1dfa      	adds	r2, r7, #7
 8001414:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	2301      	movs	r3, #1
 800141c:	2190      	movs	r1, #144	@ 0x90
 800141e:	4803      	ldr	r0, [pc, #12]	@ (800142c <DS1621_Init+0x24>)
 8001420:	f000 fe54 	bl	80020cc <HAL_I2C_Master_Transmit>

	return;
 8001424:	bf00      	nop
}
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000110 	.word	0x20000110

08001430 <DS1621_ReadTemp>:
int DS1621_ReadTemp() {
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af02      	add	r7, sp, #8
	uint8_t cmd = 0xAA;
 8001436:	23aa      	movs	r3, #170	@ 0xaa
 8001438:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;

	HAL_I2C_Master_Transmit(&hi2c3, DS1621_ADDR, &cmd, 1, HAL_MAX_DELAY);
 800143a:	1dfa      	adds	r2, r7, #7
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	2301      	movs	r3, #1
 8001444:	2190      	movs	r1, #144	@ 0x90
 8001446:	4808      	ldr	r0, [pc, #32]	@ (8001468 <DS1621_ReadTemp+0x38>)
 8001448:	f000 fe40 	bl	80020cc <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c3, DS1621_ADDR, &temp, 1, HAL_MAX_DELAY);
 800144c:	1dba      	adds	r2, r7, #6
 800144e:	f04f 33ff 	mov.w	r3, #4294967295
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2301      	movs	r3, #1
 8001456:	2190      	movs	r1, #144	@ 0x90
 8001458:	4803      	ldr	r0, [pc, #12]	@ (8001468 <DS1621_ReadTemp+0x38>)
 800145a:	f000 ff4f 	bl	80022fc <HAL_I2C_Master_Receive>

	return temp;
 800145e:	79bb      	ldrb	r3, [r7, #6]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000110 	.word	0x20000110

0800146c <SendTemperature>:
void SendTemperature(int temp) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	char lcdBuffer[16];

	sprintf(lcdBuffer, "Temp: %d C", temp);
 8001474:	f107 0308 	add.w	r3, r7, #8
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	4909      	ldr	r1, [pc, #36]	@ (80014a0 <SendTemperature+0x34>)
 800147c:	4618      	mov	r0, r3
 800147e:	f003 f8c5 	bl	800460c <siprintf>
	lcd1602_SetCursor(&lcd1602_Handle, 0, 1);
 8001482:	2201      	movs	r2, #1
 8001484:	2100      	movs	r1, #0
 8001486:	4807      	ldr	r0, [pc, #28]	@ (80014a4 <SendTemperature+0x38>)
 8001488:	f7ff fa2b 	bl	80008e2 <lcd1602_SetCursor>
	lcd1602_Print(&lcd1602_Handle, lcdBuffer);
 800148c:	f107 0308 	add.w	r3, r7, #8
 8001490:	4619      	mov	r1, r3
 8001492:	4804      	ldr	r0, [pc, #16]	@ (80014a4 <SendTemperature+0x38>)
 8001494:	f7ff f9ff 	bl	8000896 <lcd1602_Print>
}
 8001498:	bf00      	nop
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	08004f74 	.word	0x08004f74
 80014a4:	200001ec 	.word	0x200001ec

080014a8 <HAL_SYSTICK_Callback>:
inline void HAL_SYSTICK_Callback(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  PTimer();
 80014ac:	f7ff f8aa 	bl	8000604 <PTimer>
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <HAL_GPIO_EXTI_Callback>:

inline void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	80fb      	strh	r3, [r7, #6]
 /* Prevent unused argument(s) compilation warning */
 UNUSED(GPIO_Pin);
 /* Set button pressed flag and disable EXTI0 IRQ */
 gflag.button_action = 1; // Встановлюємо прапорець для обробки в основному циклі
 80014be:	4a05      	ldr	r2, [pc, #20]	@ (80014d4 <HAL_GPIO_EXTI_Callback+0x20>)
 80014c0:	7813      	ldrb	r3, [r2, #0]
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	7013      	strb	r3, [r2, #0]

}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	200001fc 	.word	0x200001fc

080014d8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80014dc:	b672      	cpsid	i
}
 80014de:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <Error_Handler+0x8>

080014e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001528 <HAL_MspInit+0x44>)
 80014ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001528 <HAL_MspInit+0x44>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80014f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <HAL_MspInit+0x44>)
 80014f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <HAL_MspInit+0x44>)
 8001504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001506:	4a08      	ldr	r2, [pc, #32]	@ (8001528 <HAL_MspInit+0x44>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800150c:	6593      	str	r3, [r2, #88]	@ 0x58
 800150e:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <HAL_MspInit+0x44>)
 8001510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000

0800152c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b09a      	sub	sp, #104	@ 0x68
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001544:	f107 0320 	add.w	r3, r7, #32
 8001548:	2234      	movs	r2, #52	@ 0x34
 800154a:	2100      	movs	r1, #0
 800154c:	4618      	mov	r0, r3
 800154e:	f003 f87d 	bl	800464c <memset>
  if(hi2c->Instance==I2C1)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a4c      	ldr	r2, [pc, #304]	@ (8001688 <HAL_I2C_MspInit+0x15c>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d138      	bne.n	80015ce <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800155c:	2340      	movs	r3, #64	@ 0x40
 800155e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001560:	2300      	movs	r3, #0
 8001562:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001564:	f107 0320 	add.w	r3, r7, #32
 8001568:	4618      	mov	r0, r3
 800156a:	f002 f9f5 	bl	8003958 <HAL_RCCEx_PeriphCLKConfig>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001574:	f7ff ffb0 	bl	80014d8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001578:	4b44      	ldr	r3, [pc, #272]	@ (800168c <HAL_I2C_MspInit+0x160>)
 800157a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157c:	4a43      	ldr	r2, [pc, #268]	@ (800168c <HAL_I2C_MspInit+0x160>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001584:	4b41      	ldr	r3, [pc, #260]	@ (800168c <HAL_I2C_MspInit+0x160>)
 8001586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	61fb      	str	r3, [r7, #28]
 800158e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001590:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001594:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001596:	2312      	movs	r3, #18
 8001598:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159e:	2303      	movs	r3, #3
 80015a0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015a2:	2304      	movs	r3, #4
 80015a4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015aa:	4619      	mov	r1, r3
 80015ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b0:	f000 fb36 	bl	8001c20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015b4:	4b35      	ldr	r3, [pc, #212]	@ (800168c <HAL_I2C_MspInit+0x160>)
 80015b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b8:	4a34      	ldr	r2, [pc, #208]	@ (800168c <HAL_I2C_MspInit+0x160>)
 80015ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015be:	6593      	str	r3, [r2, #88]	@ 0x58
 80015c0:	4b32      	ldr	r3, [pc, #200]	@ (800168c <HAL_I2C_MspInit+0x160>)
 80015c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015c8:	61bb      	str	r3, [r7, #24]
 80015ca:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80015cc:	e058      	b.n	8001680 <HAL_I2C_MspInit+0x154>
  else if(hi2c->Instance==I2C3)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a2f      	ldr	r2, [pc, #188]	@ (8001690 <HAL_I2C_MspInit+0x164>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d153      	bne.n	8001680 <HAL_I2C_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80015d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015dc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80015de:	2300      	movs	r3, #0
 80015e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015e2:	f107 0320 	add.w	r3, r7, #32
 80015e6:	4618      	mov	r0, r3
 80015e8:	f002 f9b6 	bl	8003958 <HAL_RCCEx_PeriphCLKConfig>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_I2C_MspInit+0xca>
      Error_Handler();
 80015f2:	f7ff ff71 	bl	80014d8 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f6:	4b25      	ldr	r3, [pc, #148]	@ (800168c <HAL_I2C_MspInit+0x160>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fa:	4a24      	ldr	r2, [pc, #144]	@ (800168c <HAL_I2C_MspInit+0x160>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001602:	4b22      	ldr	r3, [pc, #136]	@ (800168c <HAL_I2C_MspInit+0x160>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160e:	4b1f      	ldr	r3, [pc, #124]	@ (800168c <HAL_I2C_MspInit+0x160>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001612:	4a1e      	ldr	r2, [pc, #120]	@ (800168c <HAL_I2C_MspInit+0x160>)
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800161a:	4b1c      	ldr	r3, [pc, #112]	@ (800168c <HAL_I2C_MspInit+0x160>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001626:	2380      	movs	r3, #128	@ 0x80
 8001628:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800162a:	2312      	movs	r3, #18
 800162c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001632:	2303      	movs	r3, #3
 8001634:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001636:	2304      	movs	r3, #4
 8001638:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800163e:	4619      	mov	r1, r3
 8001640:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001644:	f000 faec 	bl	8001c20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001648:	2310      	movs	r3, #16
 800164a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800164c:	2312      	movs	r3, #18
 800164e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001654:	2303      	movs	r3, #3
 8001656:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001658:	2304      	movs	r3, #4
 800165a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001660:	4619      	mov	r1, r3
 8001662:	480c      	ldr	r0, [pc, #48]	@ (8001694 <HAL_I2C_MspInit+0x168>)
 8001664:	f000 fadc 	bl	8001c20 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001668:	4b08      	ldr	r3, [pc, #32]	@ (800168c <HAL_I2C_MspInit+0x160>)
 800166a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800166c:	4a07      	ldr	r2, [pc, #28]	@ (800168c <HAL_I2C_MspInit+0x160>)
 800166e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001672:	6593      	str	r3, [r2, #88]	@ 0x58
 8001674:	4b05      	ldr	r3, [pc, #20]	@ (800168c <HAL_I2C_MspInit+0x160>)
 8001676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001678:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	68fb      	ldr	r3, [r7, #12]
}
 8001680:	bf00      	nop
 8001682:	3768      	adds	r7, #104	@ 0x68
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40005400 	.word	0x40005400
 800168c:	40021000 	.word	0x40021000
 8001690:	40005c00 	.word	0x40005c00
 8001694:	48000400 	.word	0x48000400

08001698 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b096      	sub	sp, #88	@ 0x58
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	2234      	movs	r2, #52	@ 0x34
 80016b6:	2100      	movs	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f002 ffc7 	bl	800464c <memset>
  if(huart->Instance==USART2)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a28      	ldr	r2, [pc, #160]	@ (8001764 <HAL_UART_MspInit+0xcc>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d148      	bne.n	800175a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016c8:	2302      	movs	r3, #2
 80016ca:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d0:	f107 0310 	add.w	r3, r7, #16
 80016d4:	4618      	mov	r0, r3
 80016d6:	f002 f93f 	bl	8003958 <HAL_RCCEx_PeriphCLKConfig>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016e0:	f7ff fefa 	bl	80014d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016e4:	4b20      	ldr	r3, [pc, #128]	@ (8001768 <HAL_UART_MspInit+0xd0>)
 80016e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e8:	4a1f      	ldr	r2, [pc, #124]	@ (8001768 <HAL_UART_MspInit+0xd0>)
 80016ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80016f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001768 <HAL_UART_MspInit+0xd0>)
 80016f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001768 <HAL_UART_MspInit+0xd0>)
 80016fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001700:	4a19      	ldr	r2, [pc, #100]	@ (8001768 <HAL_UART_MspInit+0xd0>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001708:	4b17      	ldr	r3, [pc, #92]	@ (8001768 <HAL_UART_MspInit+0xd0>)
 800170a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001714:	2304      	movs	r3, #4
 8001716:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001718:	2302      	movs	r3, #2
 800171a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001720:	2303      	movs	r3, #3
 8001722:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001724:	2307      	movs	r3, #7
 8001726:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001728:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800172c:	4619      	mov	r1, r3
 800172e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001732:	f000 fa75 	bl	8001c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001736:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800173a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173c:	2302      	movs	r3, #2
 800173e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001744:	2303      	movs	r3, #3
 8001746:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001748:	2303      	movs	r3, #3
 800174a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800174c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001750:	4619      	mov	r1, r3
 8001752:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001756:	f000 fa63 	bl	8001c20 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800175a:	bf00      	nop
 800175c:	3758      	adds	r7, #88	@ 0x58
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40004400 	.word	0x40004400
 8001768:	40021000 	.word	0x40021000

0800176c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <NMI_Handler+0x4>

08001774 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <HardFault_Handler+0x4>

0800177c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <MemManage_Handler+0x4>

08001784 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001788:	bf00      	nop
 800178a:	e7fd      	b.n	8001788 <BusFault_Handler+0x4>

0800178c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <UsageFault_Handler+0x4>

08001794 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_SYSTICK_IRQHandler();
 80017c2:	f000 fa26 	bl	8001c12 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c6:	f000 f8cf 	bl	8001968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}

080017ce <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80017d2:	2008      	movs	r0, #8
 80017d4:	f000 fbc6 	bl	8001f64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}

080017dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e4:	4a14      	ldr	r2, [pc, #80]	@ (8001838 <_sbrk+0x5c>)
 80017e6:	4b15      	ldr	r3, [pc, #84]	@ (800183c <_sbrk+0x60>)
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f0:	4b13      	ldr	r3, [pc, #76]	@ (8001840 <_sbrk+0x64>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d102      	bne.n	80017fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f8:	4b11      	ldr	r3, [pc, #68]	@ (8001840 <_sbrk+0x64>)
 80017fa:	4a12      	ldr	r2, [pc, #72]	@ (8001844 <_sbrk+0x68>)
 80017fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017fe:	4b10      	ldr	r3, [pc, #64]	@ (8001840 <_sbrk+0x64>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	429a      	cmp	r2, r3
 800180a:	d207      	bcs.n	800181c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800180c:	f002 ff26 	bl	800465c <__errno>
 8001810:	4603      	mov	r3, r0
 8001812:	220c      	movs	r2, #12
 8001814:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
 800181a:	e009      	b.n	8001830 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800181c:	4b08      	ldr	r3, [pc, #32]	@ (8001840 <_sbrk+0x64>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001822:	4b07      	ldr	r3, [pc, #28]	@ (8001840 <_sbrk+0x64>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	4a05      	ldr	r2, [pc, #20]	@ (8001840 <_sbrk+0x64>)
 800182c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800182e:	68fb      	ldr	r3, [r7, #12]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20008000 	.word	0x20008000
 800183c:	00000400 	.word	0x00000400
 8001840:	20000200 	.word	0x20000200
 8001844:	20000350 	.word	0x20000350

08001848 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800184c:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <SystemInit+0x20>)
 800184e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001852:	4a05      	ldr	r2, [pc, #20]	@ (8001868 <SystemInit+0x20>)
 8001854:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001858:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800186c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001870:	f7ff ffea 	bl	8001848 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001874:	480c      	ldr	r0, [pc, #48]	@ (80018a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001876:	490d      	ldr	r1, [pc, #52]	@ (80018ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001878:	4a0d      	ldr	r2, [pc, #52]	@ (80018b0 <LoopForever+0xe>)
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800187c:	e002      	b.n	8001884 <LoopCopyDataInit>

0800187e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001882:	3304      	adds	r3, #4

08001884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001888:	d3f9      	bcc.n	800187e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188a:	4a0a      	ldr	r2, [pc, #40]	@ (80018b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800188c:	4c0a      	ldr	r4, [pc, #40]	@ (80018b8 <LoopForever+0x16>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001890:	e001      	b.n	8001896 <LoopFillZerobss>

08001892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001894:	3204      	adds	r2, #4

08001896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001898:	d3fb      	bcc.n	8001892 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800189a:	f002 fee5 	bl	8004668 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800189e:	f7ff f9df 	bl	8000c60 <main>

080018a2 <LoopForever>:

LoopForever:
    b LoopForever
 80018a2:	e7fe      	b.n	80018a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018a4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80018a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018ac:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80018b0:	0800500c 	.word	0x0800500c
  ldr r2, =_sbss
 80018b4:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80018b8:	20000350 	.word	0x20000350

080018bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018bc:	e7fe      	b.n	80018bc <ADC1_2_IRQHandler>

080018be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c8:	2003      	movs	r0, #3
 80018ca:	f000 f961 	bl	8001b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018ce:	2000      	movs	r0, #0
 80018d0:	f000 f80e 	bl	80018f0 <HAL_InitTick>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d002      	beq.n	80018e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	71fb      	strb	r3, [r7, #7]
 80018de:	e001      	b.n	80018e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018e0:	f7ff fe00 	bl	80014e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018e4:	79fb      	ldrb	r3, [r7, #7]
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018f8:	2300      	movs	r3, #0
 80018fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018fc:	4b17      	ldr	r3, [pc, #92]	@ (800195c <HAL_InitTick+0x6c>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d023      	beq.n	800194c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001904:	4b16      	ldr	r3, [pc, #88]	@ (8001960 <HAL_InitTick+0x70>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b14      	ldr	r3, [pc, #80]	@ (800195c <HAL_InitTick+0x6c>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	4619      	mov	r1, r3
 800190e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001912:	fbb3 f3f1 	udiv	r3, r3, r1
 8001916:	fbb2 f3f3 	udiv	r3, r2, r3
 800191a:	4618      	mov	r0, r3
 800191c:	f000 f96d 	bl	8001bfa <HAL_SYSTICK_Config>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10f      	bne.n	8001946 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b0f      	cmp	r3, #15
 800192a:	d809      	bhi.n	8001940 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800192c:	2200      	movs	r2, #0
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	f04f 30ff 	mov.w	r0, #4294967295
 8001934:	f000 f937 	bl	8001ba6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001938:	4a0a      	ldr	r2, [pc, #40]	@ (8001964 <HAL_InitTick+0x74>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	e007      	b.n	8001950 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	73fb      	strb	r3, [r7, #15]
 8001944:	e004      	b.n	8001950 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	73fb      	strb	r3, [r7, #15]
 800194a:	e001      	b.n	8001950 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001950:	7bfb      	ldrb	r3, [r7, #15]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000048 	.word	0x20000048
 8001960:	20000040 	.word	0x20000040
 8001964:	20000044 	.word	0x20000044

08001968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800196c:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <HAL_IncTick+0x20>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	4b06      	ldr	r3, [pc, #24]	@ (800198c <HAL_IncTick+0x24>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4413      	add	r3, r2
 8001978:	4a04      	ldr	r2, [pc, #16]	@ (800198c <HAL_IncTick+0x24>)
 800197a:	6013      	str	r3, [r2, #0]
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000048 	.word	0x20000048
 800198c:	20000204 	.word	0x20000204

08001990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return uwTick;
 8001994:	4b03      	ldr	r3, [pc, #12]	@ (80019a4 <HAL_GetTick+0x14>)
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000204 	.word	0x20000204

080019a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b0:	f7ff ffee 	bl	8001990 <HAL_GetTick>
 80019b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c0:	d005      	beq.n	80019ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80019c2:	4b0a      	ldr	r3, [pc, #40]	@ (80019ec <HAL_Delay+0x44>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4413      	add	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ce:	bf00      	nop
 80019d0:	f7ff ffde 	bl	8001990 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d8f7      	bhi.n	80019d0 <HAL_Delay+0x28>
  {
  }
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000048 	.word	0x20000048

080019f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a00:	4b0c      	ldr	r3, [pc, #48]	@ (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a22:	4a04      	ldr	r2, [pc, #16]	@ (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	60d3      	str	r3, [r2, #12]
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a3c:	4b04      	ldr	r3, [pc, #16]	@ (8001a50 <__NVIC_GetPriorityGrouping+0x18>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	0a1b      	lsrs	r3, r3, #8
 8001a42:	f003 0307 	and.w	r3, r3, #7
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	db0b      	blt.n	8001a7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	f003 021f 	and.w	r2, r3, #31
 8001a6c:	4907      	ldr	r1, [pc, #28]	@ (8001a8c <__NVIC_EnableIRQ+0x38>)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	095b      	lsrs	r3, r3, #5
 8001a74:	2001      	movs	r0, #1
 8001a76:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000e100 	.word	0xe000e100

08001a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	6039      	str	r1, [r7, #0]
 8001a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	db0a      	blt.n	8001aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	490c      	ldr	r1, [pc, #48]	@ (8001adc <__NVIC_SetPriority+0x4c>)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	0112      	lsls	r2, r2, #4
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab8:	e00a      	b.n	8001ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	4908      	ldr	r1, [pc, #32]	@ (8001ae0 <__NVIC_SetPriority+0x50>)
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	3b04      	subs	r3, #4
 8001ac8:	0112      	lsls	r2, r2, #4
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	440b      	add	r3, r1
 8001ace:	761a      	strb	r2, [r3, #24]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000e100 	.word	0xe000e100
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b089      	sub	sp, #36	@ 0x24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f1c3 0307 	rsb	r3, r3, #7
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	bf28      	it	cs
 8001b02:	2304      	movcs	r3, #4
 8001b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	2b06      	cmp	r3, #6
 8001b0c:	d902      	bls.n	8001b14 <NVIC_EncodePriority+0x30>
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3b03      	subs	r3, #3
 8001b12:	e000      	b.n	8001b16 <NVIC_EncodePriority+0x32>
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	f04f 32ff 	mov.w	r2, #4294967295
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43da      	mvns	r2, r3
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	401a      	ands	r2, r3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fa01 f303 	lsl.w	r3, r1, r3
 8001b36:	43d9      	mvns	r1, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	4313      	orrs	r3, r2
         );
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3724      	adds	r7, #36	@ 0x24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b5c:	d301      	bcc.n	8001b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e00f      	b.n	8001b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b62:	4a0a      	ldr	r2, [pc, #40]	@ (8001b8c <SysTick_Config+0x40>)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b6a:	210f      	movs	r1, #15
 8001b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b70:	f7ff ff8e 	bl	8001a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b74:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <SysTick_Config+0x40>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b7a:	4b04      	ldr	r3, [pc, #16]	@ (8001b8c <SysTick_Config+0x40>)
 8001b7c:	2207      	movs	r2, #7
 8001b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	e000e010 	.word	0xe000e010

08001b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff ff29 	bl	80019f0 <__NVIC_SetPriorityGrouping>
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b086      	sub	sp, #24
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	607a      	str	r2, [r7, #4]
 8001bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb8:	f7ff ff3e 	bl	8001a38 <__NVIC_GetPriorityGrouping>
 8001bbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	68b9      	ldr	r1, [r7, #8]
 8001bc2:	6978      	ldr	r0, [r7, #20]
 8001bc4:	f7ff ff8e 	bl	8001ae4 <NVIC_EncodePriority>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff5d 	bl	8001a90 <__NVIC_SetPriority>
}
 8001bd6:	bf00      	nop
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4603      	mov	r3, r0
 8001be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff31 	bl	8001a54 <__NVIC_EnableIRQ>
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff ffa2 	bl	8001b4c <SysTick_Config>
 8001c08:	4603      	mov	r3, r0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001c16:	f7ff fc47 	bl	80014a8 <HAL_SYSTICK_Callback>
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b087      	sub	sp, #28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c2e:	e14e      	b.n	8001ece <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	2101      	movs	r1, #1
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 8140 	beq.w	8001ec8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d005      	beq.n	8001c60 <HAL_GPIO_Init+0x40>
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d130      	bne.n	8001cc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4013      	ands	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c96:	2201      	movs	r2, #1
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	091b      	lsrs	r3, r3, #4
 8001cac:	f003 0201 	and.w	r2, r3, #1
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	2b03      	cmp	r3, #3
 8001ccc:	d017      	beq.n	8001cfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	2203      	movs	r2, #3
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d123      	bne.n	8001d52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	08da      	lsrs	r2, r3, #3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	3208      	adds	r2, #8
 8001d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	220f      	movs	r2, #15
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	691a      	ldr	r2, [r3, #16]
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	08da      	lsrs	r2, r3, #3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3208      	adds	r2, #8
 8001d4c:	6939      	ldr	r1, [r7, #16]
 8001d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f003 0203 	and.w	r2, r3, #3
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 809a 	beq.w	8001ec8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d94:	4b55      	ldr	r3, [pc, #340]	@ (8001eec <HAL_GPIO_Init+0x2cc>)
 8001d96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d98:	4a54      	ldr	r2, [pc, #336]	@ (8001eec <HAL_GPIO_Init+0x2cc>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001da0:	4b52      	ldr	r3, [pc, #328]	@ (8001eec <HAL_GPIO_Init+0x2cc>)
 8001da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001dac:	4a50      	ldr	r2, [pc, #320]	@ (8001ef0 <HAL_GPIO_Init+0x2d0>)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	089b      	lsrs	r3, r3, #2
 8001db2:	3302      	adds	r3, #2
 8001db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	f003 0303 	and.w	r3, r3, #3
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	220f      	movs	r2, #15
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001dd6:	d013      	beq.n	8001e00 <HAL_GPIO_Init+0x1e0>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a46      	ldr	r2, [pc, #280]	@ (8001ef4 <HAL_GPIO_Init+0x2d4>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d00d      	beq.n	8001dfc <HAL_GPIO_Init+0x1dc>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a45      	ldr	r2, [pc, #276]	@ (8001ef8 <HAL_GPIO_Init+0x2d8>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d007      	beq.n	8001df8 <HAL_GPIO_Init+0x1d8>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a44      	ldr	r2, [pc, #272]	@ (8001efc <HAL_GPIO_Init+0x2dc>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d101      	bne.n	8001df4 <HAL_GPIO_Init+0x1d4>
 8001df0:	2303      	movs	r3, #3
 8001df2:	e006      	b.n	8001e02 <HAL_GPIO_Init+0x1e2>
 8001df4:	2307      	movs	r3, #7
 8001df6:	e004      	b.n	8001e02 <HAL_GPIO_Init+0x1e2>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e002      	b.n	8001e02 <HAL_GPIO_Init+0x1e2>
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e000      	b.n	8001e02 <HAL_GPIO_Init+0x1e2>
 8001e00:	2300      	movs	r3, #0
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	f002 0203 	and.w	r2, r2, #3
 8001e08:	0092      	lsls	r2, r2, #2
 8001e0a:	4093      	lsls	r3, r2
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e12:	4937      	ldr	r1, [pc, #220]	@ (8001ef0 <HAL_GPIO_Init+0x2d0>)
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	089b      	lsrs	r3, r3, #2
 8001e18:	3302      	adds	r3, #2
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e20:	4b37      	ldr	r3, [pc, #220]	@ (8001f00 <HAL_GPIO_Init+0x2e0>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e44:	4a2e      	ldr	r2, [pc, #184]	@ (8001f00 <HAL_GPIO_Init+0x2e0>)
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e4a:	4b2d      	ldr	r3, [pc, #180]	@ (8001f00 <HAL_GPIO_Init+0x2e0>)
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	4013      	ands	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e6e:	4a24      	ldr	r2, [pc, #144]	@ (8001f00 <HAL_GPIO_Init+0x2e0>)
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e74:	4b22      	ldr	r3, [pc, #136]	@ (8001f00 <HAL_GPIO_Init+0x2e0>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e98:	4a19      	ldr	r2, [pc, #100]	@ (8001f00 <HAL_GPIO_Init+0x2e0>)
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e9e:	4b18      	ldr	r3, [pc, #96]	@ (8001f00 <HAL_GPIO_Init+0x2e0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ec2:	4a0f      	ldr	r2, [pc, #60]	@ (8001f00 <HAL_GPIO_Init+0x2e0>)
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f47f aea9 	bne.w	8001c30 <HAL_GPIO_Init+0x10>
  }
}
 8001ede:	bf00      	nop
 8001ee0:	bf00      	nop
 8001ee2:	371c      	adds	r7, #28
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40010000 	.word	0x40010000
 8001ef4:	48000400 	.word	0x48000400
 8001ef8:	48000800 	.word	0x48000800
 8001efc:	48000c00 	.word	0x48000c00
 8001f00:	40010400 	.word	0x40010400

08001f04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	887b      	ldrh	r3, [r7, #2]
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d002      	beq.n	8001f22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	73fb      	strb	r3, [r7, #15]
 8001f20:	e001      	b.n	8001f26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f22:	2300      	movs	r3, #0
 8001f24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	807b      	strh	r3, [r7, #2]
 8001f40:	4613      	mov	r3, r2
 8001f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f44:	787b      	ldrb	r3, [r7, #1]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f4a:	887a      	ldrh	r2, [r7, #2]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f50:	e002      	b.n	8001f58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f52:	887a      	ldrh	r2, [r7, #2]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f6e:	4b08      	ldr	r3, [pc, #32]	@ (8001f90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f70:	695a      	ldr	r2, [r3, #20]
 8001f72:	88fb      	ldrh	r3, [r7, #6]
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d006      	beq.n	8001f88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f7a:	4a05      	ldr	r2, [pc, #20]	@ (8001f90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f7c:	88fb      	ldrh	r3, [r7, #6]
 8001f7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f80:	88fb      	ldrh	r3, [r7, #6]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff fa96 	bl	80014b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40010400 	.word	0x40010400

08001f94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e08d      	b.n	80020c2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d106      	bne.n	8001fc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff fab6 	bl	800152c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2224      	movs	r2, #36	@ 0x24
 8001fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 0201 	bic.w	r2, r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fe4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ff4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d107      	bne.n	800200e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	e006      	b.n	800201c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800201a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	2b02      	cmp	r3, #2
 8002022:	d108      	bne.n	8002036 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002032:	605a      	str	r2, [r3, #4]
 8002034:	e007      	b.n	8002046 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002044:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002054:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002058:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002068:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691a      	ldr	r2, [r3, #16]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69d9      	ldr	r1, [r3, #28]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a1a      	ldr	r2, [r3, #32]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f042 0201 	orr.w	r2, r2, #1
 80020a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2220      	movs	r2, #32
 80020ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af02      	add	r7, sp, #8
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	607a      	str	r2, [r7, #4]
 80020d6:	461a      	mov	r2, r3
 80020d8:	460b      	mov	r3, r1
 80020da:	817b      	strh	r3, [r7, #10]
 80020dc:	4613      	mov	r3, r2
 80020de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b20      	cmp	r3, #32
 80020ea:	f040 80fd 	bne.w	80022e8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_I2C_Master_Transmit+0x30>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e0f6      	b.n	80022ea <HAL_I2C_Master_Transmit+0x21e>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002104:	f7ff fc44 	bl	8001990 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	2319      	movs	r3, #25
 8002110:	2201      	movs	r2, #1
 8002112:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 fa0a 	bl	8002530 <I2C_WaitOnFlagUntilTimeout>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e0e1      	b.n	80022ea <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2221      	movs	r2, #33	@ 0x21
 800212a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2210      	movs	r2, #16
 8002132:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	893a      	ldrh	r2, [r7, #8]
 8002146:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002152:	b29b      	uxth	r3, r3
 8002154:	2bff      	cmp	r3, #255	@ 0xff
 8002156:	d906      	bls.n	8002166 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	22ff      	movs	r2, #255	@ 0xff
 800215c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800215e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	e007      	b.n	8002176 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800216a:	b29a      	uxth	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002170:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002174:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800217a:	2b00      	cmp	r3, #0
 800217c:	d024      	beq.n	80021c8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002182:	781a      	ldrb	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002198:	b29b      	uxth	r3, r3
 800219a:	3b01      	subs	r3, #1
 800219c:	b29a      	uxth	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021a6:	3b01      	subs	r3, #1
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	3301      	adds	r3, #1
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	8979      	ldrh	r1, [r7, #10]
 80021ba:	4b4e      	ldr	r3, [pc, #312]	@ (80022f4 <HAL_I2C_Master_Transmit+0x228>)
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 fc05 	bl	80029d0 <I2C_TransferConfig>
 80021c6:	e066      	b.n	8002296 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	8979      	ldrh	r1, [r7, #10]
 80021d0:	4b48      	ldr	r3, [pc, #288]	@ (80022f4 <HAL_I2C_Master_Transmit+0x228>)
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 fbfa 	bl	80029d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80021dc:	e05b      	b.n	8002296 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	6a39      	ldr	r1, [r7, #32]
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 f9fd 	bl	80025e2 <I2C_WaitOnTXISFlagUntilTimeout>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e07b      	b.n	80022ea <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f6:	781a      	ldrb	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002202:	1c5a      	adds	r2, r3, #1
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800220c:	b29b      	uxth	r3, r3
 800220e:	3b01      	subs	r3, #1
 8002210:	b29a      	uxth	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800221a:	3b01      	subs	r3, #1
 800221c:	b29a      	uxth	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002226:	b29b      	uxth	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	d034      	beq.n	8002296 <HAL_I2C_Master_Transmit+0x1ca>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002230:	2b00      	cmp	r3, #0
 8002232:	d130      	bne.n	8002296 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	6a3b      	ldr	r3, [r7, #32]
 800223a:	2200      	movs	r2, #0
 800223c:	2180      	movs	r1, #128	@ 0x80
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 f976 	bl	8002530 <I2C_WaitOnFlagUntilTimeout>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e04d      	b.n	80022ea <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002252:	b29b      	uxth	r3, r3
 8002254:	2bff      	cmp	r3, #255	@ 0xff
 8002256:	d90e      	bls.n	8002276 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	22ff      	movs	r2, #255	@ 0xff
 800225c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002262:	b2da      	uxtb	r2, r3
 8002264:	8979      	ldrh	r1, [r7, #10]
 8002266:	2300      	movs	r3, #0
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 fbae 	bl	80029d0 <I2C_TransferConfig>
 8002274:	e00f      	b.n	8002296 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800227a:	b29a      	uxth	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002284:	b2da      	uxtb	r2, r3
 8002286:	8979      	ldrh	r1, [r7, #10]
 8002288:	2300      	movs	r3, #0
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f000 fb9d 	bl	80029d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800229a:	b29b      	uxth	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d19e      	bne.n	80021de <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	6a39      	ldr	r1, [r7, #32]
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 f9e3 	bl	8002670 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e01a      	b.n	80022ea <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2220      	movs	r2, #32
 80022ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6859      	ldr	r1, [r3, #4]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	4b0c      	ldr	r3, [pc, #48]	@ (80022f8 <HAL_I2C_Master_Transmit+0x22c>)
 80022c8:	400b      	ands	r3, r1
 80022ca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80022e4:	2300      	movs	r3, #0
 80022e6:	e000      	b.n	80022ea <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80022e8:	2302      	movs	r3, #2
  }
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	80002000 	.word	0x80002000
 80022f8:	fe00e800 	.word	0xfe00e800

080022fc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af02      	add	r7, sp, #8
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	607a      	str	r2, [r7, #4]
 8002306:	461a      	mov	r2, r3
 8002308:	460b      	mov	r3, r1
 800230a:	817b      	strh	r3, [r7, #10]
 800230c:	4613      	mov	r3, r2
 800230e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b20      	cmp	r3, #32
 800231a:	f040 80db 	bne.w	80024d4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_I2C_Master_Receive+0x30>
 8002328:	2302      	movs	r3, #2
 800232a:	e0d4      	b.n	80024d6 <HAL_I2C_Master_Receive+0x1da>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002334:	f7ff fb2c 	bl	8001990 <HAL_GetTick>
 8002338:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	2319      	movs	r3, #25
 8002340:	2201      	movs	r2, #1
 8002342:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 f8f2 	bl	8002530 <I2C_WaitOnFlagUntilTimeout>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e0bf      	b.n	80024d6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2222      	movs	r2, #34	@ 0x22
 800235a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2210      	movs	r2, #16
 8002362:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	893a      	ldrh	r2, [r7, #8]
 8002376:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002382:	b29b      	uxth	r3, r3
 8002384:	2bff      	cmp	r3, #255	@ 0xff
 8002386:	d90e      	bls.n	80023a6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2201      	movs	r2, #1
 800238c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002392:	b2da      	uxtb	r2, r3
 8002394:	8979      	ldrh	r1, [r7, #10]
 8002396:	4b52      	ldr	r3, [pc, #328]	@ (80024e0 <HAL_I2C_Master_Receive+0x1e4>)
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 fb16 	bl	80029d0 <I2C_TransferConfig>
 80023a4:	e06d      	b.n	8002482 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	8979      	ldrh	r1, [r7, #10]
 80023b8:	4b49      	ldr	r3, [pc, #292]	@ (80024e0 <HAL_I2C_Master_Receive+0x1e4>)
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 fb05 	bl	80029d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80023c6:	e05c      	b.n	8002482 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	6a39      	ldr	r1, [r7, #32]
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 f993 	bl	80026f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e07c      	b.n	80024d6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ee:	1c5a      	adds	r2, r3, #1
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002404:	b29b      	uxth	r3, r3
 8002406:	3b01      	subs	r3, #1
 8002408:	b29a      	uxth	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002412:	b29b      	uxth	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d034      	beq.n	8002482 <HAL_I2C_Master_Receive+0x186>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800241c:	2b00      	cmp	r3, #0
 800241e:	d130      	bne.n	8002482 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	2200      	movs	r2, #0
 8002428:	2180      	movs	r1, #128	@ 0x80
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 f880 	bl	8002530 <I2C_WaitOnFlagUntilTimeout>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e04d      	b.n	80024d6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800243e:	b29b      	uxth	r3, r3
 8002440:	2bff      	cmp	r3, #255	@ 0xff
 8002442:	d90e      	bls.n	8002462 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	22ff      	movs	r2, #255	@ 0xff
 8002448:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800244e:	b2da      	uxtb	r2, r3
 8002450:	8979      	ldrh	r1, [r7, #10]
 8002452:	2300      	movs	r3, #0
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 fab8 	bl	80029d0 <I2C_TransferConfig>
 8002460:	e00f      	b.n	8002482 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002466:	b29a      	uxth	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002470:	b2da      	uxtb	r2, r3
 8002472:	8979      	ldrh	r1, [r7, #10]
 8002474:	2300      	movs	r3, #0
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 faa7 	bl	80029d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002486:	b29b      	uxth	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	d19d      	bne.n	80023c8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	6a39      	ldr	r1, [r7, #32]
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 f8ed 	bl	8002670 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e01a      	b.n	80024d6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2220      	movs	r2, #32
 80024a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6859      	ldr	r1, [r3, #4]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	4b0c      	ldr	r3, [pc, #48]	@ (80024e4 <HAL_I2C_Master_Receive+0x1e8>)
 80024b4:	400b      	ands	r3, r1
 80024b6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2220      	movs	r2, #32
 80024bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80024d0:	2300      	movs	r3, #0
 80024d2:	e000      	b.n	80024d6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80024d4:	2302      	movs	r3, #2
  }
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	80002400 	.word	0x80002400
 80024e4:	fe00e800 	.word	0xfe00e800

080024e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d103      	bne.n	8002506 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2200      	movs	r2, #0
 8002504:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b01      	cmp	r3, #1
 8002512:	d007      	beq.n	8002524 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	699a      	ldr	r2, [r3, #24]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0201 	orr.w	r2, r2, #1
 8002522:	619a      	str	r2, [r3, #24]
  }
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	4613      	mov	r3, r2
 800253e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002540:	e03b      	b.n	80025ba <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	6839      	ldr	r1, [r7, #0]
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 f962 	bl	8002810 <I2C_IsErrorOccurred>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e041      	b.n	80025da <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800255c:	d02d      	beq.n	80025ba <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800255e:	f7ff fa17 	bl	8001990 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d302      	bcc.n	8002574 <I2C_WaitOnFlagUntilTimeout+0x44>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d122      	bne.n	80025ba <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	699a      	ldr	r2, [r3, #24]
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	4013      	ands	r3, r2
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	429a      	cmp	r2, r3
 8002582:	bf0c      	ite	eq
 8002584:	2301      	moveq	r3, #1
 8002586:	2300      	movne	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	429a      	cmp	r2, r3
 8002590:	d113      	bne.n	80025ba <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002596:	f043 0220 	orr.w	r2, r3, #32
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2220      	movs	r2, #32
 80025a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e00f      	b.n	80025da <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	699a      	ldr	r2, [r3, #24]
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	4013      	ands	r3, r2
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	bf0c      	ite	eq
 80025ca:	2301      	moveq	r3, #1
 80025cc:	2300      	movne	r3, #0
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	461a      	mov	r2, r3
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d0b4      	beq.n	8002542 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b084      	sub	sp, #16
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	60f8      	str	r0, [r7, #12]
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025ee:	e033      	b.n	8002658 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	68b9      	ldr	r1, [r7, #8]
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 f90b 	bl	8002810 <I2C_IsErrorOccurred>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e031      	b.n	8002668 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260a:	d025      	beq.n	8002658 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800260c:	f7ff f9c0 	bl	8001990 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	429a      	cmp	r2, r3
 800261a:	d302      	bcc.n	8002622 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d11a      	bne.n	8002658 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b02      	cmp	r3, #2
 800262e:	d013      	beq.n	8002658 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002634:	f043 0220 	orr.w	r2, r3, #32
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2220      	movs	r2, #32
 8002640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e007      	b.n	8002668 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b02      	cmp	r3, #2
 8002664:	d1c4      	bne.n	80025f0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800267c:	e02f      	b.n	80026de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	68b9      	ldr	r1, [r7, #8]
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 f8c4 	bl	8002810 <I2C_IsErrorOccurred>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e02d      	b.n	80026ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002692:	f7ff f97d 	bl	8001990 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d302      	bcc.n	80026a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d11a      	bne.n	80026de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	f003 0320 	and.w	r3, r3, #32
 80026b2:	2b20      	cmp	r3, #32
 80026b4:	d013      	beq.n	80026de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ba:	f043 0220 	orr.w	r2, r3, #32
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2220      	movs	r2, #32
 80026c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e007      	b.n	80026ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	f003 0320 	and.w	r3, r3, #32
 80026e8:	2b20      	cmp	r3, #32
 80026ea:	d1c8      	bne.n	800267e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002704:	2300      	movs	r3, #0
 8002706:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002708:	e071      	b.n	80027ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	68b9      	ldr	r1, [r7, #8]
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 f87e 	bl	8002810 <I2C_IsErrorOccurred>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	f003 0320 	and.w	r3, r3, #32
 8002728:	2b20      	cmp	r3, #32
 800272a:	d13b      	bne.n	80027a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800272c:	7dfb      	ldrb	r3, [r7, #23]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d138      	bne.n	80027a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b04      	cmp	r3, #4
 800273e:	d105      	bne.n	800274c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	2b10      	cmp	r3, #16
 8002758:	d121      	bne.n	800279e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2210      	movs	r2, #16
 8002760:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2204      	movs	r2, #4
 8002766:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2220      	movs	r2, #32
 800276e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6859      	ldr	r1, [r3, #4]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	4b24      	ldr	r3, [pc, #144]	@ (800280c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800277c:	400b      	ands	r3, r1
 800277e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2220      	movs	r2, #32
 8002784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	75fb      	strb	r3, [r7, #23]
 800279c:	e002      	b.n	80027a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80027a4:	f7ff f8f4 	bl	8001990 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d302      	bcc.n	80027ba <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d119      	bne.n	80027ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80027ba:	7dfb      	ldrb	r3, [r7, #23]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d116      	bne.n	80027ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d00f      	beq.n	80027ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d2:	f043 0220 	orr.w	r2, r3, #32
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2220      	movs	r2, #32
 80027de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d002      	beq.n	8002802 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80027fc:	7dfb      	ldrb	r3, [r7, #23]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d083      	beq.n	800270a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002802:	7dfb      	ldrb	r3, [r7, #23]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	fe00e800 	.word	0xfe00e800

08002810 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b08a      	sub	sp, #40	@ 0x28
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800281c:	2300      	movs	r3, #0
 800281e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800282a:	2300      	movs	r3, #0
 800282c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	2b00      	cmp	r3, #0
 800283a:	d068      	beq.n	800290e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2210      	movs	r2, #16
 8002842:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002844:	e049      	b.n	80028da <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284c:	d045      	beq.n	80028da <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800284e:	f7ff f89f 	bl	8001990 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	429a      	cmp	r2, r3
 800285c:	d302      	bcc.n	8002864 <I2C_IsErrorOccurred+0x54>
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d13a      	bne.n	80028da <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800286e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002876:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002882:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002886:	d121      	bne.n	80028cc <I2C_IsErrorOccurred+0xbc>
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800288e:	d01d      	beq.n	80028cc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002890:	7cfb      	ldrb	r3, [r7, #19]
 8002892:	2b20      	cmp	r3, #32
 8002894:	d01a      	beq.n	80028cc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80028a6:	f7ff f873 	bl	8001990 <HAL_GetTick>
 80028aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028ac:	e00e      	b.n	80028cc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80028ae:	f7ff f86f 	bl	8001990 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b19      	cmp	r3, #25
 80028ba:	d907      	bls.n	80028cc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	f043 0320 	orr.w	r3, r3, #32
 80028c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80028ca:	e006      	b.n	80028da <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	f003 0320 	and.w	r3, r3, #32
 80028d6:	2b20      	cmp	r3, #32
 80028d8:	d1e9      	bne.n	80028ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	f003 0320 	and.w	r3, r3, #32
 80028e4:	2b20      	cmp	r3, #32
 80028e6:	d003      	beq.n	80028f0 <I2C_IsErrorOccurred+0xe0>
 80028e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0aa      	beq.n	8002846 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80028f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d103      	bne.n	8002900 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2220      	movs	r2, #32
 80028fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	f043 0304 	orr.w	r3, r3, #4
 8002906:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00b      	beq.n	8002938 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002930:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00b      	beq.n	800295a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	f043 0308 	orr.w	r3, r3, #8
 8002948:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002952:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00b      	beq.n	800297c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	f043 0302 	orr.w	r3, r3, #2
 800296a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002974:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800297c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002980:	2b00      	cmp	r3, #0
 8002982:	d01c      	beq.n	80029be <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f7ff fdaf 	bl	80024e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6859      	ldr	r1, [r3, #4]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4b0d      	ldr	r3, [pc, #52]	@ (80029cc <I2C_IsErrorOccurred+0x1bc>)
 8002996:	400b      	ands	r3, r1
 8002998:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800299e:	6a3b      	ldr	r3, [r7, #32]
 80029a0:	431a      	orrs	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2220      	movs	r2, #32
 80029aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80029be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3728      	adds	r7, #40	@ 0x28
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	fe00e800 	.word	0xfe00e800

080029d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b087      	sub	sp, #28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	607b      	str	r3, [r7, #4]
 80029da:	460b      	mov	r3, r1
 80029dc:	817b      	strh	r3, [r7, #10]
 80029de:	4613      	mov	r3, r2
 80029e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029e2:	897b      	ldrh	r3, [r7, #10]
 80029e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029e8:	7a7b      	ldrb	r3, [r7, #9]
 80029ea:	041b      	lsls	r3, r3, #16
 80029ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029f0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029fe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	0d5b      	lsrs	r3, r3, #21
 8002a0a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002a0e:	4b08      	ldr	r3, [pc, #32]	@ (8002a30 <I2C_TransferConfig+0x60>)
 8002a10:	430b      	orrs	r3, r1
 8002a12:	43db      	mvns	r3, r3
 8002a14:	ea02 0103 	and.w	r1, r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a22:	bf00      	nop
 8002a24:	371c      	adds	r7, #28
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	03ff63ff 	.word	0x03ff63ff

08002a34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b20      	cmp	r3, #32
 8002a48:	d138      	bne.n	8002abc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a54:	2302      	movs	r3, #2
 8002a56:	e032      	b.n	8002abe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2224      	movs	r2, #36	@ 0x24
 8002a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0201 	bic.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6819      	ldr	r1, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0201 	orr.w	r2, r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	e000      	b.n	8002abe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002abc:	2302      	movs	r3, #2
  }
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b085      	sub	sp, #20
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b20      	cmp	r3, #32
 8002ade:	d139      	bne.n	8002b54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d101      	bne.n	8002aee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002aea:	2302      	movs	r3, #2
 8002aec:	e033      	b.n	8002b56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2224      	movs	r2, #36	@ 0x24
 8002afa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0201 	bic.w	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	021b      	lsls	r3, r3, #8
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0201 	orr.w	r2, r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2220      	movs	r2, #32
 8002b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	e000      	b.n	8002b56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b54:	2302      	movs	r3, #2
  }
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
	...

08002b64 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b68:	4b05      	ldr	r3, [pc, #20]	@ (8002b80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a04      	ldr	r2, [pc, #16]	@ (8002b80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b72:	6013      	str	r3, [r2, #0]
}
 8002b74:	bf00      	nop
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40007000 	.word	0x40007000

08002b84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b88:	4b04      	ldr	r3, [pc, #16]	@ (8002b9c <HAL_PWREx_GetVoltageRange+0x18>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40007000 	.word	0x40007000

08002ba0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bae:	d130      	bne.n	8002c12 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bb0:	4b23      	ldr	r3, [pc, #140]	@ (8002c40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002bb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bbc:	d038      	beq.n	8002c30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bbe:	4b20      	ldr	r3, [pc, #128]	@ (8002c40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002bc6:	4a1e      	ldr	r2, [pc, #120]	@ (8002c40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bc8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bcc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bce:	4b1d      	ldr	r3, [pc, #116]	@ (8002c44 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2232      	movs	r2, #50	@ 0x32
 8002bd4:	fb02 f303 	mul.w	r3, r2, r3
 8002bd8:	4a1b      	ldr	r2, [pc, #108]	@ (8002c48 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002bda:	fba2 2303 	umull	r2, r3, r2, r3
 8002bde:	0c9b      	lsrs	r3, r3, #18
 8002be0:	3301      	adds	r3, #1
 8002be2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002be4:	e002      	b.n	8002bec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	3b01      	subs	r3, #1
 8002bea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bec:	4b14      	ldr	r3, [pc, #80]	@ (8002c40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bf8:	d102      	bne.n	8002c00 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1f2      	bne.n	8002be6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c00:	4b0f      	ldr	r3, [pc, #60]	@ (8002c40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c0c:	d110      	bne.n	8002c30 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e00f      	b.n	8002c32 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c12:	4b0b      	ldr	r3, [pc, #44]	@ (8002c40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c1e:	d007      	beq.n	8002c30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c20:	4b07      	ldr	r3, [pc, #28]	@ (8002c40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c28:	4a05      	ldr	r2, [pc, #20]	@ (8002c40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c2e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	40007000 	.word	0x40007000
 8002c44:	20000040 	.word	0x20000040
 8002c48:	431bde83 	.word	0x431bde83

08002c4c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08a      	sub	sp, #40	@ 0x28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d102      	bne.n	8002c60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f000 bc4f 	b.w	80034fe <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c60:	4b97      	ldr	r3, [pc, #604]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 030c 	and.w	r3, r3, #12
 8002c68:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c6a:	4b95      	ldr	r3, [pc, #596]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 80e6 	beq.w	8002e4e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d007      	beq.n	8002c98 <HAL_RCC_OscConfig+0x4c>
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	2b0c      	cmp	r3, #12
 8002c8c:	f040 808d 	bne.w	8002daa <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	f040 8089 	bne.w	8002daa <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c98:	4b89      	ldr	r3, [pc, #548]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d006      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x66>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d102      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	f000 bc26 	b.w	80034fe <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cb6:	4b82      	ldr	r3, [pc, #520]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d004      	beq.n	8002ccc <HAL_RCC_OscConfig+0x80>
 8002cc2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cca:	e005      	b.n	8002cd8 <HAL_RCC_OscConfig+0x8c>
 8002ccc:	4b7c      	ldr	r3, [pc, #496]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cd2:	091b      	lsrs	r3, r3, #4
 8002cd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d224      	bcs.n	8002d26 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 fdd9 	bl	8003898 <RCC_SetFlashLatencyFromMSIRange>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	f000 bc06 	b.w	80034fe <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cf2:	4b73      	ldr	r3, [pc, #460]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a72      	ldr	r2, [pc, #456]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002cf8:	f043 0308 	orr.w	r3, r3, #8
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	4b70      	ldr	r3, [pc, #448]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0a:	496d      	ldr	r1, [pc, #436]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d10:	4b6b      	ldr	r3, [pc, #428]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	021b      	lsls	r3, r3, #8
 8002d1e:	4968      	ldr	r1, [pc, #416]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	604b      	str	r3, [r1, #4]
 8002d24:	e025      	b.n	8002d72 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d26:	4b66      	ldr	r3, [pc, #408]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a65      	ldr	r2, [pc, #404]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002d2c:	f043 0308 	orr.w	r3, r3, #8
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	4b63      	ldr	r3, [pc, #396]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3e:	4960      	ldr	r1, [pc, #384]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d44:	4b5e      	ldr	r3, [pc, #376]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	021b      	lsls	r3, r3, #8
 8002d52:	495b      	ldr	r1, [pc, #364]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d109      	bne.n	8002d72 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 fd98 	bl	8003898 <RCC_SetFlashLatencyFromMSIRange>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e3c5      	b.n	80034fe <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d72:	f000 fccd 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 8002d76:	4602      	mov	r2, r0
 8002d78:	4b51      	ldr	r3, [pc, #324]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	091b      	lsrs	r3, r3, #4
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	4950      	ldr	r1, [pc, #320]	@ (8002ec4 <HAL_RCC_OscConfig+0x278>)
 8002d84:	5ccb      	ldrb	r3, [r1, r3]
 8002d86:	f003 031f 	and.w	r3, r3, #31
 8002d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8e:	4a4e      	ldr	r2, [pc, #312]	@ (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002d90:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d92:	4b4e      	ldr	r3, [pc, #312]	@ (8002ecc <HAL_RCC_OscConfig+0x280>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fe fdaa 	bl	80018f0 <HAL_InitTick>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002da0:	7dfb      	ldrb	r3, [r7, #23]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d052      	beq.n	8002e4c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002da6:	7dfb      	ldrb	r3, [r7, #23]
 8002da8:	e3a9      	b.n	80034fe <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d032      	beq.n	8002e18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002db2:	4b43      	ldr	r3, [pc, #268]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a42      	ldr	r2, [pc, #264]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002db8:	f043 0301 	orr.w	r3, r3, #1
 8002dbc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dbe:	f7fe fde7 	bl	8001990 <HAL_GetTick>
 8002dc2:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dc6:	f7fe fde3 	bl	8001990 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e392      	b.n	80034fe <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dd8:	4b39      	ldr	r3, [pc, #228]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0f0      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002de4:	4b36      	ldr	r3, [pc, #216]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a35      	ldr	r2, [pc, #212]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002dea:	f043 0308 	orr.w	r3, r3, #8
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	4b33      	ldr	r3, [pc, #204]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfc:	4930      	ldr	r1, [pc, #192]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e02:	4b2f      	ldr	r3, [pc, #188]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	021b      	lsls	r3, r3, #8
 8002e10:	492b      	ldr	r1, [pc, #172]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	604b      	str	r3, [r1, #4]
 8002e16:	e01a      	b.n	8002e4e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e18:	4b29      	ldr	r3, [pc, #164]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a28      	ldr	r2, [pc, #160]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002e1e:	f023 0301 	bic.w	r3, r3, #1
 8002e22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e24:	f7fe fdb4 	bl	8001990 <HAL_GetTick>
 8002e28:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e2c:	f7fe fdb0 	bl	8001990 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e35f      	b.n	80034fe <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e3e:	4b20      	ldr	r3, [pc, #128]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x1e0>
 8002e4a:	e000      	b.n	8002e4e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d073      	beq.n	8002f42 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d005      	beq.n	8002e6c <HAL_RCC_OscConfig+0x220>
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	2b0c      	cmp	r3, #12
 8002e64:	d10e      	bne.n	8002e84 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	2b03      	cmp	r3, #3
 8002e6a:	d10b      	bne.n	8002e84 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e6c:	4b14      	ldr	r3, [pc, #80]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d063      	beq.n	8002f40 <HAL_RCC_OscConfig+0x2f4>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d15f      	bne.n	8002f40 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e33c      	b.n	80034fe <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e8c:	d106      	bne.n	8002e9c <HAL_RCC_OscConfig+0x250>
 8002e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a0b      	ldr	r2, [pc, #44]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002e94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	e025      	b.n	8002ee8 <HAL_RCC_OscConfig+0x29c>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ea4:	d114      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x284>
 8002ea6:	4b06      	ldr	r3, [pc, #24]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a05      	ldr	r2, [pc, #20]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002eac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	4b03      	ldr	r3, [pc, #12]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a02      	ldr	r2, [pc, #8]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002eb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	e013      	b.n	8002ee8 <HAL_RCC_OscConfig+0x29c>
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	08004f80 	.word	0x08004f80
 8002ec8:	20000040 	.word	0x20000040
 8002ecc:	20000044 	.word	0x20000044
 8002ed0:	4b8f      	ldr	r3, [pc, #572]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a8e      	ldr	r2, [pc, #568]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002ed6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eda:	6013      	str	r3, [r2, #0]
 8002edc:	4b8c      	ldr	r3, [pc, #560]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a8b      	ldr	r2, [pc, #556]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002ee2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ee6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d013      	beq.n	8002f18 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef0:	f7fe fd4e 	bl	8001990 <HAL_GetTick>
 8002ef4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef8:	f7fe fd4a 	bl	8001990 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b64      	cmp	r3, #100	@ 0x64
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e2f9      	b.n	80034fe <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f0a:	4b81      	ldr	r3, [pc, #516]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0f0      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x2ac>
 8002f16:	e014      	b.n	8002f42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f18:	f7fe fd3a 	bl	8001990 <HAL_GetTick>
 8002f1c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f20:	f7fe fd36 	bl	8001990 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b64      	cmp	r3, #100	@ 0x64
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e2e5      	b.n	80034fe <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f32:	4b77      	ldr	r3, [pc, #476]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f0      	bne.n	8002f20 <HAL_RCC_OscConfig+0x2d4>
 8002f3e:	e000      	b.n	8002f42 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d060      	beq.n	8003010 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	2b04      	cmp	r3, #4
 8002f52:	d005      	beq.n	8002f60 <HAL_RCC_OscConfig+0x314>
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	2b0c      	cmp	r3, #12
 8002f58:	d119      	bne.n	8002f8e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d116      	bne.n	8002f8e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f60:	4b6b      	ldr	r3, [pc, #428]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d005      	beq.n	8002f78 <HAL_RCC_OscConfig+0x32c>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e2c2      	b.n	80034fe <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f78:	4b65      	ldr	r3, [pc, #404]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	061b      	lsls	r3, r3, #24
 8002f86:	4962      	ldr	r1, [pc, #392]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f8c:	e040      	b.n	8003010 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d023      	beq.n	8002fde <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f96:	4b5e      	ldr	r3, [pc, #376]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a5d      	ldr	r2, [pc, #372]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002f9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa2:	f7fe fcf5 	bl	8001990 <HAL_GetTick>
 8002fa6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002faa:	f7fe fcf1 	bl	8001990 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e2a0      	b.n	80034fe <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fbc:	4b54      	ldr	r3, [pc, #336]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0f0      	beq.n	8002faa <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc8:	4b51      	ldr	r3, [pc, #324]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	061b      	lsls	r3, r3, #24
 8002fd6:	494e      	ldr	r1, [pc, #312]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	604b      	str	r3, [r1, #4]
 8002fdc:	e018      	b.n	8003010 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fde:	4b4c      	ldr	r3, [pc, #304]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a4b      	ldr	r2, [pc, #300]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8002fe4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fea:	f7fe fcd1 	bl	8001990 <HAL_GetTick>
 8002fee:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ff2:	f7fe fccd 	bl	8001990 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e27c      	b.n	80034fe <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003004:	4b42      	ldr	r3, [pc, #264]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1f0      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0308 	and.w	r3, r3, #8
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 8082 	beq.w	8003122 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d05f      	beq.n	80030e6 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003026:	4b3a      	ldr	r3, [pc, #232]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8003028:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800302c:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	699a      	ldr	r2, [r3, #24]
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	f003 0310 	and.w	r3, r3, #16
 8003038:	429a      	cmp	r2, r3
 800303a:	d037      	beq.n	80030ac <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d006      	beq.n	8003054 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e254      	b.n	80034fe <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d01b      	beq.n	8003096 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800305e:	4b2c      	ldr	r3, [pc, #176]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8003060:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003064:	4a2a      	ldr	r2, [pc, #168]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8003066:	f023 0301 	bic.w	r3, r3, #1
 800306a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800306e:	f7fe fc8f 	bl	8001990 <HAL_GetTick>
 8003072:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003076:	f7fe fc8b 	bl	8001990 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b11      	cmp	r3, #17
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e23a      	b.n	80034fe <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003088:	4b21      	ldr	r3, [pc, #132]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 800308a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1ef      	bne.n	8003076 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003096:	4b1e      	ldr	r3, [pc, #120]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 8003098:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800309c:	f023 0210 	bic.w	r2, r3, #16
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	491a      	ldr	r1, [pc, #104]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ac:	4b18      	ldr	r3, [pc, #96]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 80030ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030b2:	4a17      	ldr	r2, [pc, #92]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 80030b4:	f043 0301 	orr.w	r3, r3, #1
 80030b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030bc:	f7fe fc68 	bl	8001990 <HAL_GetTick>
 80030c0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c4:	f7fe fc64 	bl	8001990 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b11      	cmp	r3, #17
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e213      	b.n	80034fe <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 80030d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0ef      	beq.n	80030c4 <HAL_RCC_OscConfig+0x478>
 80030e4:	e01d      	b.n	8003122 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 80030e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030ec:	4a08      	ldr	r2, [pc, #32]	@ (8003110 <HAL_RCC_OscConfig+0x4c4>)
 80030ee:	f023 0301 	bic.w	r3, r3, #1
 80030f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f6:	f7fe fc4b 	bl	8001990 <HAL_GetTick>
 80030fa:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030fc:	e00a      	b.n	8003114 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030fe:	f7fe fc47 	bl	8001990 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b11      	cmp	r3, #17
 800310a:	d903      	bls.n	8003114 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e1f6      	b.n	80034fe <HAL_RCC_OscConfig+0x8b2>
 8003110:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003114:	4ba9      	ldr	r3, [pc, #676]	@ (80033bc <HAL_RCC_OscConfig+0x770>)
 8003116:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1ed      	bne.n	80030fe <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 80bd 	beq.w	80032aa <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003130:	2300      	movs	r3, #0
 8003132:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003136:	4ba1      	ldr	r3, [pc, #644]	@ (80033bc <HAL_RCC_OscConfig+0x770>)
 8003138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800313a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10e      	bne.n	8003160 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003142:	4b9e      	ldr	r3, [pc, #632]	@ (80033bc <HAL_RCC_OscConfig+0x770>)
 8003144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003146:	4a9d      	ldr	r2, [pc, #628]	@ (80033bc <HAL_RCC_OscConfig+0x770>)
 8003148:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800314c:	6593      	str	r3, [r2, #88]	@ 0x58
 800314e:	4b9b      	ldr	r3, [pc, #620]	@ (80033bc <HAL_RCC_OscConfig+0x770>)
 8003150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800315a:	2301      	movs	r3, #1
 800315c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003160:	4b97      	ldr	r3, [pc, #604]	@ (80033c0 <HAL_RCC_OscConfig+0x774>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d118      	bne.n	800319e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800316c:	4b94      	ldr	r3, [pc, #592]	@ (80033c0 <HAL_RCC_OscConfig+0x774>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a93      	ldr	r2, [pc, #588]	@ (80033c0 <HAL_RCC_OscConfig+0x774>)
 8003172:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003176:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003178:	f7fe fc0a 	bl	8001990 <HAL_GetTick>
 800317c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003180:	f7fe fc06 	bl	8001990 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e1b5      	b.n	80034fe <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003192:	4b8b      	ldr	r3, [pc, #556]	@ (80033c0 <HAL_RCC_OscConfig+0x774>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0f0      	beq.n	8003180 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d02c      	beq.n	8003204 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80031aa:	4b84      	ldr	r3, [pc, #528]	@ (80033bc <HAL_RCC_OscConfig+0x770>)
 80031ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031bc:	497f      	ldr	r1, [pc, #508]	@ (80033bc <HAL_RCC_OscConfig+0x770>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d010      	beq.n	80031f2 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80031d0:	4b7a      	ldr	r3, [pc, #488]	@ (80033bc <HAL_RCC_OscConfig+0x770>)
 80031d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d6:	4a79      	ldr	r2, [pc, #484]	@ (80033bc <HAL_RCC_OscConfig+0x770>)
 80031d8:	f043 0304 	orr.w	r3, r3, #4
 80031dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80031e0:	4b76      	ldr	r3, [pc, #472]	@ (80033bc <HAL_RCC_OscConfig+0x770>)
 80031e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031e6:	4a75      	ldr	r2, [pc, #468]	@ (80033bc <HAL_RCC_OscConfig+0x770>)
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031f0:	e018      	b.n	8003224 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80031f2:	4b72      	ldr	r3, [pc, #456]	@ (80033bc <HAL_RCC_OscConfig+0x770>)
 80031f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f8:	4a70      	ldr	r2, [pc, #448]	@ (80033bc <HAL_RCC_OscConfig+0x770>)
 80031fa:	f043 0301 	orr.w	r3, r3, #1
 80031fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003202:	e00f      	b.n	8003224 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003204:	4b6d      	ldr	r3, [pc, #436]	@ (80033bc <HAL_RCC_OscConfig+0x770>)
 8003206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800320a:	4a6c      	ldr	r2, [pc, #432]	@ (80033bc <HAL_RCC_OscConfig+0x770>)
 800320c:	f023 0301 	bic.w	r3, r3, #1
 8003210:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003214:	4b69      	ldr	r3, [pc, #420]	@ (80033bc <HAL_RCC_OscConfig+0x770>)
 8003216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800321a:	4a68      	ldr	r2, [pc, #416]	@ (80033bc <HAL_RCC_OscConfig+0x770>)
 800321c:	f023 0304 	bic.w	r3, r3, #4
 8003220:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d016      	beq.n	800325a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322c:	f7fe fbb0 	bl	8001990 <HAL_GetTick>
 8003230:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003232:	e00a      	b.n	800324a <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003234:	f7fe fbac 	bl	8001990 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003242:	4293      	cmp	r3, r2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e159      	b.n	80034fe <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800324a:	4b5c      	ldr	r3, [pc, #368]	@ (80033bc <HAL_RCC_OscConfig+0x770>)
 800324c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0ed      	beq.n	8003234 <HAL_RCC_OscConfig+0x5e8>
 8003258:	e01d      	b.n	8003296 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800325a:	f7fe fb99 	bl	8001990 <HAL_GetTick>
 800325e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003260:	e00a      	b.n	8003278 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003262:	f7fe fb95 	bl	8001990 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003270:	4293      	cmp	r3, r2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e142      	b.n	80034fe <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003278:	4b50      	ldr	r3, [pc, #320]	@ (80033bc <HAL_RCC_OscConfig+0x770>)
 800327a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1ed      	bne.n	8003262 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003286:	4b4d      	ldr	r3, [pc, #308]	@ (80033bc <HAL_RCC_OscConfig+0x770>)
 8003288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800328c:	4a4b      	ldr	r2, [pc, #300]	@ (80033bc <HAL_RCC_OscConfig+0x770>)
 800328e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003292:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003296:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800329a:	2b01      	cmp	r3, #1
 800329c:	d105      	bne.n	80032aa <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800329e:	4b47      	ldr	r3, [pc, #284]	@ (80033bc <HAL_RCC_OscConfig+0x770>)
 80032a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a2:	4a46      	ldr	r2, [pc, #280]	@ (80033bc <HAL_RCC_OscConfig+0x770>)
 80032a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032a8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0320 	and.w	r3, r3, #32
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d03c      	beq.n	8003330 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d01c      	beq.n	80032f8 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032be:	4b3f      	ldr	r3, [pc, #252]	@ (80033bc <HAL_RCC_OscConfig+0x770>)
 80032c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032c4:	4a3d      	ldr	r2, [pc, #244]	@ (80033bc <HAL_RCC_OscConfig+0x770>)
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ce:	f7fe fb5f 	bl	8001990 <HAL_GetTick>
 80032d2:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032d6:	f7fe fb5b 	bl	8001990 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e10a      	b.n	80034fe <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032e8:	4b34      	ldr	r3, [pc, #208]	@ (80033bc <HAL_RCC_OscConfig+0x770>)
 80032ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0ef      	beq.n	80032d6 <HAL_RCC_OscConfig+0x68a>
 80032f6:	e01b      	b.n	8003330 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032f8:	4b30      	ldr	r3, [pc, #192]	@ (80033bc <HAL_RCC_OscConfig+0x770>)
 80032fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032fe:	4a2f      	ldr	r2, [pc, #188]	@ (80033bc <HAL_RCC_OscConfig+0x770>)
 8003300:	f023 0301 	bic.w	r3, r3, #1
 8003304:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003308:	f7fe fb42 	bl	8001990 <HAL_GetTick>
 800330c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003310:	f7fe fb3e 	bl	8001990 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e0ed      	b.n	80034fe <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003322:	4b26      	ldr	r3, [pc, #152]	@ (80033bc <HAL_RCC_OscConfig+0x770>)
 8003324:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1ef      	bne.n	8003310 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 80e1 	beq.w	80034fc <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800333e:	2b02      	cmp	r3, #2
 8003340:	f040 80b5 	bne.w	80034ae <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003344:	4b1d      	ldr	r3, [pc, #116]	@ (80033bc <HAL_RCC_OscConfig+0x770>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	f003 0203 	and.w	r2, r3, #3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003354:	429a      	cmp	r2, r3
 8003356:	d124      	bne.n	80033a2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003362:	3b01      	subs	r3, #1
 8003364:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003366:	429a      	cmp	r2, r3
 8003368:	d11b      	bne.n	80033a2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003374:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003376:	429a      	cmp	r2, r3
 8003378:	d113      	bne.n	80033a2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003384:	085b      	lsrs	r3, r3, #1
 8003386:	3b01      	subs	r3, #1
 8003388:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800338a:	429a      	cmp	r2, r3
 800338c:	d109      	bne.n	80033a2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003398:	085b      	lsrs	r3, r3, #1
 800339a:	3b01      	subs	r3, #1
 800339c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800339e:	429a      	cmp	r2, r3
 80033a0:	d05f      	beq.n	8003462 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	2b0c      	cmp	r3, #12
 80033a6:	d05a      	beq.n	800345e <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033a8:	4b04      	ldr	r3, [pc, #16]	@ (80033bc <HAL_RCC_OscConfig+0x770>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a03      	ldr	r2, [pc, #12]	@ (80033bc <HAL_RCC_OscConfig+0x770>)
 80033ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033b2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033b4:	f7fe faec 	bl	8001990 <HAL_GetTick>
 80033b8:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033ba:	e00c      	b.n	80033d6 <HAL_RCC_OscConfig+0x78a>
 80033bc:	40021000 	.word	0x40021000
 80033c0:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c4:	f7fe fae4 	bl	8001990 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e093      	b.n	80034fe <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033d6:	4b4c      	ldr	r3, [pc, #304]	@ (8003508 <HAL_RCC_OscConfig+0x8bc>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1f0      	bne.n	80033c4 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033e2:	4b49      	ldr	r3, [pc, #292]	@ (8003508 <HAL_RCC_OscConfig+0x8bc>)
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	4b49      	ldr	r3, [pc, #292]	@ (800350c <HAL_RCC_OscConfig+0x8c0>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80033f2:	3a01      	subs	r2, #1
 80033f4:	0112      	lsls	r2, r2, #4
 80033f6:	4311      	orrs	r1, r2
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80033fc:	0212      	lsls	r2, r2, #8
 80033fe:	4311      	orrs	r1, r2
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003404:	0852      	lsrs	r2, r2, #1
 8003406:	3a01      	subs	r2, #1
 8003408:	0552      	lsls	r2, r2, #21
 800340a:	4311      	orrs	r1, r2
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003410:	0852      	lsrs	r2, r2, #1
 8003412:	3a01      	subs	r2, #1
 8003414:	0652      	lsls	r2, r2, #25
 8003416:	430a      	orrs	r2, r1
 8003418:	493b      	ldr	r1, [pc, #236]	@ (8003508 <HAL_RCC_OscConfig+0x8bc>)
 800341a:	4313      	orrs	r3, r2
 800341c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800341e:	4b3a      	ldr	r3, [pc, #232]	@ (8003508 <HAL_RCC_OscConfig+0x8bc>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a39      	ldr	r2, [pc, #228]	@ (8003508 <HAL_RCC_OscConfig+0x8bc>)
 8003424:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003428:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800342a:	4b37      	ldr	r3, [pc, #220]	@ (8003508 <HAL_RCC_OscConfig+0x8bc>)
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	4a36      	ldr	r2, [pc, #216]	@ (8003508 <HAL_RCC_OscConfig+0x8bc>)
 8003430:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003434:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003436:	f7fe faab 	bl	8001990 <HAL_GetTick>
 800343a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800343e:	f7fe faa7 	bl	8001990 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e056      	b.n	80034fe <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003450:	4b2d      	ldr	r3, [pc, #180]	@ (8003508 <HAL_RCC_OscConfig+0x8bc>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0f0      	beq.n	800343e <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800345c:	e04e      	b.n	80034fc <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e04d      	b.n	80034fe <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003462:	4b29      	ldr	r3, [pc, #164]	@ (8003508 <HAL_RCC_OscConfig+0x8bc>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d146      	bne.n	80034fc <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800346e:	4b26      	ldr	r3, [pc, #152]	@ (8003508 <HAL_RCC_OscConfig+0x8bc>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a25      	ldr	r2, [pc, #148]	@ (8003508 <HAL_RCC_OscConfig+0x8bc>)
 8003474:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003478:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800347a:	4b23      	ldr	r3, [pc, #140]	@ (8003508 <HAL_RCC_OscConfig+0x8bc>)
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	4a22      	ldr	r2, [pc, #136]	@ (8003508 <HAL_RCC_OscConfig+0x8bc>)
 8003480:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003484:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003486:	f7fe fa83 	bl	8001990 <HAL_GetTick>
 800348a:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348e:	f7fe fa7f 	bl	8001990 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e02e      	b.n	80034fe <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034a0:	4b19      	ldr	r3, [pc, #100]	@ (8003508 <HAL_RCC_OscConfig+0x8bc>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0f0      	beq.n	800348e <HAL_RCC_OscConfig+0x842>
 80034ac:	e026      	b.n	80034fc <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	2b0c      	cmp	r3, #12
 80034b2:	d021      	beq.n	80034f8 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b4:	4b14      	ldr	r3, [pc, #80]	@ (8003508 <HAL_RCC_OscConfig+0x8bc>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a13      	ldr	r2, [pc, #76]	@ (8003508 <HAL_RCC_OscConfig+0x8bc>)
 80034ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c0:	f7fe fa66 	bl	8001990 <HAL_GetTick>
 80034c4:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c8:	f7fe fa62 	bl	8001990 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e011      	b.n	80034fe <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034da:	4b0b      	ldr	r3, [pc, #44]	@ (8003508 <HAL_RCC_OscConfig+0x8bc>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80034e6:	4b08      	ldr	r3, [pc, #32]	@ (8003508 <HAL_RCC_OscConfig+0x8bc>)
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	4a07      	ldr	r2, [pc, #28]	@ (8003508 <HAL_RCC_OscConfig+0x8bc>)
 80034ec:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 80034f0:	f023 0303 	bic.w	r3, r3, #3
 80034f4:	60d3      	str	r3, [r2, #12]
 80034f6:	e001      	b.n	80034fc <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e000      	b.n	80034fe <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3728      	adds	r7, #40	@ 0x28
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40021000 	.word	0x40021000
 800350c:	f99f808c 	.word	0xf99f808c

08003510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e0e7      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003524:	4b75      	ldr	r3, [pc, #468]	@ (80036fc <HAL_RCC_ClockConfig+0x1ec>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d910      	bls.n	8003554 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003532:	4b72      	ldr	r3, [pc, #456]	@ (80036fc <HAL_RCC_ClockConfig+0x1ec>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 0207 	bic.w	r2, r3, #7
 800353a:	4970      	ldr	r1, [pc, #448]	@ (80036fc <HAL_RCC_ClockConfig+0x1ec>)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	4313      	orrs	r3, r2
 8003540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003542:	4b6e      	ldr	r3, [pc, #440]	@ (80036fc <HAL_RCC_ClockConfig+0x1ec>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d001      	beq.n	8003554 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0cf      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d010      	beq.n	8003582 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	4b66      	ldr	r3, [pc, #408]	@ (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800356c:	429a      	cmp	r2, r3
 800356e:	d908      	bls.n	8003582 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003570:	4b63      	ldr	r3, [pc, #396]	@ (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	4960      	ldr	r1, [pc, #384]	@ (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 800357e:	4313      	orrs	r3, r2
 8003580:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d04c      	beq.n	8003628 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b03      	cmp	r3, #3
 8003594:	d107      	bne.n	80035a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003596:	4b5a      	ldr	r3, [pc, #360]	@ (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d121      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e0a6      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d107      	bne.n	80035be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ae:	4b54      	ldr	r3, [pc, #336]	@ (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d115      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e09a      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d107      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035c6:	4b4e      	ldr	r3, [pc, #312]	@ (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d109      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e08e      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035d6:	4b4a      	ldr	r3, [pc, #296]	@ (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e086      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035e6:	4b46      	ldr	r3, [pc, #280]	@ (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f023 0203 	bic.w	r2, r3, #3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	4943      	ldr	r1, [pc, #268]	@ (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035f8:	f7fe f9ca 	bl	8001990 <HAL_GetTick>
 80035fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fe:	e00a      	b.n	8003616 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003600:	f7fe f9c6 	bl	8001990 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800360e:	4293      	cmp	r3, r2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e06e      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003616:	4b3a      	ldr	r3, [pc, #232]	@ (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 020c 	and.w	r2, r3, #12
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	429a      	cmp	r2, r3
 8003626:	d1eb      	bne.n	8003600 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d010      	beq.n	8003656 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	4b31      	ldr	r3, [pc, #196]	@ (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003640:	429a      	cmp	r2, r3
 8003642:	d208      	bcs.n	8003656 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003644:	4b2e      	ldr	r3, [pc, #184]	@ (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	492b      	ldr	r1, [pc, #172]	@ (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 8003652:	4313      	orrs	r3, r2
 8003654:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003656:	4b29      	ldr	r3, [pc, #164]	@ (80036fc <HAL_RCC_ClockConfig+0x1ec>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d210      	bcs.n	8003686 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003664:	4b25      	ldr	r3, [pc, #148]	@ (80036fc <HAL_RCC_ClockConfig+0x1ec>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f023 0207 	bic.w	r2, r3, #7
 800366c:	4923      	ldr	r1, [pc, #140]	@ (80036fc <HAL_RCC_ClockConfig+0x1ec>)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	4313      	orrs	r3, r2
 8003672:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003674:	4b21      	ldr	r3, [pc, #132]	@ (80036fc <HAL_RCC_ClockConfig+0x1ec>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	d001      	beq.n	8003686 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e036      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	2b00      	cmp	r3, #0
 8003690:	d008      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003692:	4b1b      	ldr	r3, [pc, #108]	@ (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	4918      	ldr	r1, [pc, #96]	@ (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d009      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036b0:	4b13      	ldr	r3, [pc, #76]	@ (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	4910      	ldr	r1, [pc, #64]	@ (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036c4:	f000 f824 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 80036c8:	4602      	mov	r2, r0
 80036ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	091b      	lsrs	r3, r3, #4
 80036d0:	f003 030f 	and.w	r3, r3, #15
 80036d4:	490b      	ldr	r1, [pc, #44]	@ (8003704 <HAL_RCC_ClockConfig+0x1f4>)
 80036d6:	5ccb      	ldrb	r3, [r1, r3]
 80036d8:	f003 031f 	and.w	r3, r3, #31
 80036dc:	fa22 f303 	lsr.w	r3, r2, r3
 80036e0:	4a09      	ldr	r2, [pc, #36]	@ (8003708 <HAL_RCC_ClockConfig+0x1f8>)
 80036e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036e4:	4b09      	ldr	r3, [pc, #36]	@ (800370c <HAL_RCC_ClockConfig+0x1fc>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fe f901 	bl	80018f0 <HAL_InitTick>
 80036ee:	4603      	mov	r3, r0
 80036f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80036f2:	7afb      	ldrb	r3, [r7, #11]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40022000 	.word	0x40022000
 8003700:	40021000 	.word	0x40021000
 8003704:	08004f80 	.word	0x08004f80
 8003708:	20000040 	.word	0x20000040
 800370c:	20000044 	.word	0x20000044

08003710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003710:	b480      	push	{r7}
 8003712:	b089      	sub	sp, #36	@ 0x24
 8003714:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003716:	2300      	movs	r3, #0
 8003718:	61fb      	str	r3, [r7, #28]
 800371a:	2300      	movs	r3, #0
 800371c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800371e:	4b3e      	ldr	r3, [pc, #248]	@ (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 030c 	and.w	r3, r3, #12
 8003726:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003728:	4b3b      	ldr	r3, [pc, #236]	@ (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f003 0303 	and.w	r3, r3, #3
 8003730:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_RCC_GetSysClockFreq+0x34>
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	2b0c      	cmp	r3, #12
 800373c:	d121      	bne.n	8003782 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d11e      	bne.n	8003782 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003744:	4b34      	ldr	r3, [pc, #208]	@ (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	2b00      	cmp	r3, #0
 800374e:	d107      	bne.n	8003760 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003750:	4b31      	ldr	r3, [pc, #196]	@ (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 8003752:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003756:	0a1b      	lsrs	r3, r3, #8
 8003758:	f003 030f 	and.w	r3, r3, #15
 800375c:	61fb      	str	r3, [r7, #28]
 800375e:	e005      	b.n	800376c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003760:	4b2d      	ldr	r3, [pc, #180]	@ (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	091b      	lsrs	r3, r3, #4
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800376c:	4a2b      	ldr	r2, [pc, #172]	@ (800381c <HAL_RCC_GetSysClockFreq+0x10c>)
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003774:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10d      	bne.n	8003798 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003780:	e00a      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	2b04      	cmp	r3, #4
 8003786:	d102      	bne.n	800378e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003788:	4b25      	ldr	r3, [pc, #148]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x110>)
 800378a:	61bb      	str	r3, [r7, #24]
 800378c:	e004      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	2b08      	cmp	r3, #8
 8003792:	d101      	bne.n	8003798 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003794:	4b23      	ldr	r3, [pc, #140]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x114>)
 8003796:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	2b0c      	cmp	r3, #12
 800379c:	d134      	bne.n	8003808 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800379e:	4b1e      	ldr	r3, [pc, #120]	@ (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d003      	beq.n	80037b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b03      	cmp	r3, #3
 80037b2:	d003      	beq.n	80037bc <HAL_RCC_GetSysClockFreq+0xac>
 80037b4:	e005      	b.n	80037c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x110>)
 80037b8:	617b      	str	r3, [r7, #20]
      break;
 80037ba:	e005      	b.n	80037c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037bc:	4b19      	ldr	r3, [pc, #100]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x114>)
 80037be:	617b      	str	r3, [r7, #20]
      break;
 80037c0:	e002      	b.n	80037c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	617b      	str	r3, [r7, #20]
      break;
 80037c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037c8:	4b13      	ldr	r3, [pc, #76]	@ (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	091b      	lsrs	r3, r3, #4
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	3301      	adds	r3, #1
 80037d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037d6:	4b10      	ldr	r3, [pc, #64]	@ (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	0a1b      	lsrs	r3, r3, #8
 80037dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	fb03 f202 	mul.w	r2, r3, r2
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	0e5b      	lsrs	r3, r3, #25
 80037f4:	f003 0303 	and.w	r3, r3, #3
 80037f8:	3301      	adds	r3, #1
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	fbb2 f3f3 	udiv	r3, r2, r3
 8003806:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003808:	69bb      	ldr	r3, [r7, #24]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3724      	adds	r7, #36	@ 0x24
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40021000 	.word	0x40021000
 800381c:	08004f98 	.word	0x08004f98
 8003820:	00f42400 	.word	0x00f42400
 8003824:	007a1200 	.word	0x007a1200

08003828 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800382c:	4b03      	ldr	r3, [pc, #12]	@ (800383c <HAL_RCC_GetHCLKFreq+0x14>)
 800382e:	681b      	ldr	r3, [r3, #0]
}
 8003830:	4618      	mov	r0, r3
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	20000040 	.word	0x20000040

08003840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003844:	f7ff fff0 	bl	8003828 <HAL_RCC_GetHCLKFreq>
 8003848:	4602      	mov	r2, r0
 800384a:	4b06      	ldr	r3, [pc, #24]	@ (8003864 <HAL_RCC_GetPCLK1Freq+0x24>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	0a1b      	lsrs	r3, r3, #8
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	4904      	ldr	r1, [pc, #16]	@ (8003868 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003856:	5ccb      	ldrb	r3, [r1, r3]
 8003858:	f003 031f 	and.w	r3, r3, #31
 800385c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003860:	4618      	mov	r0, r3
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40021000 	.word	0x40021000
 8003868:	08004f90 	.word	0x08004f90

0800386c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003870:	f7ff ffda 	bl	8003828 <HAL_RCC_GetHCLKFreq>
 8003874:	4602      	mov	r2, r0
 8003876:	4b06      	ldr	r3, [pc, #24]	@ (8003890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	0adb      	lsrs	r3, r3, #11
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	4904      	ldr	r1, [pc, #16]	@ (8003894 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003882:	5ccb      	ldrb	r3, [r1, r3]
 8003884:	f003 031f 	and.w	r3, r3, #31
 8003888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800388c:	4618      	mov	r0, r3
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40021000 	.word	0x40021000
 8003894:	08004f90 	.word	0x08004f90

08003898 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038a0:	2300      	movs	r3, #0
 80038a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038a4:	4b2a      	ldr	r3, [pc, #168]	@ (8003950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038b0:	f7ff f968 	bl	8002b84 <HAL_PWREx_GetVoltageRange>
 80038b4:	6178      	str	r0, [r7, #20]
 80038b6:	e014      	b.n	80038e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038b8:	4b25      	ldr	r3, [pc, #148]	@ (8003950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038bc:	4a24      	ldr	r2, [pc, #144]	@ (8003950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80038c4:	4b22      	ldr	r3, [pc, #136]	@ (8003950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038d0:	f7ff f958 	bl	8002b84 <HAL_PWREx_GetVoltageRange>
 80038d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038da:	4a1d      	ldr	r2, [pc, #116]	@ (8003950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038e8:	d10b      	bne.n	8003902 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b80      	cmp	r3, #128	@ 0x80
 80038ee:	d919      	bls.n	8003924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2ba0      	cmp	r3, #160	@ 0xa0
 80038f4:	d902      	bls.n	80038fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038f6:	2302      	movs	r3, #2
 80038f8:	613b      	str	r3, [r7, #16]
 80038fa:	e013      	b.n	8003924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038fc:	2301      	movs	r3, #1
 80038fe:	613b      	str	r3, [r7, #16]
 8003900:	e010      	b.n	8003924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b80      	cmp	r3, #128	@ 0x80
 8003906:	d902      	bls.n	800390e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003908:	2303      	movs	r3, #3
 800390a:	613b      	str	r3, [r7, #16]
 800390c:	e00a      	b.n	8003924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b80      	cmp	r3, #128	@ 0x80
 8003912:	d102      	bne.n	800391a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003914:	2302      	movs	r3, #2
 8003916:	613b      	str	r3, [r7, #16]
 8003918:	e004      	b.n	8003924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b70      	cmp	r3, #112	@ 0x70
 800391e:	d101      	bne.n	8003924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003920:	2301      	movs	r3, #1
 8003922:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003924:	4b0b      	ldr	r3, [pc, #44]	@ (8003954 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f023 0207 	bic.w	r2, r3, #7
 800392c:	4909      	ldr	r1, [pc, #36]	@ (8003954 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	4313      	orrs	r3, r2
 8003932:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003934:	4b07      	ldr	r3, [pc, #28]	@ (8003954 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	429a      	cmp	r2, r3
 8003940:	d001      	beq.n	8003946 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e000      	b.n	8003948 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3718      	adds	r7, #24
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40021000 	.word	0x40021000
 8003954:	40022000 	.word	0x40022000

08003958 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003960:	2300      	movs	r3, #0
 8003962:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003964:	2300      	movs	r3, #0
 8003966:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 809e 	beq.w	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003976:	2300      	movs	r3, #0
 8003978:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800397a:	4b46      	ldr	r3, [pc, #280]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800397c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800397e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x34>
 800398a:	2300      	movs	r3, #0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00d      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003990:	4b40      	ldr	r3, [pc, #256]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003994:	4a3f      	ldr	r2, [pc, #252]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003996:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800399a:	6593      	str	r3, [r2, #88]	@ 0x58
 800399c:	4b3d      	ldr	r3, [pc, #244]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800399e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039a8:	2301      	movs	r3, #1
 80039aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039ac:	4b3a      	ldr	r3, [pc, #232]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a39      	ldr	r2, [pc, #228]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80039b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039b8:	f7fd ffea 	bl	8001990 <HAL_GetTick>
 80039bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039be:	e009      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c0:	f7fd ffe6 	bl	8001990 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d902      	bls.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	74fb      	strb	r3, [r7, #19]
        break;
 80039d2:	e005      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039d4:	4b30      	ldr	r3, [pc, #192]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0ef      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80039e0:	7cfb      	ldrb	r3, [r7, #19]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d15a      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039e6:	4b2b      	ldr	r3, [pc, #172]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80039e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d01e      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d019      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a02:	4b24      	ldr	r3, [pc, #144]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a0c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a0e:	4b21      	ldr	r3, [pc, #132]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a14:	4a1f      	ldr	r2, [pc, #124]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003a16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a24:	4a1b      	ldr	r2, [pc, #108]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003a26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a2e:	4a19      	ldr	r2, [pc, #100]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d016      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a40:	f7fd ffa6 	bl	8001990 <HAL_GetTick>
 8003a44:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a46:	e00b      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a48:	f7fd ffa2 	bl	8001990 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d902      	bls.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	74fb      	strb	r3, [r7, #19]
            break;
 8003a5e:	e006      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a60:	4b0c      	ldr	r3, [pc, #48]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0ec      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8003a6e:	7cfb      	ldrb	r3, [r7, #19]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10b      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a74:	4b07      	ldr	r3, [pc, #28]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a7a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a82:	4904      	ldr	r1, [pc, #16]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003a8a:	e009      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a8c:	7cfb      	ldrb	r3, [r7, #19]
 8003a8e:	74bb      	strb	r3, [r7, #18]
 8003a90:	e006      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003a92:	bf00      	nop
 8003a94:	40021000 	.word	0x40021000
 8003a98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9c:	7cfb      	ldrb	r3, [r7, #19]
 8003a9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aa0:	7c7b      	ldrb	r3, [r7, #17]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d105      	bne.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aa6:	4b6e      	ldr	r3, [pc, #440]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aaa:	4a6d      	ldr	r2, [pc, #436]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003aac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ab0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003abe:	4b68      	ldr	r3, [pc, #416]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ac4:	f023 0203 	bic.w	r2, r3, #3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	4964      	ldr	r1, [pc, #400]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00a      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ae0:	4b5f      	ldr	r3, [pc, #380]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ae6:	f023 020c 	bic.w	r2, r3, #12
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	495c      	ldr	r1, [pc, #368]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0304 	and.w	r3, r3, #4
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00a      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b02:	4b57      	ldr	r3, [pc, #348]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b08:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	4953      	ldr	r1, [pc, #332]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0320 	and.w	r3, r3, #32
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00a      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b24:	4b4e      	ldr	r3, [pc, #312]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b2a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	494b      	ldr	r1, [pc, #300]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00a      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b46:	4b46      	ldr	r3, [pc, #280]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b4c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	4942      	ldr	r1, [pc, #264]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00a      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b68:	4b3d      	ldr	r3, [pc, #244]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b76:	493a      	ldr	r1, [pc, #232]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00a      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b8a:	4b35      	ldr	r3, [pc, #212]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b90:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	4931      	ldr	r1, [pc, #196]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00a      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bac:	4b2c      	ldr	r3, [pc, #176]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	4929      	ldr	r1, [pc, #164]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bce:	4b24      	ldr	r3, [pc, #144]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bd4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	4920      	ldr	r1, [pc, #128]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d015      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bfe:	4918      	ldr	r1, [pc, #96]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c0e:	d105      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c10:	4b13      	ldr	r3, [pc, #76]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	4a12      	ldr	r2, [pc, #72]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003c16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c1a:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d015      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c28:	4b0d      	ldr	r3, [pc, #52]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c2e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c36:	490a      	ldr	r1, [pc, #40]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c46:	d105      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c48:	4b05      	ldr	r3, [pc, #20]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	4a04      	ldr	r2, [pc, #16]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003c4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c52:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c54:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3718      	adds	r7, #24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	40021000 	.word	0x40021000

08003c64 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003c68:	4b05      	ldr	r3, [pc, #20]	@ (8003c80 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a04      	ldr	r2, [pc, #16]	@ (8003c80 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003c6e:	f043 0304 	orr.w	r3, r3, #4
 8003c72:	6013      	str	r3, [r2, #0]
}
 8003c74:	bf00      	nop
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40021000 	.word	0x40021000

08003c84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e040      	b.n	8003d18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d106      	bne.n	8003cac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7fd fcf6 	bl	8001698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2224      	movs	r2, #36	@ 0x24
 8003cb0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0201 	bic.w	r2, r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fa82 	bl	80041d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f825 	bl	8003d20 <UART_SetConfig>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e01b      	b.n	8003d18 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689a      	ldr	r2, [r3, #8]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 fb01 	bl	8004318 <UART_CheckIdleState>
 8003d16:	4603      	mov	r3, r0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d24:	b08a      	sub	sp, #40	@ 0x28
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	431a      	orrs	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	4b9e      	ldr	r3, [pc, #632]	@ (8003fc8 <UART_SetConfig+0x2a8>)
 8003d50:	4013      	ands	r3, r2
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	6812      	ldr	r2, [r2, #0]
 8003d56:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a93      	ldr	r2, [pc, #588]	@ (8003fcc <UART_SetConfig+0x2ac>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d004      	beq.n	8003d8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a8a      	ldr	r2, [pc, #552]	@ (8003fd0 <UART_SetConfig+0x2b0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d126      	bne.n	8003df8 <UART_SetConfig+0xd8>
 8003daa:	4b8a      	ldr	r3, [pc, #552]	@ (8003fd4 <UART_SetConfig+0x2b4>)
 8003dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db0:	f003 0303 	and.w	r3, r3, #3
 8003db4:	2b03      	cmp	r3, #3
 8003db6:	d81b      	bhi.n	8003df0 <UART_SetConfig+0xd0>
 8003db8:	a201      	add	r2, pc, #4	@ (adr r2, 8003dc0 <UART_SetConfig+0xa0>)
 8003dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dbe:	bf00      	nop
 8003dc0:	08003dd1 	.word	0x08003dd1
 8003dc4:	08003de1 	.word	0x08003de1
 8003dc8:	08003dd9 	.word	0x08003dd9
 8003dcc:	08003de9 	.word	0x08003de9
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dd6:	e0ab      	b.n	8003f30 <UART_SetConfig+0x210>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dde:	e0a7      	b.n	8003f30 <UART_SetConfig+0x210>
 8003de0:	2304      	movs	r3, #4
 8003de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003de6:	e0a3      	b.n	8003f30 <UART_SetConfig+0x210>
 8003de8:	2308      	movs	r3, #8
 8003dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dee:	e09f      	b.n	8003f30 <UART_SetConfig+0x210>
 8003df0:	2310      	movs	r3, #16
 8003df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003df6:	e09b      	b.n	8003f30 <UART_SetConfig+0x210>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a76      	ldr	r2, [pc, #472]	@ (8003fd8 <UART_SetConfig+0x2b8>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d138      	bne.n	8003e74 <UART_SetConfig+0x154>
 8003e02:	4b74      	ldr	r3, [pc, #464]	@ (8003fd4 <UART_SetConfig+0x2b4>)
 8003e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e08:	f003 030c 	and.w	r3, r3, #12
 8003e0c:	2b0c      	cmp	r3, #12
 8003e0e:	d82d      	bhi.n	8003e6c <UART_SetConfig+0x14c>
 8003e10:	a201      	add	r2, pc, #4	@ (adr r2, 8003e18 <UART_SetConfig+0xf8>)
 8003e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e16:	bf00      	nop
 8003e18:	08003e4d 	.word	0x08003e4d
 8003e1c:	08003e6d 	.word	0x08003e6d
 8003e20:	08003e6d 	.word	0x08003e6d
 8003e24:	08003e6d 	.word	0x08003e6d
 8003e28:	08003e5d 	.word	0x08003e5d
 8003e2c:	08003e6d 	.word	0x08003e6d
 8003e30:	08003e6d 	.word	0x08003e6d
 8003e34:	08003e6d 	.word	0x08003e6d
 8003e38:	08003e55 	.word	0x08003e55
 8003e3c:	08003e6d 	.word	0x08003e6d
 8003e40:	08003e6d 	.word	0x08003e6d
 8003e44:	08003e6d 	.word	0x08003e6d
 8003e48:	08003e65 	.word	0x08003e65
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e52:	e06d      	b.n	8003f30 <UART_SetConfig+0x210>
 8003e54:	2302      	movs	r3, #2
 8003e56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e5a:	e069      	b.n	8003f30 <UART_SetConfig+0x210>
 8003e5c:	2304      	movs	r3, #4
 8003e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e62:	e065      	b.n	8003f30 <UART_SetConfig+0x210>
 8003e64:	2308      	movs	r3, #8
 8003e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e6a:	e061      	b.n	8003f30 <UART_SetConfig+0x210>
 8003e6c:	2310      	movs	r3, #16
 8003e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e72:	e05d      	b.n	8003f30 <UART_SetConfig+0x210>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a58      	ldr	r2, [pc, #352]	@ (8003fdc <UART_SetConfig+0x2bc>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d125      	bne.n	8003eca <UART_SetConfig+0x1aa>
 8003e7e:	4b55      	ldr	r3, [pc, #340]	@ (8003fd4 <UART_SetConfig+0x2b4>)
 8003e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e84:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003e88:	2b30      	cmp	r3, #48	@ 0x30
 8003e8a:	d016      	beq.n	8003eba <UART_SetConfig+0x19a>
 8003e8c:	2b30      	cmp	r3, #48	@ 0x30
 8003e8e:	d818      	bhi.n	8003ec2 <UART_SetConfig+0x1a2>
 8003e90:	2b20      	cmp	r3, #32
 8003e92:	d00a      	beq.n	8003eaa <UART_SetConfig+0x18a>
 8003e94:	2b20      	cmp	r3, #32
 8003e96:	d814      	bhi.n	8003ec2 <UART_SetConfig+0x1a2>
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <UART_SetConfig+0x182>
 8003e9c:	2b10      	cmp	r3, #16
 8003e9e:	d008      	beq.n	8003eb2 <UART_SetConfig+0x192>
 8003ea0:	e00f      	b.n	8003ec2 <UART_SetConfig+0x1a2>
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ea8:	e042      	b.n	8003f30 <UART_SetConfig+0x210>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eb0:	e03e      	b.n	8003f30 <UART_SetConfig+0x210>
 8003eb2:	2304      	movs	r3, #4
 8003eb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eb8:	e03a      	b.n	8003f30 <UART_SetConfig+0x210>
 8003eba:	2308      	movs	r3, #8
 8003ebc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ec0:	e036      	b.n	8003f30 <UART_SetConfig+0x210>
 8003ec2:	2310      	movs	r3, #16
 8003ec4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ec8:	e032      	b.n	8003f30 <UART_SetConfig+0x210>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a3f      	ldr	r2, [pc, #252]	@ (8003fcc <UART_SetConfig+0x2ac>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d12a      	bne.n	8003f2a <UART_SetConfig+0x20a>
 8003ed4:	4b3f      	ldr	r3, [pc, #252]	@ (8003fd4 <UART_SetConfig+0x2b4>)
 8003ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eda:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ede:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ee2:	d01a      	beq.n	8003f1a <UART_SetConfig+0x1fa>
 8003ee4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ee8:	d81b      	bhi.n	8003f22 <UART_SetConfig+0x202>
 8003eea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003eee:	d00c      	beq.n	8003f0a <UART_SetConfig+0x1ea>
 8003ef0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ef4:	d815      	bhi.n	8003f22 <UART_SetConfig+0x202>
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <UART_SetConfig+0x1e2>
 8003efa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003efe:	d008      	beq.n	8003f12 <UART_SetConfig+0x1f2>
 8003f00:	e00f      	b.n	8003f22 <UART_SetConfig+0x202>
 8003f02:	2300      	movs	r3, #0
 8003f04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f08:	e012      	b.n	8003f30 <UART_SetConfig+0x210>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f10:	e00e      	b.n	8003f30 <UART_SetConfig+0x210>
 8003f12:	2304      	movs	r3, #4
 8003f14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f18:	e00a      	b.n	8003f30 <UART_SetConfig+0x210>
 8003f1a:	2308      	movs	r3, #8
 8003f1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f20:	e006      	b.n	8003f30 <UART_SetConfig+0x210>
 8003f22:	2310      	movs	r3, #16
 8003f24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f28:	e002      	b.n	8003f30 <UART_SetConfig+0x210>
 8003f2a:	2310      	movs	r3, #16
 8003f2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a25      	ldr	r2, [pc, #148]	@ (8003fcc <UART_SetConfig+0x2ac>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	f040 808a 	bne.w	8004050 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f3c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d824      	bhi.n	8003f8e <UART_SetConfig+0x26e>
 8003f44:	a201      	add	r2, pc, #4	@ (adr r2, 8003f4c <UART_SetConfig+0x22c>)
 8003f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4a:	bf00      	nop
 8003f4c:	08003f71 	.word	0x08003f71
 8003f50:	08003f8f 	.word	0x08003f8f
 8003f54:	08003f79 	.word	0x08003f79
 8003f58:	08003f8f 	.word	0x08003f8f
 8003f5c:	08003f7f 	.word	0x08003f7f
 8003f60:	08003f8f 	.word	0x08003f8f
 8003f64:	08003f8f 	.word	0x08003f8f
 8003f68:	08003f8f 	.word	0x08003f8f
 8003f6c:	08003f87 	.word	0x08003f87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f70:	f7ff fc66 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
 8003f74:	61f8      	str	r0, [r7, #28]
        break;
 8003f76:	e010      	b.n	8003f9a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f78:	4b19      	ldr	r3, [pc, #100]	@ (8003fe0 <UART_SetConfig+0x2c0>)
 8003f7a:	61fb      	str	r3, [r7, #28]
        break;
 8003f7c:	e00d      	b.n	8003f9a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f7e:	f7ff fbc7 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 8003f82:	61f8      	str	r0, [r7, #28]
        break;
 8003f84:	e009      	b.n	8003f9a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f8a:	61fb      	str	r3, [r7, #28]
        break;
 8003f8c:	e005      	b.n	8003f9a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 8109 	beq.w	80041b4 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	4413      	add	r3, r2
 8003fac:	69fa      	ldr	r2, [r7, #28]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d305      	bcc.n	8003fbe <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fb8:	69fa      	ldr	r2, [r7, #28]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d912      	bls.n	8003fe4 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003fc4:	e0f6      	b.n	80041b4 <UART_SetConfig+0x494>
 8003fc6:	bf00      	nop
 8003fc8:	efff69f3 	.word	0xefff69f3
 8003fcc:	40008000 	.word	0x40008000
 8003fd0:	40013800 	.word	0x40013800
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	40004400 	.word	0x40004400
 8003fdc:	40004800 	.word	0x40004800
 8003fe0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	461c      	mov	r4, r3
 8003fea:	4615      	mov	r5, r2
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	022b      	lsls	r3, r5, #8
 8003ff6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ffa:	0222      	lsls	r2, r4, #8
 8003ffc:	68f9      	ldr	r1, [r7, #12]
 8003ffe:	6849      	ldr	r1, [r1, #4]
 8004000:	0849      	lsrs	r1, r1, #1
 8004002:	2000      	movs	r0, #0
 8004004:	4688      	mov	r8, r1
 8004006:	4681      	mov	r9, r0
 8004008:	eb12 0a08 	adds.w	sl, r2, r8
 800400c:	eb43 0b09 	adc.w	fp, r3, r9
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	603b      	str	r3, [r7, #0]
 8004018:	607a      	str	r2, [r7, #4]
 800401a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800401e:	4650      	mov	r0, sl
 8004020:	4659      	mov	r1, fp
 8004022:	f7fc f925 	bl	8000270 <__aeabi_uldivmod>
 8004026:	4602      	mov	r2, r0
 8004028:	460b      	mov	r3, r1
 800402a:	4613      	mov	r3, r2
 800402c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004034:	d308      	bcc.n	8004048 <UART_SetConfig+0x328>
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800403c:	d204      	bcs.n	8004048 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	60da      	str	r2, [r3, #12]
 8004046:	e0b5      	b.n	80041b4 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800404e:	e0b1      	b.n	80041b4 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004058:	d15d      	bne.n	8004116 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800405a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800405e:	2b08      	cmp	r3, #8
 8004060:	d827      	bhi.n	80040b2 <UART_SetConfig+0x392>
 8004062:	a201      	add	r2, pc, #4	@ (adr r2, 8004068 <UART_SetConfig+0x348>)
 8004064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004068:	0800408d 	.word	0x0800408d
 800406c:	08004095 	.word	0x08004095
 8004070:	0800409d 	.word	0x0800409d
 8004074:	080040b3 	.word	0x080040b3
 8004078:	080040a3 	.word	0x080040a3
 800407c:	080040b3 	.word	0x080040b3
 8004080:	080040b3 	.word	0x080040b3
 8004084:	080040b3 	.word	0x080040b3
 8004088:	080040ab 	.word	0x080040ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800408c:	f7ff fbd8 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
 8004090:	61f8      	str	r0, [r7, #28]
        break;
 8004092:	e014      	b.n	80040be <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004094:	f7ff fbea 	bl	800386c <HAL_RCC_GetPCLK2Freq>
 8004098:	61f8      	str	r0, [r7, #28]
        break;
 800409a:	e010      	b.n	80040be <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800409c:	4b4c      	ldr	r3, [pc, #304]	@ (80041d0 <UART_SetConfig+0x4b0>)
 800409e:	61fb      	str	r3, [r7, #28]
        break;
 80040a0:	e00d      	b.n	80040be <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040a2:	f7ff fb35 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 80040a6:	61f8      	str	r0, [r7, #28]
        break;
 80040a8:	e009      	b.n	80040be <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040ae:	61fb      	str	r3, [r7, #28]
        break;
 80040b0:	e005      	b.n	80040be <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80040bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d077      	beq.n	80041b4 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	005a      	lsls	r2, r3, #1
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	085b      	lsrs	r3, r3, #1
 80040ce:	441a      	add	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	2b0f      	cmp	r3, #15
 80040de:	d916      	bls.n	800410e <UART_SetConfig+0x3ee>
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040e6:	d212      	bcs.n	800410e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	f023 030f 	bic.w	r3, r3, #15
 80040f0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	085b      	lsrs	r3, r3, #1
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	8afb      	ldrh	r3, [r7, #22]
 8004100:	4313      	orrs	r3, r2
 8004102:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	8afa      	ldrh	r2, [r7, #22]
 800410a:	60da      	str	r2, [r3, #12]
 800410c:	e052      	b.n	80041b4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004114:	e04e      	b.n	80041b4 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004116:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800411a:	2b08      	cmp	r3, #8
 800411c:	d827      	bhi.n	800416e <UART_SetConfig+0x44e>
 800411e:	a201      	add	r2, pc, #4	@ (adr r2, 8004124 <UART_SetConfig+0x404>)
 8004120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004124:	08004149 	.word	0x08004149
 8004128:	08004151 	.word	0x08004151
 800412c:	08004159 	.word	0x08004159
 8004130:	0800416f 	.word	0x0800416f
 8004134:	0800415f 	.word	0x0800415f
 8004138:	0800416f 	.word	0x0800416f
 800413c:	0800416f 	.word	0x0800416f
 8004140:	0800416f 	.word	0x0800416f
 8004144:	08004167 	.word	0x08004167
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004148:	f7ff fb7a 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
 800414c:	61f8      	str	r0, [r7, #28]
        break;
 800414e:	e014      	b.n	800417a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004150:	f7ff fb8c 	bl	800386c <HAL_RCC_GetPCLK2Freq>
 8004154:	61f8      	str	r0, [r7, #28]
        break;
 8004156:	e010      	b.n	800417a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004158:	4b1d      	ldr	r3, [pc, #116]	@ (80041d0 <UART_SetConfig+0x4b0>)
 800415a:	61fb      	str	r3, [r7, #28]
        break;
 800415c:	e00d      	b.n	800417a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800415e:	f7ff fad7 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 8004162:	61f8      	str	r0, [r7, #28]
        break;
 8004164:	e009      	b.n	800417a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004166:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800416a:	61fb      	str	r3, [r7, #28]
        break;
 800416c:	e005      	b.n	800417a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800416e:	2300      	movs	r3, #0
 8004170:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004178:	bf00      	nop
    }

    if (pclk != 0U)
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d019      	beq.n	80041b4 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	085a      	lsrs	r2, r3, #1
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	441a      	add	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004192:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	2b0f      	cmp	r3, #15
 8004198:	d909      	bls.n	80041ae <UART_SetConfig+0x48e>
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041a0:	d205      	bcs.n	80041ae <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	60da      	str	r2, [r3, #12]
 80041ac:	e002      	b.n	80041b4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80041c0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3728      	adds	r7, #40	@ 0x28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ce:	bf00      	nop
 80041d0:	00f42400 	.word	0x00f42400

080041d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e0:	f003 0308 	and.w	r3, r3, #8
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00a      	beq.n	80041fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00a      	beq.n	8004242 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004246:	f003 0304 	and.w	r3, r3, #4
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004268:	f003 0310 	and.w	r3, r3, #16
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00a      	beq.n	8004286 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d01a      	beq.n	80042ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042d2:	d10a      	bne.n	80042ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00a      	beq.n	800430c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	605a      	str	r2, [r3, #4]
  }
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b098      	sub	sp, #96	@ 0x60
 800431c:	af02      	add	r7, sp, #8
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004328:	f7fd fb32 	bl	8001990 <HAL_GetTick>
 800432c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0308 	and.w	r3, r3, #8
 8004338:	2b08      	cmp	r3, #8
 800433a:	d12e      	bne.n	800439a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800433c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004344:	2200      	movs	r2, #0
 8004346:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f88c 	bl	8004468 <UART_WaitOnFlagUntilTimeout>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d021      	beq.n	800439a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800435e:	e853 3f00 	ldrex	r3, [r3]
 8004362:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004366:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800436a:	653b      	str	r3, [r7, #80]	@ 0x50
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	461a      	mov	r2, r3
 8004372:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004374:	647b      	str	r3, [r7, #68]	@ 0x44
 8004376:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004378:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800437a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800437c:	e841 2300 	strex	r3, r2, [r1]
 8004380:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1e6      	bne.n	8004356 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2220      	movs	r2, #32
 800438c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e062      	b.n	8004460 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b04      	cmp	r3, #4
 80043a6:	d149      	bne.n	800443c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043b0:	2200      	movs	r2, #0
 80043b2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f856 	bl	8004468 <UART_WaitOnFlagUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d03c      	beq.n	800443c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ca:	e853 3f00 	ldrex	r3, [r3]
 80043ce:	623b      	str	r3, [r7, #32]
   return(result);
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	461a      	mov	r2, r3
 80043de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80043e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043e8:	e841 2300 	strex	r3, r2, [r1]
 80043ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1e6      	bne.n	80043c2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3308      	adds	r3, #8
 80043fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	e853 3f00 	ldrex	r3, [r3]
 8004402:	60fb      	str	r3, [r7, #12]
   return(result);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f023 0301 	bic.w	r3, r3, #1
 800440a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3308      	adds	r3, #8
 8004412:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004414:	61fa      	str	r2, [r7, #28]
 8004416:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004418:	69b9      	ldr	r1, [r7, #24]
 800441a:	69fa      	ldr	r2, [r7, #28]
 800441c:	e841 2300 	strex	r3, r2, [r1]
 8004420:	617b      	str	r3, [r7, #20]
   return(result);
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1e5      	bne.n	80043f4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2220      	movs	r2, #32
 800442c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e011      	b.n	8004460 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2220      	movs	r2, #32
 8004440:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2220      	movs	r2, #32
 8004446:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3758      	adds	r7, #88	@ 0x58
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	603b      	str	r3, [r7, #0]
 8004474:	4613      	mov	r3, r2
 8004476:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004478:	e04f      	b.n	800451a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004480:	d04b      	beq.n	800451a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004482:	f7fd fa85 	bl	8001990 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	429a      	cmp	r2, r3
 8004490:	d302      	bcc.n	8004498 <UART_WaitOnFlagUntilTimeout+0x30>
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e04e      	b.n	800453a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0304 	and.w	r3, r3, #4
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d037      	beq.n	800451a <UART_WaitOnFlagUntilTimeout+0xb2>
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2b80      	cmp	r3, #128	@ 0x80
 80044ae:	d034      	beq.n	800451a <UART_WaitOnFlagUntilTimeout+0xb2>
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2b40      	cmp	r3, #64	@ 0x40
 80044b4:	d031      	beq.n	800451a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d110      	bne.n	80044e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2208      	movs	r2, #8
 80044ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 f838 	bl	8004542 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2208      	movs	r2, #8
 80044d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e029      	b.n	800453a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044f4:	d111      	bne.n	800451a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 f81e 	bl	8004542 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2220      	movs	r2, #32
 800450a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e00f      	b.n	800453a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	69da      	ldr	r2, [r3, #28]
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	4013      	ands	r3, r2
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	429a      	cmp	r2, r3
 8004528:	bf0c      	ite	eq
 800452a:	2301      	moveq	r3, #1
 800452c:	2300      	movne	r3, #0
 800452e:	b2db      	uxtb	r3, r3
 8004530:	461a      	mov	r2, r3
 8004532:	79fb      	ldrb	r3, [r7, #7]
 8004534:	429a      	cmp	r2, r3
 8004536:	d0a0      	beq.n	800447a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004542:	b480      	push	{r7}
 8004544:	b095      	sub	sp, #84	@ 0x54
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004552:	e853 3f00 	ldrex	r3, [r3]
 8004556:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800455e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	461a      	mov	r2, r3
 8004566:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004568:	643b      	str	r3, [r7, #64]	@ 0x40
 800456a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800456e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004570:	e841 2300 	strex	r3, r2, [r1]
 8004574:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1e6      	bne.n	800454a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3308      	adds	r3, #8
 8004582:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	e853 3f00 	ldrex	r3, [r3]
 800458a:	61fb      	str	r3, [r7, #28]
   return(result);
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	f023 0301 	bic.w	r3, r3, #1
 8004592:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3308      	adds	r3, #8
 800459a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800459c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800459e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045a4:	e841 2300 	strex	r3, r2, [r1]
 80045a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1e5      	bne.n	800457c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d118      	bne.n	80045ea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	e853 3f00 	ldrex	r3, [r3]
 80045c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	f023 0310 	bic.w	r3, r3, #16
 80045cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	461a      	mov	r2, r3
 80045d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045d6:	61bb      	str	r3, [r7, #24]
 80045d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045da:	6979      	ldr	r1, [r7, #20]
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	e841 2300 	strex	r3, r2, [r1]
 80045e2:	613b      	str	r3, [r7, #16]
   return(result);
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1e6      	bne.n	80045b8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2220      	movs	r2, #32
 80045ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80045fe:	bf00      	nop
 8004600:	3754      	adds	r7, #84	@ 0x54
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
	...

0800460c <siprintf>:
 800460c:	b40e      	push	{r1, r2, r3}
 800460e:	b500      	push	{lr}
 8004610:	b09c      	sub	sp, #112	@ 0x70
 8004612:	ab1d      	add	r3, sp, #116	@ 0x74
 8004614:	9002      	str	r0, [sp, #8]
 8004616:	9006      	str	r0, [sp, #24]
 8004618:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800461c:	4809      	ldr	r0, [pc, #36]	@ (8004644 <siprintf+0x38>)
 800461e:	9107      	str	r1, [sp, #28]
 8004620:	9104      	str	r1, [sp, #16]
 8004622:	4909      	ldr	r1, [pc, #36]	@ (8004648 <siprintf+0x3c>)
 8004624:	f853 2b04 	ldr.w	r2, [r3], #4
 8004628:	9105      	str	r1, [sp, #20]
 800462a:	6800      	ldr	r0, [r0, #0]
 800462c:	9301      	str	r3, [sp, #4]
 800462e:	a902      	add	r1, sp, #8
 8004630:	f000 f994 	bl	800495c <_svfiprintf_r>
 8004634:	9b02      	ldr	r3, [sp, #8]
 8004636:	2200      	movs	r2, #0
 8004638:	701a      	strb	r2, [r3, #0]
 800463a:	b01c      	add	sp, #112	@ 0x70
 800463c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004640:	b003      	add	sp, #12
 8004642:	4770      	bx	lr
 8004644:	2000004c 	.word	0x2000004c
 8004648:	ffff0208 	.word	0xffff0208

0800464c <memset>:
 800464c:	4402      	add	r2, r0
 800464e:	4603      	mov	r3, r0
 8004650:	4293      	cmp	r3, r2
 8004652:	d100      	bne.n	8004656 <memset+0xa>
 8004654:	4770      	bx	lr
 8004656:	f803 1b01 	strb.w	r1, [r3], #1
 800465a:	e7f9      	b.n	8004650 <memset+0x4>

0800465c <__errno>:
 800465c:	4b01      	ldr	r3, [pc, #4]	@ (8004664 <__errno+0x8>)
 800465e:	6818      	ldr	r0, [r3, #0]
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	2000004c 	.word	0x2000004c

08004668 <__libc_init_array>:
 8004668:	b570      	push	{r4, r5, r6, lr}
 800466a:	4d0d      	ldr	r5, [pc, #52]	@ (80046a0 <__libc_init_array+0x38>)
 800466c:	4c0d      	ldr	r4, [pc, #52]	@ (80046a4 <__libc_init_array+0x3c>)
 800466e:	1b64      	subs	r4, r4, r5
 8004670:	10a4      	asrs	r4, r4, #2
 8004672:	2600      	movs	r6, #0
 8004674:	42a6      	cmp	r6, r4
 8004676:	d109      	bne.n	800468c <__libc_init_array+0x24>
 8004678:	4d0b      	ldr	r5, [pc, #44]	@ (80046a8 <__libc_init_array+0x40>)
 800467a:	4c0c      	ldr	r4, [pc, #48]	@ (80046ac <__libc_init_array+0x44>)
 800467c:	f000 fc66 	bl	8004f4c <_init>
 8004680:	1b64      	subs	r4, r4, r5
 8004682:	10a4      	asrs	r4, r4, #2
 8004684:	2600      	movs	r6, #0
 8004686:	42a6      	cmp	r6, r4
 8004688:	d105      	bne.n	8004696 <__libc_init_array+0x2e>
 800468a:	bd70      	pop	{r4, r5, r6, pc}
 800468c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004690:	4798      	blx	r3
 8004692:	3601      	adds	r6, #1
 8004694:	e7ee      	b.n	8004674 <__libc_init_array+0xc>
 8004696:	f855 3b04 	ldr.w	r3, [r5], #4
 800469a:	4798      	blx	r3
 800469c:	3601      	adds	r6, #1
 800469e:	e7f2      	b.n	8004686 <__libc_init_array+0x1e>
 80046a0:	08005004 	.word	0x08005004
 80046a4:	08005004 	.word	0x08005004
 80046a8:	08005004 	.word	0x08005004
 80046ac:	08005008 	.word	0x08005008

080046b0 <__retarget_lock_acquire_recursive>:
 80046b0:	4770      	bx	lr

080046b2 <__retarget_lock_release_recursive>:
 80046b2:	4770      	bx	lr

080046b4 <_free_r>:
 80046b4:	b538      	push	{r3, r4, r5, lr}
 80046b6:	4605      	mov	r5, r0
 80046b8:	2900      	cmp	r1, #0
 80046ba:	d041      	beq.n	8004740 <_free_r+0x8c>
 80046bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046c0:	1f0c      	subs	r4, r1, #4
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	bfb8      	it	lt
 80046c6:	18e4      	addlt	r4, r4, r3
 80046c8:	f000 f8e0 	bl	800488c <__malloc_lock>
 80046cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004744 <_free_r+0x90>)
 80046ce:	6813      	ldr	r3, [r2, #0]
 80046d0:	b933      	cbnz	r3, 80046e0 <_free_r+0x2c>
 80046d2:	6063      	str	r3, [r4, #4]
 80046d4:	6014      	str	r4, [r2, #0]
 80046d6:	4628      	mov	r0, r5
 80046d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046dc:	f000 b8dc 	b.w	8004898 <__malloc_unlock>
 80046e0:	42a3      	cmp	r3, r4
 80046e2:	d908      	bls.n	80046f6 <_free_r+0x42>
 80046e4:	6820      	ldr	r0, [r4, #0]
 80046e6:	1821      	adds	r1, r4, r0
 80046e8:	428b      	cmp	r3, r1
 80046ea:	bf01      	itttt	eq
 80046ec:	6819      	ldreq	r1, [r3, #0]
 80046ee:	685b      	ldreq	r3, [r3, #4]
 80046f0:	1809      	addeq	r1, r1, r0
 80046f2:	6021      	streq	r1, [r4, #0]
 80046f4:	e7ed      	b.n	80046d2 <_free_r+0x1e>
 80046f6:	461a      	mov	r2, r3
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	b10b      	cbz	r3, 8004700 <_free_r+0x4c>
 80046fc:	42a3      	cmp	r3, r4
 80046fe:	d9fa      	bls.n	80046f6 <_free_r+0x42>
 8004700:	6811      	ldr	r1, [r2, #0]
 8004702:	1850      	adds	r0, r2, r1
 8004704:	42a0      	cmp	r0, r4
 8004706:	d10b      	bne.n	8004720 <_free_r+0x6c>
 8004708:	6820      	ldr	r0, [r4, #0]
 800470a:	4401      	add	r1, r0
 800470c:	1850      	adds	r0, r2, r1
 800470e:	4283      	cmp	r3, r0
 8004710:	6011      	str	r1, [r2, #0]
 8004712:	d1e0      	bne.n	80046d6 <_free_r+0x22>
 8004714:	6818      	ldr	r0, [r3, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	6053      	str	r3, [r2, #4]
 800471a:	4408      	add	r0, r1
 800471c:	6010      	str	r0, [r2, #0]
 800471e:	e7da      	b.n	80046d6 <_free_r+0x22>
 8004720:	d902      	bls.n	8004728 <_free_r+0x74>
 8004722:	230c      	movs	r3, #12
 8004724:	602b      	str	r3, [r5, #0]
 8004726:	e7d6      	b.n	80046d6 <_free_r+0x22>
 8004728:	6820      	ldr	r0, [r4, #0]
 800472a:	1821      	adds	r1, r4, r0
 800472c:	428b      	cmp	r3, r1
 800472e:	bf04      	itt	eq
 8004730:	6819      	ldreq	r1, [r3, #0]
 8004732:	685b      	ldreq	r3, [r3, #4]
 8004734:	6063      	str	r3, [r4, #4]
 8004736:	bf04      	itt	eq
 8004738:	1809      	addeq	r1, r1, r0
 800473a:	6021      	streq	r1, [r4, #0]
 800473c:	6054      	str	r4, [r2, #4]
 800473e:	e7ca      	b.n	80046d6 <_free_r+0x22>
 8004740:	bd38      	pop	{r3, r4, r5, pc}
 8004742:	bf00      	nop
 8004744:	2000034c 	.word	0x2000034c

08004748 <sbrk_aligned>:
 8004748:	b570      	push	{r4, r5, r6, lr}
 800474a:	4e0f      	ldr	r6, [pc, #60]	@ (8004788 <sbrk_aligned+0x40>)
 800474c:	460c      	mov	r4, r1
 800474e:	6831      	ldr	r1, [r6, #0]
 8004750:	4605      	mov	r5, r0
 8004752:	b911      	cbnz	r1, 800475a <sbrk_aligned+0x12>
 8004754:	f000 fba6 	bl	8004ea4 <_sbrk_r>
 8004758:	6030      	str	r0, [r6, #0]
 800475a:	4621      	mov	r1, r4
 800475c:	4628      	mov	r0, r5
 800475e:	f000 fba1 	bl	8004ea4 <_sbrk_r>
 8004762:	1c43      	adds	r3, r0, #1
 8004764:	d103      	bne.n	800476e <sbrk_aligned+0x26>
 8004766:	f04f 34ff 	mov.w	r4, #4294967295
 800476a:	4620      	mov	r0, r4
 800476c:	bd70      	pop	{r4, r5, r6, pc}
 800476e:	1cc4      	adds	r4, r0, #3
 8004770:	f024 0403 	bic.w	r4, r4, #3
 8004774:	42a0      	cmp	r0, r4
 8004776:	d0f8      	beq.n	800476a <sbrk_aligned+0x22>
 8004778:	1a21      	subs	r1, r4, r0
 800477a:	4628      	mov	r0, r5
 800477c:	f000 fb92 	bl	8004ea4 <_sbrk_r>
 8004780:	3001      	adds	r0, #1
 8004782:	d1f2      	bne.n	800476a <sbrk_aligned+0x22>
 8004784:	e7ef      	b.n	8004766 <sbrk_aligned+0x1e>
 8004786:	bf00      	nop
 8004788:	20000348 	.word	0x20000348

0800478c <_malloc_r>:
 800478c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004790:	1ccd      	adds	r5, r1, #3
 8004792:	f025 0503 	bic.w	r5, r5, #3
 8004796:	3508      	adds	r5, #8
 8004798:	2d0c      	cmp	r5, #12
 800479a:	bf38      	it	cc
 800479c:	250c      	movcc	r5, #12
 800479e:	2d00      	cmp	r5, #0
 80047a0:	4606      	mov	r6, r0
 80047a2:	db01      	blt.n	80047a8 <_malloc_r+0x1c>
 80047a4:	42a9      	cmp	r1, r5
 80047a6:	d904      	bls.n	80047b2 <_malloc_r+0x26>
 80047a8:	230c      	movs	r3, #12
 80047aa:	6033      	str	r3, [r6, #0]
 80047ac:	2000      	movs	r0, #0
 80047ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004888 <_malloc_r+0xfc>
 80047b6:	f000 f869 	bl	800488c <__malloc_lock>
 80047ba:	f8d8 3000 	ldr.w	r3, [r8]
 80047be:	461c      	mov	r4, r3
 80047c0:	bb44      	cbnz	r4, 8004814 <_malloc_r+0x88>
 80047c2:	4629      	mov	r1, r5
 80047c4:	4630      	mov	r0, r6
 80047c6:	f7ff ffbf 	bl	8004748 <sbrk_aligned>
 80047ca:	1c43      	adds	r3, r0, #1
 80047cc:	4604      	mov	r4, r0
 80047ce:	d158      	bne.n	8004882 <_malloc_r+0xf6>
 80047d0:	f8d8 4000 	ldr.w	r4, [r8]
 80047d4:	4627      	mov	r7, r4
 80047d6:	2f00      	cmp	r7, #0
 80047d8:	d143      	bne.n	8004862 <_malloc_r+0xd6>
 80047da:	2c00      	cmp	r4, #0
 80047dc:	d04b      	beq.n	8004876 <_malloc_r+0xea>
 80047de:	6823      	ldr	r3, [r4, #0]
 80047e0:	4639      	mov	r1, r7
 80047e2:	4630      	mov	r0, r6
 80047e4:	eb04 0903 	add.w	r9, r4, r3
 80047e8:	f000 fb5c 	bl	8004ea4 <_sbrk_r>
 80047ec:	4581      	cmp	r9, r0
 80047ee:	d142      	bne.n	8004876 <_malloc_r+0xea>
 80047f0:	6821      	ldr	r1, [r4, #0]
 80047f2:	1a6d      	subs	r5, r5, r1
 80047f4:	4629      	mov	r1, r5
 80047f6:	4630      	mov	r0, r6
 80047f8:	f7ff ffa6 	bl	8004748 <sbrk_aligned>
 80047fc:	3001      	adds	r0, #1
 80047fe:	d03a      	beq.n	8004876 <_malloc_r+0xea>
 8004800:	6823      	ldr	r3, [r4, #0]
 8004802:	442b      	add	r3, r5
 8004804:	6023      	str	r3, [r4, #0]
 8004806:	f8d8 3000 	ldr.w	r3, [r8]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	bb62      	cbnz	r2, 8004868 <_malloc_r+0xdc>
 800480e:	f8c8 7000 	str.w	r7, [r8]
 8004812:	e00f      	b.n	8004834 <_malloc_r+0xa8>
 8004814:	6822      	ldr	r2, [r4, #0]
 8004816:	1b52      	subs	r2, r2, r5
 8004818:	d420      	bmi.n	800485c <_malloc_r+0xd0>
 800481a:	2a0b      	cmp	r2, #11
 800481c:	d917      	bls.n	800484e <_malloc_r+0xc2>
 800481e:	1961      	adds	r1, r4, r5
 8004820:	42a3      	cmp	r3, r4
 8004822:	6025      	str	r5, [r4, #0]
 8004824:	bf18      	it	ne
 8004826:	6059      	strne	r1, [r3, #4]
 8004828:	6863      	ldr	r3, [r4, #4]
 800482a:	bf08      	it	eq
 800482c:	f8c8 1000 	streq.w	r1, [r8]
 8004830:	5162      	str	r2, [r4, r5]
 8004832:	604b      	str	r3, [r1, #4]
 8004834:	4630      	mov	r0, r6
 8004836:	f000 f82f 	bl	8004898 <__malloc_unlock>
 800483a:	f104 000b 	add.w	r0, r4, #11
 800483e:	1d23      	adds	r3, r4, #4
 8004840:	f020 0007 	bic.w	r0, r0, #7
 8004844:	1ac2      	subs	r2, r0, r3
 8004846:	bf1c      	itt	ne
 8004848:	1a1b      	subne	r3, r3, r0
 800484a:	50a3      	strne	r3, [r4, r2]
 800484c:	e7af      	b.n	80047ae <_malloc_r+0x22>
 800484e:	6862      	ldr	r2, [r4, #4]
 8004850:	42a3      	cmp	r3, r4
 8004852:	bf0c      	ite	eq
 8004854:	f8c8 2000 	streq.w	r2, [r8]
 8004858:	605a      	strne	r2, [r3, #4]
 800485a:	e7eb      	b.n	8004834 <_malloc_r+0xa8>
 800485c:	4623      	mov	r3, r4
 800485e:	6864      	ldr	r4, [r4, #4]
 8004860:	e7ae      	b.n	80047c0 <_malloc_r+0x34>
 8004862:	463c      	mov	r4, r7
 8004864:	687f      	ldr	r7, [r7, #4]
 8004866:	e7b6      	b.n	80047d6 <_malloc_r+0x4a>
 8004868:	461a      	mov	r2, r3
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	42a3      	cmp	r3, r4
 800486e:	d1fb      	bne.n	8004868 <_malloc_r+0xdc>
 8004870:	2300      	movs	r3, #0
 8004872:	6053      	str	r3, [r2, #4]
 8004874:	e7de      	b.n	8004834 <_malloc_r+0xa8>
 8004876:	230c      	movs	r3, #12
 8004878:	6033      	str	r3, [r6, #0]
 800487a:	4630      	mov	r0, r6
 800487c:	f000 f80c 	bl	8004898 <__malloc_unlock>
 8004880:	e794      	b.n	80047ac <_malloc_r+0x20>
 8004882:	6005      	str	r5, [r0, #0]
 8004884:	e7d6      	b.n	8004834 <_malloc_r+0xa8>
 8004886:	bf00      	nop
 8004888:	2000034c 	.word	0x2000034c

0800488c <__malloc_lock>:
 800488c:	4801      	ldr	r0, [pc, #4]	@ (8004894 <__malloc_lock+0x8>)
 800488e:	f7ff bf0f 	b.w	80046b0 <__retarget_lock_acquire_recursive>
 8004892:	bf00      	nop
 8004894:	20000344 	.word	0x20000344

08004898 <__malloc_unlock>:
 8004898:	4801      	ldr	r0, [pc, #4]	@ (80048a0 <__malloc_unlock+0x8>)
 800489a:	f7ff bf0a 	b.w	80046b2 <__retarget_lock_release_recursive>
 800489e:	bf00      	nop
 80048a0:	20000344 	.word	0x20000344

080048a4 <__ssputs_r>:
 80048a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048a8:	688e      	ldr	r6, [r1, #8]
 80048aa:	461f      	mov	r7, r3
 80048ac:	42be      	cmp	r6, r7
 80048ae:	680b      	ldr	r3, [r1, #0]
 80048b0:	4682      	mov	sl, r0
 80048b2:	460c      	mov	r4, r1
 80048b4:	4690      	mov	r8, r2
 80048b6:	d82d      	bhi.n	8004914 <__ssputs_r+0x70>
 80048b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80048bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80048c0:	d026      	beq.n	8004910 <__ssputs_r+0x6c>
 80048c2:	6965      	ldr	r5, [r4, #20]
 80048c4:	6909      	ldr	r1, [r1, #16]
 80048c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048ca:	eba3 0901 	sub.w	r9, r3, r1
 80048ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80048d2:	1c7b      	adds	r3, r7, #1
 80048d4:	444b      	add	r3, r9
 80048d6:	106d      	asrs	r5, r5, #1
 80048d8:	429d      	cmp	r5, r3
 80048da:	bf38      	it	cc
 80048dc:	461d      	movcc	r5, r3
 80048de:	0553      	lsls	r3, r2, #21
 80048e0:	d527      	bpl.n	8004932 <__ssputs_r+0x8e>
 80048e2:	4629      	mov	r1, r5
 80048e4:	f7ff ff52 	bl	800478c <_malloc_r>
 80048e8:	4606      	mov	r6, r0
 80048ea:	b360      	cbz	r0, 8004946 <__ssputs_r+0xa2>
 80048ec:	6921      	ldr	r1, [r4, #16]
 80048ee:	464a      	mov	r2, r9
 80048f0:	f000 fae8 	bl	8004ec4 <memcpy>
 80048f4:	89a3      	ldrh	r3, [r4, #12]
 80048f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80048fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048fe:	81a3      	strh	r3, [r4, #12]
 8004900:	6126      	str	r6, [r4, #16]
 8004902:	6165      	str	r5, [r4, #20]
 8004904:	444e      	add	r6, r9
 8004906:	eba5 0509 	sub.w	r5, r5, r9
 800490a:	6026      	str	r6, [r4, #0]
 800490c:	60a5      	str	r5, [r4, #8]
 800490e:	463e      	mov	r6, r7
 8004910:	42be      	cmp	r6, r7
 8004912:	d900      	bls.n	8004916 <__ssputs_r+0x72>
 8004914:	463e      	mov	r6, r7
 8004916:	6820      	ldr	r0, [r4, #0]
 8004918:	4632      	mov	r2, r6
 800491a:	4641      	mov	r1, r8
 800491c:	f000 faa8 	bl	8004e70 <memmove>
 8004920:	68a3      	ldr	r3, [r4, #8]
 8004922:	1b9b      	subs	r3, r3, r6
 8004924:	60a3      	str	r3, [r4, #8]
 8004926:	6823      	ldr	r3, [r4, #0]
 8004928:	4433      	add	r3, r6
 800492a:	6023      	str	r3, [r4, #0]
 800492c:	2000      	movs	r0, #0
 800492e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004932:	462a      	mov	r2, r5
 8004934:	f000 fad4 	bl	8004ee0 <_realloc_r>
 8004938:	4606      	mov	r6, r0
 800493a:	2800      	cmp	r0, #0
 800493c:	d1e0      	bne.n	8004900 <__ssputs_r+0x5c>
 800493e:	6921      	ldr	r1, [r4, #16]
 8004940:	4650      	mov	r0, sl
 8004942:	f7ff feb7 	bl	80046b4 <_free_r>
 8004946:	230c      	movs	r3, #12
 8004948:	f8ca 3000 	str.w	r3, [sl]
 800494c:	89a3      	ldrh	r3, [r4, #12]
 800494e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004952:	81a3      	strh	r3, [r4, #12]
 8004954:	f04f 30ff 	mov.w	r0, #4294967295
 8004958:	e7e9      	b.n	800492e <__ssputs_r+0x8a>
	...

0800495c <_svfiprintf_r>:
 800495c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004960:	4698      	mov	r8, r3
 8004962:	898b      	ldrh	r3, [r1, #12]
 8004964:	061b      	lsls	r3, r3, #24
 8004966:	b09d      	sub	sp, #116	@ 0x74
 8004968:	4607      	mov	r7, r0
 800496a:	460d      	mov	r5, r1
 800496c:	4614      	mov	r4, r2
 800496e:	d510      	bpl.n	8004992 <_svfiprintf_r+0x36>
 8004970:	690b      	ldr	r3, [r1, #16]
 8004972:	b973      	cbnz	r3, 8004992 <_svfiprintf_r+0x36>
 8004974:	2140      	movs	r1, #64	@ 0x40
 8004976:	f7ff ff09 	bl	800478c <_malloc_r>
 800497a:	6028      	str	r0, [r5, #0]
 800497c:	6128      	str	r0, [r5, #16]
 800497e:	b930      	cbnz	r0, 800498e <_svfiprintf_r+0x32>
 8004980:	230c      	movs	r3, #12
 8004982:	603b      	str	r3, [r7, #0]
 8004984:	f04f 30ff 	mov.w	r0, #4294967295
 8004988:	b01d      	add	sp, #116	@ 0x74
 800498a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800498e:	2340      	movs	r3, #64	@ 0x40
 8004990:	616b      	str	r3, [r5, #20]
 8004992:	2300      	movs	r3, #0
 8004994:	9309      	str	r3, [sp, #36]	@ 0x24
 8004996:	2320      	movs	r3, #32
 8004998:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800499c:	f8cd 800c 	str.w	r8, [sp, #12]
 80049a0:	2330      	movs	r3, #48	@ 0x30
 80049a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004b40 <_svfiprintf_r+0x1e4>
 80049a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80049aa:	f04f 0901 	mov.w	r9, #1
 80049ae:	4623      	mov	r3, r4
 80049b0:	469a      	mov	sl, r3
 80049b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049b6:	b10a      	cbz	r2, 80049bc <_svfiprintf_r+0x60>
 80049b8:	2a25      	cmp	r2, #37	@ 0x25
 80049ba:	d1f9      	bne.n	80049b0 <_svfiprintf_r+0x54>
 80049bc:	ebba 0b04 	subs.w	fp, sl, r4
 80049c0:	d00b      	beq.n	80049da <_svfiprintf_r+0x7e>
 80049c2:	465b      	mov	r3, fp
 80049c4:	4622      	mov	r2, r4
 80049c6:	4629      	mov	r1, r5
 80049c8:	4638      	mov	r0, r7
 80049ca:	f7ff ff6b 	bl	80048a4 <__ssputs_r>
 80049ce:	3001      	adds	r0, #1
 80049d0:	f000 80a7 	beq.w	8004b22 <_svfiprintf_r+0x1c6>
 80049d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049d6:	445a      	add	r2, fp
 80049d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80049da:	f89a 3000 	ldrb.w	r3, [sl]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 809f 	beq.w	8004b22 <_svfiprintf_r+0x1c6>
 80049e4:	2300      	movs	r3, #0
 80049e6:	f04f 32ff 	mov.w	r2, #4294967295
 80049ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049ee:	f10a 0a01 	add.w	sl, sl, #1
 80049f2:	9304      	str	r3, [sp, #16]
 80049f4:	9307      	str	r3, [sp, #28]
 80049f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80049fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80049fc:	4654      	mov	r4, sl
 80049fe:	2205      	movs	r2, #5
 8004a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a04:	484e      	ldr	r0, [pc, #312]	@ (8004b40 <_svfiprintf_r+0x1e4>)
 8004a06:	f7fb fbe3 	bl	80001d0 <memchr>
 8004a0a:	9a04      	ldr	r2, [sp, #16]
 8004a0c:	b9d8      	cbnz	r0, 8004a46 <_svfiprintf_r+0xea>
 8004a0e:	06d0      	lsls	r0, r2, #27
 8004a10:	bf44      	itt	mi
 8004a12:	2320      	movmi	r3, #32
 8004a14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a18:	0711      	lsls	r1, r2, #28
 8004a1a:	bf44      	itt	mi
 8004a1c:	232b      	movmi	r3, #43	@ 0x2b
 8004a1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a22:	f89a 3000 	ldrb.w	r3, [sl]
 8004a26:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a28:	d015      	beq.n	8004a56 <_svfiprintf_r+0xfa>
 8004a2a:	9a07      	ldr	r2, [sp, #28]
 8004a2c:	4654      	mov	r4, sl
 8004a2e:	2000      	movs	r0, #0
 8004a30:	f04f 0c0a 	mov.w	ip, #10
 8004a34:	4621      	mov	r1, r4
 8004a36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a3a:	3b30      	subs	r3, #48	@ 0x30
 8004a3c:	2b09      	cmp	r3, #9
 8004a3e:	d94b      	bls.n	8004ad8 <_svfiprintf_r+0x17c>
 8004a40:	b1b0      	cbz	r0, 8004a70 <_svfiprintf_r+0x114>
 8004a42:	9207      	str	r2, [sp, #28]
 8004a44:	e014      	b.n	8004a70 <_svfiprintf_r+0x114>
 8004a46:	eba0 0308 	sub.w	r3, r0, r8
 8004a4a:	fa09 f303 	lsl.w	r3, r9, r3
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	9304      	str	r3, [sp, #16]
 8004a52:	46a2      	mov	sl, r4
 8004a54:	e7d2      	b.n	80049fc <_svfiprintf_r+0xa0>
 8004a56:	9b03      	ldr	r3, [sp, #12]
 8004a58:	1d19      	adds	r1, r3, #4
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	9103      	str	r1, [sp, #12]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	bfbb      	ittet	lt
 8004a62:	425b      	neglt	r3, r3
 8004a64:	f042 0202 	orrlt.w	r2, r2, #2
 8004a68:	9307      	strge	r3, [sp, #28]
 8004a6a:	9307      	strlt	r3, [sp, #28]
 8004a6c:	bfb8      	it	lt
 8004a6e:	9204      	strlt	r2, [sp, #16]
 8004a70:	7823      	ldrb	r3, [r4, #0]
 8004a72:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a74:	d10a      	bne.n	8004a8c <_svfiprintf_r+0x130>
 8004a76:	7863      	ldrb	r3, [r4, #1]
 8004a78:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a7a:	d132      	bne.n	8004ae2 <_svfiprintf_r+0x186>
 8004a7c:	9b03      	ldr	r3, [sp, #12]
 8004a7e:	1d1a      	adds	r2, r3, #4
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	9203      	str	r2, [sp, #12]
 8004a84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a88:	3402      	adds	r4, #2
 8004a8a:	9305      	str	r3, [sp, #20]
 8004a8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004b50 <_svfiprintf_r+0x1f4>
 8004a90:	7821      	ldrb	r1, [r4, #0]
 8004a92:	2203      	movs	r2, #3
 8004a94:	4650      	mov	r0, sl
 8004a96:	f7fb fb9b 	bl	80001d0 <memchr>
 8004a9a:	b138      	cbz	r0, 8004aac <_svfiprintf_r+0x150>
 8004a9c:	9b04      	ldr	r3, [sp, #16]
 8004a9e:	eba0 000a 	sub.w	r0, r0, sl
 8004aa2:	2240      	movs	r2, #64	@ 0x40
 8004aa4:	4082      	lsls	r2, r0
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	3401      	adds	r4, #1
 8004aaa:	9304      	str	r3, [sp, #16]
 8004aac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ab0:	4824      	ldr	r0, [pc, #144]	@ (8004b44 <_svfiprintf_r+0x1e8>)
 8004ab2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ab6:	2206      	movs	r2, #6
 8004ab8:	f7fb fb8a 	bl	80001d0 <memchr>
 8004abc:	2800      	cmp	r0, #0
 8004abe:	d036      	beq.n	8004b2e <_svfiprintf_r+0x1d2>
 8004ac0:	4b21      	ldr	r3, [pc, #132]	@ (8004b48 <_svfiprintf_r+0x1ec>)
 8004ac2:	bb1b      	cbnz	r3, 8004b0c <_svfiprintf_r+0x1b0>
 8004ac4:	9b03      	ldr	r3, [sp, #12]
 8004ac6:	3307      	adds	r3, #7
 8004ac8:	f023 0307 	bic.w	r3, r3, #7
 8004acc:	3308      	adds	r3, #8
 8004ace:	9303      	str	r3, [sp, #12]
 8004ad0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ad2:	4433      	add	r3, r6
 8004ad4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ad6:	e76a      	b.n	80049ae <_svfiprintf_r+0x52>
 8004ad8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004adc:	460c      	mov	r4, r1
 8004ade:	2001      	movs	r0, #1
 8004ae0:	e7a8      	b.n	8004a34 <_svfiprintf_r+0xd8>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	3401      	adds	r4, #1
 8004ae6:	9305      	str	r3, [sp, #20]
 8004ae8:	4619      	mov	r1, r3
 8004aea:	f04f 0c0a 	mov.w	ip, #10
 8004aee:	4620      	mov	r0, r4
 8004af0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004af4:	3a30      	subs	r2, #48	@ 0x30
 8004af6:	2a09      	cmp	r2, #9
 8004af8:	d903      	bls.n	8004b02 <_svfiprintf_r+0x1a6>
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d0c6      	beq.n	8004a8c <_svfiprintf_r+0x130>
 8004afe:	9105      	str	r1, [sp, #20]
 8004b00:	e7c4      	b.n	8004a8c <_svfiprintf_r+0x130>
 8004b02:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b06:	4604      	mov	r4, r0
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e7f0      	b.n	8004aee <_svfiprintf_r+0x192>
 8004b0c:	ab03      	add	r3, sp, #12
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	462a      	mov	r2, r5
 8004b12:	4b0e      	ldr	r3, [pc, #56]	@ (8004b4c <_svfiprintf_r+0x1f0>)
 8004b14:	a904      	add	r1, sp, #16
 8004b16:	4638      	mov	r0, r7
 8004b18:	f3af 8000 	nop.w
 8004b1c:	1c42      	adds	r2, r0, #1
 8004b1e:	4606      	mov	r6, r0
 8004b20:	d1d6      	bne.n	8004ad0 <_svfiprintf_r+0x174>
 8004b22:	89ab      	ldrh	r3, [r5, #12]
 8004b24:	065b      	lsls	r3, r3, #25
 8004b26:	f53f af2d 	bmi.w	8004984 <_svfiprintf_r+0x28>
 8004b2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b2c:	e72c      	b.n	8004988 <_svfiprintf_r+0x2c>
 8004b2e:	ab03      	add	r3, sp, #12
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	462a      	mov	r2, r5
 8004b34:	4b05      	ldr	r3, [pc, #20]	@ (8004b4c <_svfiprintf_r+0x1f0>)
 8004b36:	a904      	add	r1, sp, #16
 8004b38:	4638      	mov	r0, r7
 8004b3a:	f000 f879 	bl	8004c30 <_printf_i>
 8004b3e:	e7ed      	b.n	8004b1c <_svfiprintf_r+0x1c0>
 8004b40:	08004fc8 	.word	0x08004fc8
 8004b44:	08004fd2 	.word	0x08004fd2
 8004b48:	00000000 	.word	0x00000000
 8004b4c:	080048a5 	.word	0x080048a5
 8004b50:	08004fce 	.word	0x08004fce

08004b54 <_printf_common>:
 8004b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b58:	4616      	mov	r6, r2
 8004b5a:	4698      	mov	r8, r3
 8004b5c:	688a      	ldr	r2, [r1, #8]
 8004b5e:	690b      	ldr	r3, [r1, #16]
 8004b60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b64:	4293      	cmp	r3, r2
 8004b66:	bfb8      	it	lt
 8004b68:	4613      	movlt	r3, r2
 8004b6a:	6033      	str	r3, [r6, #0]
 8004b6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b70:	4607      	mov	r7, r0
 8004b72:	460c      	mov	r4, r1
 8004b74:	b10a      	cbz	r2, 8004b7a <_printf_common+0x26>
 8004b76:	3301      	adds	r3, #1
 8004b78:	6033      	str	r3, [r6, #0]
 8004b7a:	6823      	ldr	r3, [r4, #0]
 8004b7c:	0699      	lsls	r1, r3, #26
 8004b7e:	bf42      	ittt	mi
 8004b80:	6833      	ldrmi	r3, [r6, #0]
 8004b82:	3302      	addmi	r3, #2
 8004b84:	6033      	strmi	r3, [r6, #0]
 8004b86:	6825      	ldr	r5, [r4, #0]
 8004b88:	f015 0506 	ands.w	r5, r5, #6
 8004b8c:	d106      	bne.n	8004b9c <_printf_common+0x48>
 8004b8e:	f104 0a19 	add.w	sl, r4, #25
 8004b92:	68e3      	ldr	r3, [r4, #12]
 8004b94:	6832      	ldr	r2, [r6, #0]
 8004b96:	1a9b      	subs	r3, r3, r2
 8004b98:	42ab      	cmp	r3, r5
 8004b9a:	dc26      	bgt.n	8004bea <_printf_common+0x96>
 8004b9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ba0:	6822      	ldr	r2, [r4, #0]
 8004ba2:	3b00      	subs	r3, #0
 8004ba4:	bf18      	it	ne
 8004ba6:	2301      	movne	r3, #1
 8004ba8:	0692      	lsls	r2, r2, #26
 8004baa:	d42b      	bmi.n	8004c04 <_printf_common+0xb0>
 8004bac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004bb0:	4641      	mov	r1, r8
 8004bb2:	4638      	mov	r0, r7
 8004bb4:	47c8      	blx	r9
 8004bb6:	3001      	adds	r0, #1
 8004bb8:	d01e      	beq.n	8004bf8 <_printf_common+0xa4>
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	6922      	ldr	r2, [r4, #16]
 8004bbe:	f003 0306 	and.w	r3, r3, #6
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	bf02      	ittt	eq
 8004bc6:	68e5      	ldreq	r5, [r4, #12]
 8004bc8:	6833      	ldreq	r3, [r6, #0]
 8004bca:	1aed      	subeq	r5, r5, r3
 8004bcc:	68a3      	ldr	r3, [r4, #8]
 8004bce:	bf0c      	ite	eq
 8004bd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bd4:	2500      	movne	r5, #0
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	bfc4      	itt	gt
 8004bda:	1a9b      	subgt	r3, r3, r2
 8004bdc:	18ed      	addgt	r5, r5, r3
 8004bde:	2600      	movs	r6, #0
 8004be0:	341a      	adds	r4, #26
 8004be2:	42b5      	cmp	r5, r6
 8004be4:	d11a      	bne.n	8004c1c <_printf_common+0xc8>
 8004be6:	2000      	movs	r0, #0
 8004be8:	e008      	b.n	8004bfc <_printf_common+0xa8>
 8004bea:	2301      	movs	r3, #1
 8004bec:	4652      	mov	r2, sl
 8004bee:	4641      	mov	r1, r8
 8004bf0:	4638      	mov	r0, r7
 8004bf2:	47c8      	blx	r9
 8004bf4:	3001      	adds	r0, #1
 8004bf6:	d103      	bne.n	8004c00 <_printf_common+0xac>
 8004bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c00:	3501      	adds	r5, #1
 8004c02:	e7c6      	b.n	8004b92 <_printf_common+0x3e>
 8004c04:	18e1      	adds	r1, r4, r3
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	2030      	movs	r0, #48	@ 0x30
 8004c0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c0e:	4422      	add	r2, r4
 8004c10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c18:	3302      	adds	r3, #2
 8004c1a:	e7c7      	b.n	8004bac <_printf_common+0x58>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	4622      	mov	r2, r4
 8004c20:	4641      	mov	r1, r8
 8004c22:	4638      	mov	r0, r7
 8004c24:	47c8      	blx	r9
 8004c26:	3001      	adds	r0, #1
 8004c28:	d0e6      	beq.n	8004bf8 <_printf_common+0xa4>
 8004c2a:	3601      	adds	r6, #1
 8004c2c:	e7d9      	b.n	8004be2 <_printf_common+0x8e>
	...

08004c30 <_printf_i>:
 8004c30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c34:	7e0f      	ldrb	r7, [r1, #24]
 8004c36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c38:	2f78      	cmp	r7, #120	@ 0x78
 8004c3a:	4691      	mov	r9, r2
 8004c3c:	4680      	mov	r8, r0
 8004c3e:	460c      	mov	r4, r1
 8004c40:	469a      	mov	sl, r3
 8004c42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c46:	d807      	bhi.n	8004c58 <_printf_i+0x28>
 8004c48:	2f62      	cmp	r7, #98	@ 0x62
 8004c4a:	d80a      	bhi.n	8004c62 <_printf_i+0x32>
 8004c4c:	2f00      	cmp	r7, #0
 8004c4e:	f000 80d2 	beq.w	8004df6 <_printf_i+0x1c6>
 8004c52:	2f58      	cmp	r7, #88	@ 0x58
 8004c54:	f000 80b9 	beq.w	8004dca <_printf_i+0x19a>
 8004c58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c60:	e03a      	b.n	8004cd8 <_printf_i+0xa8>
 8004c62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c66:	2b15      	cmp	r3, #21
 8004c68:	d8f6      	bhi.n	8004c58 <_printf_i+0x28>
 8004c6a:	a101      	add	r1, pc, #4	@ (adr r1, 8004c70 <_printf_i+0x40>)
 8004c6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c70:	08004cc9 	.word	0x08004cc9
 8004c74:	08004cdd 	.word	0x08004cdd
 8004c78:	08004c59 	.word	0x08004c59
 8004c7c:	08004c59 	.word	0x08004c59
 8004c80:	08004c59 	.word	0x08004c59
 8004c84:	08004c59 	.word	0x08004c59
 8004c88:	08004cdd 	.word	0x08004cdd
 8004c8c:	08004c59 	.word	0x08004c59
 8004c90:	08004c59 	.word	0x08004c59
 8004c94:	08004c59 	.word	0x08004c59
 8004c98:	08004c59 	.word	0x08004c59
 8004c9c:	08004ddd 	.word	0x08004ddd
 8004ca0:	08004d07 	.word	0x08004d07
 8004ca4:	08004d97 	.word	0x08004d97
 8004ca8:	08004c59 	.word	0x08004c59
 8004cac:	08004c59 	.word	0x08004c59
 8004cb0:	08004dff 	.word	0x08004dff
 8004cb4:	08004c59 	.word	0x08004c59
 8004cb8:	08004d07 	.word	0x08004d07
 8004cbc:	08004c59 	.word	0x08004c59
 8004cc0:	08004c59 	.word	0x08004c59
 8004cc4:	08004d9f 	.word	0x08004d9f
 8004cc8:	6833      	ldr	r3, [r6, #0]
 8004cca:	1d1a      	adds	r2, r3, #4
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6032      	str	r2, [r6, #0]
 8004cd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004cd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e09d      	b.n	8004e18 <_printf_i+0x1e8>
 8004cdc:	6833      	ldr	r3, [r6, #0]
 8004cde:	6820      	ldr	r0, [r4, #0]
 8004ce0:	1d19      	adds	r1, r3, #4
 8004ce2:	6031      	str	r1, [r6, #0]
 8004ce4:	0606      	lsls	r6, r0, #24
 8004ce6:	d501      	bpl.n	8004cec <_printf_i+0xbc>
 8004ce8:	681d      	ldr	r5, [r3, #0]
 8004cea:	e003      	b.n	8004cf4 <_printf_i+0xc4>
 8004cec:	0645      	lsls	r5, r0, #25
 8004cee:	d5fb      	bpl.n	8004ce8 <_printf_i+0xb8>
 8004cf0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004cf4:	2d00      	cmp	r5, #0
 8004cf6:	da03      	bge.n	8004d00 <_printf_i+0xd0>
 8004cf8:	232d      	movs	r3, #45	@ 0x2d
 8004cfa:	426d      	negs	r5, r5
 8004cfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d00:	4859      	ldr	r0, [pc, #356]	@ (8004e68 <_printf_i+0x238>)
 8004d02:	230a      	movs	r3, #10
 8004d04:	e011      	b.n	8004d2a <_printf_i+0xfa>
 8004d06:	6821      	ldr	r1, [r4, #0]
 8004d08:	6833      	ldr	r3, [r6, #0]
 8004d0a:	0608      	lsls	r0, r1, #24
 8004d0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d10:	d402      	bmi.n	8004d18 <_printf_i+0xe8>
 8004d12:	0649      	lsls	r1, r1, #25
 8004d14:	bf48      	it	mi
 8004d16:	b2ad      	uxthmi	r5, r5
 8004d18:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d1a:	4853      	ldr	r0, [pc, #332]	@ (8004e68 <_printf_i+0x238>)
 8004d1c:	6033      	str	r3, [r6, #0]
 8004d1e:	bf14      	ite	ne
 8004d20:	230a      	movne	r3, #10
 8004d22:	2308      	moveq	r3, #8
 8004d24:	2100      	movs	r1, #0
 8004d26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d2a:	6866      	ldr	r6, [r4, #4]
 8004d2c:	60a6      	str	r6, [r4, #8]
 8004d2e:	2e00      	cmp	r6, #0
 8004d30:	bfa2      	ittt	ge
 8004d32:	6821      	ldrge	r1, [r4, #0]
 8004d34:	f021 0104 	bicge.w	r1, r1, #4
 8004d38:	6021      	strge	r1, [r4, #0]
 8004d3a:	b90d      	cbnz	r5, 8004d40 <_printf_i+0x110>
 8004d3c:	2e00      	cmp	r6, #0
 8004d3e:	d04b      	beq.n	8004dd8 <_printf_i+0x1a8>
 8004d40:	4616      	mov	r6, r2
 8004d42:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d46:	fb03 5711 	mls	r7, r3, r1, r5
 8004d4a:	5dc7      	ldrb	r7, [r0, r7]
 8004d4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d50:	462f      	mov	r7, r5
 8004d52:	42bb      	cmp	r3, r7
 8004d54:	460d      	mov	r5, r1
 8004d56:	d9f4      	bls.n	8004d42 <_printf_i+0x112>
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	d10b      	bne.n	8004d74 <_printf_i+0x144>
 8004d5c:	6823      	ldr	r3, [r4, #0]
 8004d5e:	07df      	lsls	r7, r3, #31
 8004d60:	d508      	bpl.n	8004d74 <_printf_i+0x144>
 8004d62:	6923      	ldr	r3, [r4, #16]
 8004d64:	6861      	ldr	r1, [r4, #4]
 8004d66:	4299      	cmp	r1, r3
 8004d68:	bfde      	ittt	le
 8004d6a:	2330      	movle	r3, #48	@ 0x30
 8004d6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d70:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d74:	1b92      	subs	r2, r2, r6
 8004d76:	6122      	str	r2, [r4, #16]
 8004d78:	f8cd a000 	str.w	sl, [sp]
 8004d7c:	464b      	mov	r3, r9
 8004d7e:	aa03      	add	r2, sp, #12
 8004d80:	4621      	mov	r1, r4
 8004d82:	4640      	mov	r0, r8
 8004d84:	f7ff fee6 	bl	8004b54 <_printf_common>
 8004d88:	3001      	adds	r0, #1
 8004d8a:	d14a      	bne.n	8004e22 <_printf_i+0x1f2>
 8004d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d90:	b004      	add	sp, #16
 8004d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	f043 0320 	orr.w	r3, r3, #32
 8004d9c:	6023      	str	r3, [r4, #0]
 8004d9e:	4833      	ldr	r0, [pc, #204]	@ (8004e6c <_printf_i+0x23c>)
 8004da0:	2778      	movs	r7, #120	@ 0x78
 8004da2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004da6:	6823      	ldr	r3, [r4, #0]
 8004da8:	6831      	ldr	r1, [r6, #0]
 8004daa:	061f      	lsls	r7, r3, #24
 8004dac:	f851 5b04 	ldr.w	r5, [r1], #4
 8004db0:	d402      	bmi.n	8004db8 <_printf_i+0x188>
 8004db2:	065f      	lsls	r7, r3, #25
 8004db4:	bf48      	it	mi
 8004db6:	b2ad      	uxthmi	r5, r5
 8004db8:	6031      	str	r1, [r6, #0]
 8004dba:	07d9      	lsls	r1, r3, #31
 8004dbc:	bf44      	itt	mi
 8004dbe:	f043 0320 	orrmi.w	r3, r3, #32
 8004dc2:	6023      	strmi	r3, [r4, #0]
 8004dc4:	b11d      	cbz	r5, 8004dce <_printf_i+0x19e>
 8004dc6:	2310      	movs	r3, #16
 8004dc8:	e7ac      	b.n	8004d24 <_printf_i+0xf4>
 8004dca:	4827      	ldr	r0, [pc, #156]	@ (8004e68 <_printf_i+0x238>)
 8004dcc:	e7e9      	b.n	8004da2 <_printf_i+0x172>
 8004dce:	6823      	ldr	r3, [r4, #0]
 8004dd0:	f023 0320 	bic.w	r3, r3, #32
 8004dd4:	6023      	str	r3, [r4, #0]
 8004dd6:	e7f6      	b.n	8004dc6 <_printf_i+0x196>
 8004dd8:	4616      	mov	r6, r2
 8004dda:	e7bd      	b.n	8004d58 <_printf_i+0x128>
 8004ddc:	6833      	ldr	r3, [r6, #0]
 8004dde:	6825      	ldr	r5, [r4, #0]
 8004de0:	6961      	ldr	r1, [r4, #20]
 8004de2:	1d18      	adds	r0, r3, #4
 8004de4:	6030      	str	r0, [r6, #0]
 8004de6:	062e      	lsls	r6, r5, #24
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	d501      	bpl.n	8004df0 <_printf_i+0x1c0>
 8004dec:	6019      	str	r1, [r3, #0]
 8004dee:	e002      	b.n	8004df6 <_printf_i+0x1c6>
 8004df0:	0668      	lsls	r0, r5, #25
 8004df2:	d5fb      	bpl.n	8004dec <_printf_i+0x1bc>
 8004df4:	8019      	strh	r1, [r3, #0]
 8004df6:	2300      	movs	r3, #0
 8004df8:	6123      	str	r3, [r4, #16]
 8004dfa:	4616      	mov	r6, r2
 8004dfc:	e7bc      	b.n	8004d78 <_printf_i+0x148>
 8004dfe:	6833      	ldr	r3, [r6, #0]
 8004e00:	1d1a      	adds	r2, r3, #4
 8004e02:	6032      	str	r2, [r6, #0]
 8004e04:	681e      	ldr	r6, [r3, #0]
 8004e06:	6862      	ldr	r2, [r4, #4]
 8004e08:	2100      	movs	r1, #0
 8004e0a:	4630      	mov	r0, r6
 8004e0c:	f7fb f9e0 	bl	80001d0 <memchr>
 8004e10:	b108      	cbz	r0, 8004e16 <_printf_i+0x1e6>
 8004e12:	1b80      	subs	r0, r0, r6
 8004e14:	6060      	str	r0, [r4, #4]
 8004e16:	6863      	ldr	r3, [r4, #4]
 8004e18:	6123      	str	r3, [r4, #16]
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e20:	e7aa      	b.n	8004d78 <_printf_i+0x148>
 8004e22:	6923      	ldr	r3, [r4, #16]
 8004e24:	4632      	mov	r2, r6
 8004e26:	4649      	mov	r1, r9
 8004e28:	4640      	mov	r0, r8
 8004e2a:	47d0      	blx	sl
 8004e2c:	3001      	adds	r0, #1
 8004e2e:	d0ad      	beq.n	8004d8c <_printf_i+0x15c>
 8004e30:	6823      	ldr	r3, [r4, #0]
 8004e32:	079b      	lsls	r3, r3, #30
 8004e34:	d413      	bmi.n	8004e5e <_printf_i+0x22e>
 8004e36:	68e0      	ldr	r0, [r4, #12]
 8004e38:	9b03      	ldr	r3, [sp, #12]
 8004e3a:	4298      	cmp	r0, r3
 8004e3c:	bfb8      	it	lt
 8004e3e:	4618      	movlt	r0, r3
 8004e40:	e7a6      	b.n	8004d90 <_printf_i+0x160>
 8004e42:	2301      	movs	r3, #1
 8004e44:	4632      	mov	r2, r6
 8004e46:	4649      	mov	r1, r9
 8004e48:	4640      	mov	r0, r8
 8004e4a:	47d0      	blx	sl
 8004e4c:	3001      	adds	r0, #1
 8004e4e:	d09d      	beq.n	8004d8c <_printf_i+0x15c>
 8004e50:	3501      	adds	r5, #1
 8004e52:	68e3      	ldr	r3, [r4, #12]
 8004e54:	9903      	ldr	r1, [sp, #12]
 8004e56:	1a5b      	subs	r3, r3, r1
 8004e58:	42ab      	cmp	r3, r5
 8004e5a:	dcf2      	bgt.n	8004e42 <_printf_i+0x212>
 8004e5c:	e7eb      	b.n	8004e36 <_printf_i+0x206>
 8004e5e:	2500      	movs	r5, #0
 8004e60:	f104 0619 	add.w	r6, r4, #25
 8004e64:	e7f5      	b.n	8004e52 <_printf_i+0x222>
 8004e66:	bf00      	nop
 8004e68:	08004fd9 	.word	0x08004fd9
 8004e6c:	08004fea 	.word	0x08004fea

08004e70 <memmove>:
 8004e70:	4288      	cmp	r0, r1
 8004e72:	b510      	push	{r4, lr}
 8004e74:	eb01 0402 	add.w	r4, r1, r2
 8004e78:	d902      	bls.n	8004e80 <memmove+0x10>
 8004e7a:	4284      	cmp	r4, r0
 8004e7c:	4623      	mov	r3, r4
 8004e7e:	d807      	bhi.n	8004e90 <memmove+0x20>
 8004e80:	1e43      	subs	r3, r0, #1
 8004e82:	42a1      	cmp	r1, r4
 8004e84:	d008      	beq.n	8004e98 <memmove+0x28>
 8004e86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e8e:	e7f8      	b.n	8004e82 <memmove+0x12>
 8004e90:	4402      	add	r2, r0
 8004e92:	4601      	mov	r1, r0
 8004e94:	428a      	cmp	r2, r1
 8004e96:	d100      	bne.n	8004e9a <memmove+0x2a>
 8004e98:	bd10      	pop	{r4, pc}
 8004e9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ea2:	e7f7      	b.n	8004e94 <memmove+0x24>

08004ea4 <_sbrk_r>:
 8004ea4:	b538      	push	{r3, r4, r5, lr}
 8004ea6:	4d06      	ldr	r5, [pc, #24]	@ (8004ec0 <_sbrk_r+0x1c>)
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	4604      	mov	r4, r0
 8004eac:	4608      	mov	r0, r1
 8004eae:	602b      	str	r3, [r5, #0]
 8004eb0:	f7fc fc94 	bl	80017dc <_sbrk>
 8004eb4:	1c43      	adds	r3, r0, #1
 8004eb6:	d102      	bne.n	8004ebe <_sbrk_r+0x1a>
 8004eb8:	682b      	ldr	r3, [r5, #0]
 8004eba:	b103      	cbz	r3, 8004ebe <_sbrk_r+0x1a>
 8004ebc:	6023      	str	r3, [r4, #0]
 8004ebe:	bd38      	pop	{r3, r4, r5, pc}
 8004ec0:	20000340 	.word	0x20000340

08004ec4 <memcpy>:
 8004ec4:	440a      	add	r2, r1
 8004ec6:	4291      	cmp	r1, r2
 8004ec8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ecc:	d100      	bne.n	8004ed0 <memcpy+0xc>
 8004ece:	4770      	bx	lr
 8004ed0:	b510      	push	{r4, lr}
 8004ed2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ed6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004eda:	4291      	cmp	r1, r2
 8004edc:	d1f9      	bne.n	8004ed2 <memcpy+0xe>
 8004ede:	bd10      	pop	{r4, pc}

08004ee0 <_realloc_r>:
 8004ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ee4:	4680      	mov	r8, r0
 8004ee6:	4615      	mov	r5, r2
 8004ee8:	460c      	mov	r4, r1
 8004eea:	b921      	cbnz	r1, 8004ef6 <_realloc_r+0x16>
 8004eec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ef0:	4611      	mov	r1, r2
 8004ef2:	f7ff bc4b 	b.w	800478c <_malloc_r>
 8004ef6:	b92a      	cbnz	r2, 8004f04 <_realloc_r+0x24>
 8004ef8:	f7ff fbdc 	bl	80046b4 <_free_r>
 8004efc:	2400      	movs	r4, #0
 8004efe:	4620      	mov	r0, r4
 8004f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f04:	f000 f81a 	bl	8004f3c <_malloc_usable_size_r>
 8004f08:	4285      	cmp	r5, r0
 8004f0a:	4606      	mov	r6, r0
 8004f0c:	d802      	bhi.n	8004f14 <_realloc_r+0x34>
 8004f0e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004f12:	d8f4      	bhi.n	8004efe <_realloc_r+0x1e>
 8004f14:	4629      	mov	r1, r5
 8004f16:	4640      	mov	r0, r8
 8004f18:	f7ff fc38 	bl	800478c <_malloc_r>
 8004f1c:	4607      	mov	r7, r0
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	d0ec      	beq.n	8004efc <_realloc_r+0x1c>
 8004f22:	42b5      	cmp	r5, r6
 8004f24:	462a      	mov	r2, r5
 8004f26:	4621      	mov	r1, r4
 8004f28:	bf28      	it	cs
 8004f2a:	4632      	movcs	r2, r6
 8004f2c:	f7ff ffca 	bl	8004ec4 <memcpy>
 8004f30:	4621      	mov	r1, r4
 8004f32:	4640      	mov	r0, r8
 8004f34:	f7ff fbbe 	bl	80046b4 <_free_r>
 8004f38:	463c      	mov	r4, r7
 8004f3a:	e7e0      	b.n	8004efe <_realloc_r+0x1e>

08004f3c <_malloc_usable_size_r>:
 8004f3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f40:	1f18      	subs	r0, r3, #4
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	bfbc      	itt	lt
 8004f46:	580b      	ldrlt	r3, [r1, r0]
 8004f48:	18c0      	addlt	r0, r0, r3
 8004f4a:	4770      	bx	lr

08004f4c <_init>:
 8004f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4e:	bf00      	nop
 8004f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f52:	bc08      	pop	{r3}
 8004f54:	469e      	mov	lr, r3
 8004f56:	4770      	bx	lr

08004f58 <_fini>:
 8004f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f5a:	bf00      	nop
 8004f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f5e:	bc08      	pop	{r3}
 8004f60:	469e      	mov	lr, r3
 8004f62:	4770      	bx	lr
